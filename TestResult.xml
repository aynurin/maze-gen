<?xml version="1.0" encoding="utf-8" standalone="no"?>
<test-run id="0" runstate="Runnable" testcasecount="996" result="Skipped" label="Ignored" total="441" passed="339" failed="0" warnings="0" inconclusive="0" skipped="102" asserts="17026" engine-version="3.17.0.0" clr-version="4.0.30319.42000" start-time="2024-02-20 15:16:39Z" end-time="2024-02-20 15:16:53Z" duration="13.814363">
  <command-line><![CDATA[/home/data/repos/github.com/aynurin/maze-gen/packages/NUnit.ConsoleRunner.3.17.0/tools/nunit3-console.exe build/Debug/tests/PlayersWorlds.Maps.Tests.dll --where=Category!=Load --framework=mono-4.0]]></command-line>
  <filter>
    <not>
      <prop name="Category">Load</prop>
    </not>
  </filter>
  <test-suite type="Assembly" id="1-2041" name="PlayersWorlds.Maps.Tests.dll" fullname="/home/data/repos/github.com/aynurin/maze-gen/build/Debug/tests/PlayersWorlds.Maps.Tests.dll" runstate="Runnable" testcasecount="996" result="Skipped" label="Ignored" site="Child" start-time="2024-02-20T15:16:39.7125410Z" end-time="2024-02-20T15:16:53.0621330Z" duration="13.349540" total="441" passed="339" failed="0" warnings="0" inconclusive="0" skipped="102" asserts="17026">
    <environment framework-version="4.0.1.0" clr-version="4.0.30319.42000" os-version="Unix 6.1.71.1" platform="Unix" cwd="/home/data/repos/github.com/aynurin/maze-gen" machine-name="lightview" user="shav" user-domain="lightview" culture="en-US" uiculture="en-US" os-architecture="x64" />
    <settings>
      <setting name="RequestedRuntimeFramework" value="mono-4.0" />
      <setting name="DisposeRunners" value="True" />
      <setting name="WorkDirectory" value="/home/data/repos/github.com/aynurin/maze-gen" />
      <setting name="ImageRuntimeVersion" value="4.0.30319" />
      <setting name="ImageTargetFrameworkName" value=".NETFramework,Version=v4.7" />
      <setting name="ImageRequiresX86" value="False" />
      <setting name="ImageRequiresDefaultAppDomainAssemblyResolver" value="False" />
      <setting name="TargetRuntimeFramework" value="mono-4.0" />
      <setting name="NumberOfTestWorkers" value="24" />
    </settings>
    <properties>
      <property name="_PID" value="1201843" />
      <property name="_APPDOMAIN" value="domain-" />
    </properties>
    <reason>
      <message><![CDATA[One or more child tests were ignored]]></message>
    </reason>
    <test-suite type="SetUpFixture" id="1-1003" name="[default namespace]" fullname="SetUpTests" classname="SetUpTests" runstate="Runnable" testcasecount="996" result="Skipped" label="Ignored" site="Child" start-time="2024-02-20T15:16:39.7175310Z" end-time="2024-02-20T15:16:53.0621230Z" duration="13.344592" total="441" passed="339" failed="0" warnings="0" inconclusive="0" skipped="102" asserts="17026">
      <reason>
        <message><![CDATA[One or more child tests were ignored]]></message>
      </reason>
      <test-suite type="TestSuite" id="1-2042" name="PlayersWorlds" fullname="PlayersWorlds" runstate="Runnable" testcasecount="994" result="Skipped" label="Ignored" site="Child" start-time="2024-02-20T15:16:39.7204610Z" end-time="2024-02-20T15:16:53.0528160Z" duration="13.332354" total="439" passed="337" failed="0" warnings="0" inconclusive="0" skipped="102" asserts="13984">
        <reason>
          <message><![CDATA[One or more child tests were ignored]]></message>
        </reason>
        <test-suite type="TestSuite" id="1-2043" name="Maps" fullname="PlayersWorlds.Maps" runstate="Runnable" testcasecount="994" result="Skipped" label="Ignored" site="Child" start-time="2024-02-20T15:16:39.7205110Z" end-time="2024-02-20T15:16:53.0528080Z" duration="13.332297" total="439" passed="337" failed="0" warnings="0" inconclusive="0" skipped="102" asserts="13984">
          <reason>
            <message><![CDATA[One or more child tests were ignored]]></message>
          </reason>
          <test-suite type="TestSuite" id="1-2048" name="Areas" fullname="PlayersWorlds.Maps.Areas" runstate="Runnable" testcasecount="115" result="Passed" start-time="2024-02-20T15:16:39.7205200Z" end-time="2024-02-20T15:16:39.8941380Z" duration="0.173618" total="64" passed="64" failed="0" warnings="0" inconclusive="0" skipped="0" asserts="206">
            <test-suite type="TestSuite" id="1-2049" name="Evolving" fullname="PlayersWorlds.Maps.Areas.Evolving" runstate="Runnable" testcasecount="110" result="Passed" start-time="2024-02-20T15:16:39.7205250Z" end-time="2024-02-20T15:16:39.8904350Z" duration="0.169910" total="59" passed="59" failed="0" warnings="0" inconclusive="0" skipped="0" asserts="179">
              <test-suite type="TestFixture" id="1-1924" name="AreaDistributorTest" fullname="PlayersWorlds.Maps.Areas.Evolving.AreaDistributorTest" classname="PlayersWorlds.Maps.Areas.Evolving.AreaDistributorTest" runstate="Runnable" testcasecount="73" result="Passed" start-time="2024-02-20T15:16:39.7205690Z" end-time="2024-02-20T15:16:39.7726520Z" duration="0.052083" total="23" passed="23" failed="0" warnings="0" inconclusive="0" skipped="0" asserts="46">
                <test-case id="1-1925" name="AreaDistributorTest_OneTest" fullname="PlayersWorlds.Maps.Areas.Evolving.AreaDistributorTest.AreaDistributorTest_OneTest" methodname="AreaDistributorTest_OneTest" classname="PlayersWorlds.Maps.Areas.Evolving.AreaDistributorTest" runstate="Runnable" seed="241276201" result="Passed" start-time="2024-02-20T15:16:39.7206360Z" end-time="2024-02-20T15:16:39.7539930Z" duration="0.033445" asserts="2" />
                <test-suite type="ParameterizedMethod" id="1-1938" name="AreaDistributorTest_OverlapTwo" fullname="PlayersWorlds.Maps.Areas.Evolving.AreaDistributorTest.AreaDistributorTest_OverlapTwo" classname="PlayersWorlds.Maps.Areas.Evolving.AreaDistributorTest" runstate="Runnable" testcasecount="10" result="Passed" start-time="2024-02-20T15:16:39.7553050Z" end-time="2024-02-20T15:16:39.7672760Z" duration="0.011971" total="10" passed="10" failed="0" warnings="0" inconclusive="0" skipped="0" asserts="20">
                  <test-case id="1-1928" name="AreaDistributorTest_OverlapTwo(&quot;11x11: P2x2;S4x4 P5x5;S4x4&quot;)" fullname="PlayersWorlds.Maps.Areas.Evolving.AreaDistributorTest.AreaDistributorTest_OverlapTwo(&quot;11x11: P2x2;S4x4 P5x5;S4x4&quot;)" methodname="AreaDistributorTest_OverlapTwo" classname="PlayersWorlds.Maps.Areas.Evolving.AreaDistributorTest" runstate="Runnable" seed="1903482209" result="Passed" start-time="2024-02-20T15:16:39.7553770Z" end-time="2024-02-20T15:16:39.7608860Z" duration="0.005509" asserts="2" />
                  <test-case id="1-1929" name="AreaDistributorTest_OverlapTwo(&quot;11x11: P5x2;S4x4 P2x5;S4x4&quot;)" fullname="PlayersWorlds.Maps.Areas.Evolving.AreaDistributorTest.AreaDistributorTest_OverlapTwo(&quot;11x11: P5x2;S4x4 P2x5;S4x4&quot;)" methodname="AreaDistributorTest_OverlapTwo" classname="PlayersWorlds.Maps.Areas.Evolving.AreaDistributorTest" runstate="Runnable" seed="467980099" result="Passed" start-time="2024-02-20T15:16:39.7608940Z" end-time="2024-02-20T15:16:39.7612550Z" duration="0.000361" asserts="2" />
                  <test-case id="1-1930" name="AreaDistributorTest_OverlapTwo(&quot;11x11: P2x5;S4x4 P5x2;S4x4&quot;)" fullname="PlayersWorlds.Maps.Areas.Evolving.AreaDistributorTest.AreaDistributorTest_OverlapTwo(&quot;11x11: P2x5;S4x4 P5x2;S4x4&quot;)" methodname="AreaDistributorTest_OverlapTwo" classname="PlayersWorlds.Maps.Areas.Evolving.AreaDistributorTest" runstate="Runnable" seed="1167325551" result="Passed" start-time="2024-02-20T15:16:39.7612620Z" end-time="2024-02-20T15:16:39.7616250Z" duration="0.000364" asserts="2" />
                  <test-case id="1-1931" name="AreaDistributorTest_OverlapTwo(&quot;11x11: P5x5;S4x4 P2x2;S4x4&quot;)" fullname="PlayersWorlds.Maps.Areas.Evolving.AreaDistributorTest.AreaDistributorTest_OverlapTwo(&quot;11x11: P5x5;S4x4 P2x2;S4x4&quot;)" methodname="AreaDistributorTest_OverlapTwo" classname="PlayersWorlds.Maps.Areas.Evolving.AreaDistributorTest" runstate="Runnable" seed="1516019954" result="Passed" start-time="2024-02-20T15:16:39.7616320Z" end-time="2024-02-20T15:16:39.7633120Z" duration="0.001681" asserts="2" />
                  <test-case id="1-1932" name="AreaDistributorTest_OverlapTwo(&quot;11x11: P4x4;S4x4 P3x3;S4x4&quot;)" fullname="PlayersWorlds.Maps.Areas.Evolving.AreaDistributorTest.AreaDistributorTest_OverlapTwo(&quot;11x11: P4x4;S4x4 P3x3;S4x4&quot;)" methodname="AreaDistributorTest_OverlapTwo" classname="PlayersWorlds.Maps.Areas.Evolving.AreaDistributorTest" runstate="Runnable" seed="209502623" result="Passed" start-time="2024-02-20T15:16:39.7633200Z" end-time="2024-02-20T15:16:39.7636460Z" duration="0.000327" asserts="2" />
                  <test-case id="1-1933" name="AreaDistributorTest_OverlapTwo(&quot;11x11: P4x3;S4x4 P3x4;S4x4&quot;)" fullname="PlayersWorlds.Maps.Areas.Evolving.AreaDistributorTest.AreaDistributorTest_OverlapTwo(&quot;11x11: P4x3;S4x4 P3x4;S4x4&quot;)" methodname="AreaDistributorTest_OverlapTwo" classname="PlayersWorlds.Maps.Areas.Evolving.AreaDistributorTest" runstate="Runnable" seed="1593494618" result="Passed" start-time="2024-02-20T15:16:39.7636520Z" end-time="2024-02-20T15:16:39.7639710Z" duration="0.000319" asserts="2" />
                  <test-case id="1-1934" name="AreaDistributorTest_OverlapTwo(&quot;11x11: P3.5x3.5;S4x4 P3.5x3.5;S4x4&quot;)" fullname="PlayersWorlds.Maps.Areas.Evolving.AreaDistributorTest.AreaDistributorTest_OverlapTwo(&quot;11x11: P3.5x3.5;S4x4 P3.5x3.5;S4x4&quot;)" methodname="AreaDistributorTest_OverlapTwo" classname="PlayersWorlds.Maps.Areas.Evolving.AreaDistributorTest" runstate="Runnable" seed="777305829" result="Passed" start-time="2024-02-20T15:16:39.7639770Z" end-time="2024-02-20T15:16:39.7652960Z" duration="0.001320" asserts="2" />
                  <test-case id="1-1935" name="AreaDistributorTest_OverlapTwo(&quot;16x16: P4x4;S8x8 P5x9;S2x2&quot;)" fullname="PlayersWorlds.Maps.Areas.Evolving.AreaDistributorTest.AreaDistributorTest_OverlapTwo(&quot;16x16: P4x4;S8x8 P5x9;S2x2&quot;)" methodname="AreaDistributorTest_OverlapTwo" classname="PlayersWorlds.Maps.Areas.Evolving.AreaDistributorTest" runstate="Runnable" seed="1892798573" result="Passed" start-time="2024-02-20T15:16:39.7653050Z" end-time="2024-02-20T15:16:39.7656320Z" duration="0.000327" asserts="2" />
                  <test-case id="1-1936" name="AreaDistributorTest_OverlapTwo(&quot;16x16: P4x4;S8x8 P5x7;S4x4&quot;)" fullname="PlayersWorlds.Maps.Areas.Evolving.AreaDistributorTest.AreaDistributorTest_OverlapTwo(&quot;16x16: P4x4;S8x8 P5x7;S4x4&quot;)" methodname="AreaDistributorTest_OverlapTwo" classname="PlayersWorlds.Maps.Areas.Evolving.AreaDistributorTest" runstate="Runnable" seed="710533317" result="Passed" start-time="2024-02-20T15:16:39.7656380Z" end-time="2024-02-20T15:16:39.7660110Z" duration="0.000373" asserts="2" />
                  <test-case id="1-1937" name="AreaDistributorTest_OverlapTwo(&quot;16x16: P5x5;S6x6 P6x6;S4x4&quot;)" fullname="PlayersWorlds.Maps.Areas.Evolving.AreaDistributorTest.AreaDistributorTest_OverlapTwo(&quot;16x16: P5x5;S6x6 P6x6;S4x4&quot;)" methodname="AreaDistributorTest_OverlapTwo" classname="PlayersWorlds.Maps.Areas.Evolving.AreaDistributorTest" runstate="Runnable" seed="1554627159" result="Passed" start-time="2024-02-20T15:16:39.7660160Z" end-time="2024-02-20T15:16:39.7663390Z" duration="0.000323" asserts="2" />
                </test-suite>
                <test-case id="1-1926" name="AreaDistributorTest_SidePressure" fullname="PlayersWorlds.Maps.Areas.Evolving.AreaDistributorTest.AreaDistributorTest_SidePressure" methodname="AreaDistributorTest_SidePressure" classname="PlayersWorlds.Maps.Areas.Evolving.AreaDistributorTest" runstate="Runnable" seed="319923605" result="Passed" start-time="2024-02-20T15:16:39.7681040Z" end-time="2024-02-20T15:16:39.7690690Z" duration="0.000966" asserts="2" />
                <test-suite type="ParameterizedMethod" id="1-1949" name="AreaDistributorTest_SingleMapForce" fullname="PlayersWorlds.Maps.Areas.Evolving.AreaDistributorTest.AreaDistributorTest_SingleMapForce" classname="PlayersWorlds.Maps.Areas.Evolving.AreaDistributorTest" runstate="Runnable" testcasecount="10" result="Passed" start-time="2024-02-20T15:16:39.7690780Z" end-time="2024-02-20T15:16:39.7722640Z" duration="0.003186" total="10" passed="10" failed="0" warnings="0" inconclusive="0" skipped="0" asserts="20">
                  <test-case id="1-1939" name="AreaDistributorTest_SingleMapForce(&quot;6x12: P1x2;S2x2&quot;)" fullname="PlayersWorlds.Maps.Areas.Evolving.AreaDistributorTest.AreaDistributorTest_SingleMapForce(&quot;6x12: P1x2;S2x2&quot;)" methodname="AreaDistributorTest_SingleMapForce" classname="PlayersWorlds.Maps.Areas.Evolving.AreaDistributorTest" runstate="Runnable" seed="1697617280" result="Passed" start-time="2024-02-20T15:16:39.7690920Z" end-time="2024-02-20T15:16:39.7696450Z" duration="0.000553" asserts="2" />
                  <test-case id="1-1940" name="AreaDistributorTest_SingleMapForce(&quot;6x12: P2x2;S2x2&quot;)" fullname="PlayersWorlds.Maps.Areas.Evolving.AreaDistributorTest.AreaDistributorTest_SingleMapForce(&quot;6x12: P2x2;S2x2&quot;)" methodname="AreaDistributorTest_SingleMapForce" classname="PlayersWorlds.Maps.Areas.Evolving.AreaDistributorTest" runstate="Runnable" seed="75785421" result="Passed" start-time="2024-02-20T15:16:39.7696520Z" end-time="2024-02-20T15:16:39.7698720Z" duration="0.000220" asserts="2" />
                  <test-case id="1-1941" name="AreaDistributorTest_SingleMapForce(&quot;6x12: P3x2;S2x2&quot;)" fullname="PlayersWorlds.Maps.Areas.Evolving.AreaDistributorTest.AreaDistributorTest_SingleMapForce(&quot;6x12: P3x2;S2x2&quot;)" methodname="AreaDistributorTest_SingleMapForce" classname="PlayersWorlds.Maps.Areas.Evolving.AreaDistributorTest" runstate="Runnable" seed="1414516802" result="Passed" start-time="2024-02-20T15:16:39.7698780Z" end-time="2024-02-20T15:16:39.7703950Z" duration="0.000517" asserts="2" />
                  <test-case id="1-1942" name="AreaDistributorTest_SingleMapForce(&quot;6x12: P1x5;S2x2&quot;)" fullname="PlayersWorlds.Maps.Areas.Evolving.AreaDistributorTest.AreaDistributorTest_SingleMapForce(&quot;6x12: P1x5;S2x2&quot;)" methodname="AreaDistributorTest_SingleMapForce" classname="PlayersWorlds.Maps.Areas.Evolving.AreaDistributorTest" runstate="Runnable" seed="2125448974" result="Passed" start-time="2024-02-20T15:16:39.7704010Z" end-time="2024-02-20T15:16:39.7707710Z" duration="0.000371" asserts="2" />
                  <test-case id="1-1943" name="AreaDistributorTest_SingleMapForce(&quot;6x12: P2x5;S2x2&quot;)" fullname="PlayersWorlds.Maps.Areas.Evolving.AreaDistributorTest.AreaDistributorTest_SingleMapForce(&quot;6x12: P2x5;S2x2&quot;)" methodname="AreaDistributorTest_SingleMapForce" classname="PlayersWorlds.Maps.Areas.Evolving.AreaDistributorTest" runstate="Runnable" seed="1716397909" result="Passed" start-time="2024-02-20T15:16:39.7707770Z" end-time="2024-02-20T15:16:39.7709820Z" duration="0.000205" asserts="2" />
                  <test-case id="1-1944" name="AreaDistributorTest_SingleMapForce(&quot;6x12: P3x5;S2x2&quot;)" fullname="PlayersWorlds.Maps.Areas.Evolving.AreaDistributorTest.AreaDistributorTest_SingleMapForce(&quot;6x12: P3x5;S2x2&quot;)" methodname="AreaDistributorTest_SingleMapForce" classname="PlayersWorlds.Maps.Areas.Evolving.AreaDistributorTest" runstate="Runnable" seed="898396534" result="Passed" start-time="2024-02-20T15:16:39.7709870Z" end-time="2024-02-20T15:16:39.7711890Z" duration="0.000203" asserts="2" />
                  <test-case id="1-1945" name="AreaDistributorTest_SingleMapForce(&quot;6x12: P1x8;S2x2&quot;)" fullname="PlayersWorlds.Maps.Areas.Evolving.AreaDistributorTest.AreaDistributorTest_SingleMapForce(&quot;6x12: P1x8;S2x2&quot;)" methodname="AreaDistributorTest_SingleMapForce" classname="PlayersWorlds.Maps.Areas.Evolving.AreaDistributorTest" runstate="Runnable" seed="1473014109" result="Passed" start-time="2024-02-20T15:16:39.7711940Z" end-time="2024-02-20T15:16:39.7715530Z" duration="0.000358" asserts="2" />
                  <test-case id="1-1946" name="AreaDistributorTest_SingleMapForce(&quot;6x12: P2x8;S2x2&quot;)" fullname="PlayersWorlds.Maps.Areas.Evolving.AreaDistributorTest.AreaDistributorTest_SingleMapForce(&quot;6x12: P2x8;S2x2&quot;)" methodname="AreaDistributorTest_SingleMapForce" classname="PlayersWorlds.Maps.Areas.Evolving.AreaDistributorTest" runstate="Runnable" seed="801167403" result="Passed" start-time="2024-02-20T15:16:39.7715580Z" end-time="2024-02-20T15:16:39.7717400Z" duration="0.000182" asserts="2" />
                  <test-case id="1-1947" name="AreaDistributorTest_SingleMapForce(&quot;6x12: P3x8;S2x2&quot;)" fullname="PlayersWorlds.Maps.Areas.Evolving.AreaDistributorTest.AreaDistributorTest_SingleMapForce(&quot;6x12: P3x8;S2x2&quot;)" methodname="AreaDistributorTest_SingleMapForce" classname="PlayersWorlds.Maps.Areas.Evolving.AreaDistributorTest" runstate="Runnable" seed="1595222873" result="Passed" start-time="2024-02-20T15:16:39.7717450Z" end-time="2024-02-20T15:16:39.7719260Z" duration="0.000181" asserts="2" />
                  <test-case id="1-1948" name="AreaDistributorTest_SingleMapForce(&quot;6x12: P-1x-4;S2x2&quot;)" fullname="PlayersWorlds.Maps.Areas.Evolving.AreaDistributorTest.AreaDistributorTest_SingleMapForce(&quot;6x12: P-1x-4;S2x2&quot;)" methodname="AreaDistributorTest_SingleMapForce" classname="PlayersWorlds.Maps.Areas.Evolving.AreaDistributorTest" runstate="Runnable" seed="1756816231" result="Passed" start-time="2024-02-20T15:16:39.7719300Z" end-time="2024-02-20T15:16:39.7722550Z" duration="0.000325" asserts="2" />
                </test-suite>
                <test-case id="1-1927" name="AreaDistributorTest_TwoTest" fullname="PlayersWorlds.Maps.Areas.Evolving.AreaDistributorTest.AreaDistributorTest_TwoTest" methodname="AreaDistributorTest_TwoTest" classname="PlayersWorlds.Maps.Areas.Evolving.AreaDistributorTest" runstate="Runnable" seed="1760602969" result="Passed" start-time="2024-02-20T15:16:39.7722700Z" end-time="2024-02-20T15:16:39.7726230Z" duration="0.000353" asserts="2" />
              </test-suite>
              <test-suite type="TestFixture" id="1-2001" name="EvolvingSimulatorTest" fullname="PlayersWorlds.Maps.Areas.Evolving.EvolvingSimulatorTest" classname="PlayersWorlds.Maps.Areas.Evolving.EvolvingSimulatorTest" runstate="Runnable" testcasecount="2" result="Passed" start-time="2024-02-20T15:16:39.7730640Z" end-time="2024-02-20T15:16:39.8800410Z" duration="0.106977" total="2" passed="2" failed="0" warnings="0" inconclusive="0" skipped="0" asserts="2">
                <test-case id="1-2003" name="EvolvingSimulator_ReturnsEpochsIfEvolitionIsNotComplete" fullname="PlayersWorlds.Maps.Areas.Evolving.EvolvingSimulatorTest.EvolvingSimulator_ReturnsEpochsIfEvolitionIsNotComplete" methodname="EvolvingSimulator_ReturnsEpochsIfEvolitionIsNotComplete" classname="PlayersWorlds.Maps.Areas.Evolving.EvolvingSimulatorTest" runstate="Runnable" seed="317539591" result="Passed" start-time="2024-02-20T15:16:39.7731180Z" end-time="2024-02-20T15:16:39.8776120Z" duration="0.104494" asserts="1" />
                <test-case id="1-2002" name="EvolvingSimulator_ThrowsIfMaxEpochsIsZero" fullname="PlayersWorlds.Maps.Areas.Evolving.EvolvingSimulatorTest.EvolvingSimulator_ThrowsIfMaxEpochsIsZero" methodname="EvolvingSimulator_ThrowsIfMaxEpochsIsZero" classname="PlayersWorlds.Maps.Areas.Evolving.EvolvingSimulatorTest" runstate="Runnable" seed="1964948720" result="Passed" start-time="2024-02-20T15:16:39.8776310Z" end-time="2024-02-20T15:16:39.8800230Z" duration="0.002392" asserts="1" />
              </test-suite>
              <test-suite type="TestFixture" id="1-2004" name="FloatingAreaTest" fullname="PlayersWorlds.Maps.Areas.Evolving.FloatingAreaTest" classname="PlayersWorlds.Maps.Areas.Evolving.FloatingAreaTest" runstate="Runnable" testcasecount="4" result="Passed" start-time="2024-02-20T15:16:39.8800590Z" end-time="2024-02-20T15:16:39.8841070Z" duration="0.004048" total="4" passed="4" failed="0" warnings="0" inconclusive="0" skipped="0" asserts="10">
                <test-case id="1-2008" name="CenterIsValid" fullname="PlayersWorlds.Maps.Areas.Evolving.FloatingAreaTest.CenterIsValid" methodname="CenterIsValid" classname="PlayersWorlds.Maps.Areas.Evolving.FloatingAreaTest" runstate="Runnable" seed="1757361330" result="Passed" start-time="2024-02-20T15:16:39.8801140Z" end-time="2024-02-20T15:16:39.8826520Z" duration="0.002539" asserts="4" />
                <test-case id="1-2007" name="Contains" fullname="PlayersWorlds.Maps.Areas.Evolving.FloatingAreaTest.Contains" methodname="Contains" classname="PlayersWorlds.Maps.Areas.Evolving.FloatingAreaTest" runstate="Runnable" seed="2068531844" result="Passed" start-time="2024-02-20T15:16:39.8826630Z" end-time="2024-02-20T15:16:39.8831030Z" duration="0.000440" asserts="2" />
                <test-case id="1-2006" name="Overlaps" fullname="PlayersWorlds.Maps.Areas.Evolving.FloatingAreaTest.Overlaps" methodname="Overlaps" classname="PlayersWorlds.Maps.Areas.Evolving.FloatingAreaTest" runstate="Runnable" seed="16084938" result="Passed" start-time="2024-02-20T15:16:39.8831100Z" end-time="2024-02-20T15:16:39.8833170Z" duration="0.000207" asserts="2" />
                <test-case id="1-2005" name="Parse" fullname="PlayersWorlds.Maps.Areas.Evolving.FloatingAreaTest.Parse" methodname="Parse" classname="PlayersWorlds.Maps.Areas.Evolving.FloatingAreaTest" runstate="Runnable" seed="196110238" result="Passed" start-time="2024-02-20T15:16:39.8833240Z" end-time="2024-02-20T15:16:39.8840940Z" duration="0.000770" asserts="2" />
              </test-suite>
              <test-suite type="TestFixture" id="1-2009" name="ForceFormulaTestTest" fullname="PlayersWorlds.Maps.Areas.Evolving.ForceFormulaTestTest" classname="PlayersWorlds.Maps.Areas.Evolving.ForceFormulaTestTest" runstate="Runnable" testcasecount="8" result="Passed" start-time="2024-02-20T15:16:39.8841180Z" end-time="2024-02-20T15:16:39.8868170Z" duration="0.002699" total="8" passed="8" failed="0" warnings="0" inconclusive="0" skipped="0" asserts="42">
                <test-case id="1-2015" name="CollideForce_Negative" fullname="PlayersWorlds.Maps.Areas.Evolving.ForceFormulaTestTest.CollideForce_Negative" methodname="CollideForce_Negative" classname="PlayersWorlds.Maps.Areas.Evolving.ForceFormulaTestTest" runstate="Runnable" seed="1171049205" result="Passed" start-time="2024-02-20T15:16:39.8841650Z" end-time="2024-02-20T15:16:39.8851430Z" duration="0.000978" asserts="9" />
                <test-case id="1-2014" name="CollideForce_Positive" fullname="PlayersWorlds.Maps.Areas.Evolving.ForceFormulaTestTest.CollideForce_Positive" methodname="CollideForce_Positive" classname="PlayersWorlds.Maps.Areas.Evolving.ForceFormulaTestTest" runstate="Runnable" seed="860724551" result="Passed" start-time="2024-02-20T15:16:39.8851540Z" end-time="2024-02-20T15:16:39.8854770Z" duration="0.000324" asserts="9" />
                <test-case id="1-2011" name="NormalForce_Negative" fullname="PlayersWorlds.Maps.Areas.Evolving.ForceFormulaTestTest.NormalForce_Negative" methodname="NormalForce_Negative" classname="PlayersWorlds.Maps.Areas.Evolving.ForceFormulaTestTest" runstate="Runnable" seed="1551127427" result="Passed" start-time="2024-02-20T15:16:39.8854840Z" end-time="2024-02-20T15:16:39.8858580Z" duration="0.000374" asserts="3" />
                <test-case id="1-2013" name="NormalForce_NegativeCapped" fullname="PlayersWorlds.Maps.Areas.Evolving.ForceFormulaTestTest.NormalForce_NegativeCapped" methodname="NormalForce_NegativeCapped" classname="PlayersWorlds.Maps.Areas.Evolving.ForceFormulaTestTest" runstate="Runnable" seed="531880069" result="Passed" start-time="2024-02-20T15:16:39.8858660Z" end-time="2024-02-20T15:16:39.8860270Z" duration="0.000162" asserts="5" />
                <test-case id="1-2010" name="NormalForce_Positive" fullname="PlayersWorlds.Maps.Areas.Evolving.ForceFormulaTestTest.NormalForce_Positive" methodname="NormalForce_Positive" classname="PlayersWorlds.Maps.Areas.Evolving.ForceFormulaTestTest" runstate="Runnable" seed="2085005635" result="Passed" start-time="2024-02-20T15:16:39.8860390Z" end-time="2024-02-20T15:16:39.8861480Z" duration="0.000109" asserts="3" />
                <test-case id="1-2012" name="NormalForce_PositiveCapped" fullname="PlayersWorlds.Maps.Areas.Evolving.ForceFormulaTestTest.NormalForce_PositiveCapped" methodname="NormalForce_PositiveCapped" classname="PlayersWorlds.Maps.Areas.Evolving.ForceFormulaTestTest" runstate="Runnable" seed="1539409271" result="Passed" start-time="2024-02-20T15:16:39.8861540Z" end-time="2024-02-20T15:16:39.8862970Z" duration="0.000143" asserts="5" />
                <test-case id="1-2017" name="OverlapForce_Negative" fullname="PlayersWorlds.Maps.Areas.Evolving.ForceFormulaTestTest.OverlapForce_Negative" methodname="OverlapForce_Negative" classname="PlayersWorlds.Maps.Areas.Evolving.ForceFormulaTestTest" runstate="Runnable" seed="508584800" result="Passed" start-time="2024-02-20T15:16:39.8863030Z" end-time="2024-02-20T15:16:39.8865590Z" duration="0.000257" asserts="4" />
                <test-case id="1-2016" name="OverlapForce_Positive" fullname="PlayersWorlds.Maps.Areas.Evolving.ForceFormulaTestTest.OverlapForce_Positive" methodname="OverlapForce_Positive" classname="PlayersWorlds.Maps.Areas.Evolving.ForceFormulaTestTest" runstate="Runnable" seed="2063004104" result="Passed" start-time="2024-02-20T15:16:39.8865660Z" end-time="2024-02-20T15:16:39.8868060Z" duration="0.000241" asserts="4" />
              </test-suite>
              <test-suite type="TestFixture" id="1-2018" name="SideToSideForceProducerTest" fullname="PlayersWorlds.Maps.Areas.Evolving.SideToSideForceProducerTest" classname="PlayersWorlds.Maps.Areas.Evolving.SideToSideForceProducerTest" runstate="Runnable" testcasecount="22" result="Passed" start-time="2024-02-20T15:16:39.8868270Z" end-time="2024-02-20T15:16:39.8904290Z" duration="0.003602" total="22" passed="22" failed="0" warnings="0" inconclusive="0" skipped="0" asserts="79">
                <test-case id="1-2036" name="GetAxisDistance_Collide" fullname="PlayersWorlds.Maps.Areas.Evolving.SideToSideForceProducerTest.GetAxisDistance_Collide" methodname="GetAxisDistance_Collide" classname="PlayersWorlds.Maps.Areas.Evolving.SideToSideForceProducerTest" runstate="Runnable" seed="359060933" result="Passed" start-time="2024-02-20T15:16:39.8868770Z" end-time="2024-02-20T15:16:39.8875120Z" duration="0.000635" asserts="6" />
                <test-case id="1-2039" name="GetAxisDistance_Contain1" fullname="PlayersWorlds.Maps.Areas.Evolving.SideToSideForceProducerTest.GetAxisDistance_Contain1" methodname="GetAxisDistance_Contain1" classname="PlayersWorlds.Maps.Areas.Evolving.SideToSideForceProducerTest" runstate="Runnable" seed="1258180126" result="Passed" start-time="2024-02-20T15:16:39.8875210Z" end-time="2024-02-20T15:16:39.8877630Z" duration="0.000242" asserts="6" />
                <test-case id="1-2040" name="GetAxisDistance_Contain2" fullname="PlayersWorlds.Maps.Areas.Evolving.SideToSideForceProducerTest.GetAxisDistance_Contain2" methodname="GetAxisDistance_Contain2" classname="PlayersWorlds.Maps.Areas.Evolving.SideToSideForceProducerTest" runstate="Runnable" seed="1112198000" result="Passed" start-time="2024-02-20T15:16:39.8877700Z" end-time="2024-02-20T15:16:39.8880050Z" duration="0.000234" asserts="6" />
                <test-case id="1-2034" name="GetAxisDistance_Normal1" fullname="PlayersWorlds.Maps.Areas.Evolving.SideToSideForceProducerTest.GetAxisDistance_Normal1" methodname="GetAxisDistance_Normal1" classname="PlayersWorlds.Maps.Areas.Evolving.SideToSideForceProducerTest" runstate="Runnable" seed="228764334" result="Passed" start-time="2024-02-20T15:16:39.8880120Z" end-time="2024-02-20T15:16:39.8882360Z" duration="0.000224" asserts="6" />
                <test-case id="1-2035" name="GetAxisDistance_Normal2" fullname="PlayersWorlds.Maps.Areas.Evolving.SideToSideForceProducerTest.GetAxisDistance_Normal2" methodname="GetAxisDistance_Normal2" classname="PlayersWorlds.Maps.Areas.Evolving.SideToSideForceProducerTest" runstate="Runnable" seed="299028971" result="Passed" start-time="2024-02-20T15:16:39.8882430Z" end-time="2024-02-20T15:16:39.8884570Z" duration="0.000214" asserts="6" />
                <test-case id="1-2037" name="GetAxisDistance_Overlap1" fullname="PlayersWorlds.Maps.Areas.Evolving.SideToSideForceProducerTest.GetAxisDistance_Overlap1" methodname="GetAxisDistance_Overlap1" classname="PlayersWorlds.Maps.Areas.Evolving.SideToSideForceProducerTest" runstate="Runnable" seed="1624969719" result="Passed" start-time="2024-02-20T15:16:39.8884630Z" end-time="2024-02-20T15:16:39.8886770Z" duration="0.000214" asserts="6" />
                <test-case id="1-2038" name="GetAxisDistance_Overlap2" fullname="PlayersWorlds.Maps.Areas.Evolving.SideToSideForceProducerTest.GetAxisDistance_Overlap2" methodname="GetAxisDistance_Overlap2" classname="PlayersWorlds.Maps.Areas.Evolving.SideToSideForceProducerTest" runstate="Runnable" seed="2063533276" result="Passed" start-time="2024-02-20T15:16:39.8886830Z" end-time="2024-02-20T15:16:39.8888920Z" duration="0.000208" asserts="6" />
                <test-case id="1-2028" name="GetOpposingForce_CentersInside_NoOpposingForce" fullname="PlayersWorlds.Maps.Areas.Evolving.SideToSideForceProducerTest.GetOpposingForce_CentersInside_NoOpposingForce" methodname="GetOpposingForce_CentersInside_NoOpposingForce" classname="PlayersWorlds.Maps.Areas.Evolving.SideToSideForceProducerTest" runstate="Runnable" seed="581242346" result="Passed" start-time="2024-02-20T15:16:39.8888980Z" end-time="2024-02-20T15:16:39.8890160Z" duration="0.000118" asserts="2" />
                <test-case id="1-2029" name="GetOpposingForce_CentersInside_WithOpposingForce" fullname="PlayersWorlds.Maps.Areas.Evolving.SideToSideForceProducerTest.GetOpposingForce_CentersInside_WithOpposingForce" methodname="GetOpposingForce_CentersInside_WithOpposingForce" classname="PlayersWorlds.Maps.Areas.Evolving.SideToSideForceProducerTest" runstate="Runnable" seed="948205290" result="Passed" start-time="2024-02-20T15:16:39.8890220Z" end-time="2024-02-20T15:16:39.8891070Z" duration="0.000085" asserts="2" />
                <test-case id="1-2030" name="GetOpposingForce_CentersOutside_NoOpposingForce" fullname="PlayersWorlds.Maps.Areas.Evolving.SideToSideForceProducerTest.GetOpposingForce_CentersOutside_NoOpposingForce" methodname="GetOpposingForce_CentersOutside_NoOpposingForce" classname="PlayersWorlds.Maps.Areas.Evolving.SideToSideForceProducerTest" runstate="Runnable" seed="769215230" result="Passed" start-time="2024-02-20T15:16:39.8891130Z" end-time="2024-02-20T15:16:39.8891910Z" duration="0.000078" asserts="2" />
                <test-case id="1-2031" name="GetOpposingForce_CentersOutside_WithOpposingForce" fullname="PlayersWorlds.Maps.Areas.Evolving.SideToSideForceProducerTest.GetOpposingForce_CentersOutside_WithOpposingForce" methodname="GetOpposingForce_CentersOutside_WithOpposingForce" classname="PlayersWorlds.Maps.Areas.Evolving.SideToSideForceProducerTest" runstate="Runnable" seed="1377716251" result="Passed" start-time="2024-02-20T15:16:39.8891970Z" end-time="2024-02-20T15:16:39.8892700Z" duration="0.000073" asserts="2" />
                <test-case id="1-2032" name="GetOpposingForce_NoIntersection_NoOpposingForce" fullname="PlayersWorlds.Maps.Areas.Evolving.SideToSideForceProducerTest.GetOpposingForce_NoIntersection_NoOpposingForce" methodname="GetOpposingForce_NoIntersection_NoOpposingForce" classname="PlayersWorlds.Maps.Areas.Evolving.SideToSideForceProducerTest" runstate="Runnable" seed="1655767057" result="Passed" start-time="2024-02-20T15:16:39.8892760Z" end-time="2024-02-20T15:16:39.8893470Z" duration="0.000071" asserts="2" />
                <test-case id="1-2033" name="GetOpposingForce_NoIntersection_WithOpposingForce" fullname="PlayersWorlds.Maps.Areas.Evolving.SideToSideForceProducerTest.GetOpposingForce_NoIntersection_WithOpposingForce" methodname="GetOpposingForce_NoIntersection_WithOpposingForce" classname="PlayersWorlds.Maps.Areas.Evolving.SideToSideForceProducerTest" runstate="Runnable" seed="2050536674" result="Passed" start-time="2024-02-20T15:16:39.8893530Z" end-time="2024-02-20T15:16:39.8894230Z" duration="0.000070" asserts="2" />
                <test-case id="1-2026" name="GetOpposingForce_WhenCenterMatches_NoOpposingForce" fullname="PlayersWorlds.Maps.Areas.Evolving.SideToSideForceProducerTest.GetOpposingForce_WhenCenterMatches_NoOpposingForce" methodname="GetOpposingForce_WhenCenterMatches_NoOpposingForce" classname="PlayersWorlds.Maps.Areas.Evolving.SideToSideForceProducerTest" runstate="Runnable" seed="1549129935" result="Passed" start-time="2024-02-20T15:16:39.8894290Z" end-time="2024-02-20T15:16:39.8894980Z" duration="0.000069" asserts="2" />
                <test-case id="1-2027" name="GetOpposingForce_WhenCenterMatches_WithOpposingForce" fullname="PlayersWorlds.Maps.Areas.Evolving.SideToSideForceProducerTest.GetOpposingForce_WhenCenterMatches_WithOpposingForce" methodname="GetOpposingForce_WhenCenterMatches_WithOpposingForce" classname="PlayersWorlds.Maps.Areas.Evolving.SideToSideForceProducerTest" runstate="Runnable" seed="1116686816" result="Passed" start-time="2024-02-20T15:16:39.8895030Z" end-time="2024-02-20T15:16:39.8895730Z" duration="0.000070" asserts="2" />
                <test-case id="1-2022" name="MapAreaSystemTest_DistanceCentersMatch" fullname="PlayersWorlds.Maps.Areas.Evolving.SideToSideForceProducerTest.MapAreaSystemTest_DistanceCentersMatch" methodname="MapAreaSystemTest_DistanceCentersMatch" classname="PlayersWorlds.Maps.Areas.Evolving.SideToSideForceProducerTest" runstate="Runnable" seed="1852542847" result="Passed" start-time="2024-02-20T15:16:39.8895790Z" end-time="2024-02-20T15:16:39.8896810Z" duration="0.000103" asserts="3" />
                <test-case id="1-2025" name="MapAreaSystemTest_DistanceNegativeCollide" fullname="PlayersWorlds.Maps.Areas.Evolving.SideToSideForceProducerTest.MapAreaSystemTest_DistanceNegativeCollide" methodname="MapAreaSystemTest_DistanceNegativeCollide" classname="PlayersWorlds.Maps.Areas.Evolving.SideToSideForceProducerTest" runstate="Runnable" seed="1468167825" result="Passed" start-time="2024-02-20T15:16:39.8896870Z" end-time="2024-02-20T15:16:39.8897880Z" duration="0.000101" asserts="3" />
                <test-case id="1-2023" name="MapAreaSystemTest_DistanceNegativeNormal" fullname="PlayersWorlds.Maps.Areas.Evolving.SideToSideForceProducerTest.MapAreaSystemTest_DistanceNegativeNormal" methodname="MapAreaSystemTest_DistanceNegativeNormal" classname="PlayersWorlds.Maps.Areas.Evolving.SideToSideForceProducerTest" runstate="Runnable" seed="1986806817" result="Passed" start-time="2024-02-20T15:16:39.8897940Z" end-time="2024-02-20T15:16:39.8898870Z" duration="0.000094" asserts="3" />
                <test-case id="1-2024" name="MapAreaSystemTest_DistanceNegativeOverlap" fullname="PlayersWorlds.Maps.Areas.Evolving.SideToSideForceProducerTest.MapAreaSystemTest_DistanceNegativeOverlap" methodname="MapAreaSystemTest_DistanceNegativeOverlap" classname="PlayersWorlds.Maps.Areas.Evolving.SideToSideForceProducerTest" runstate="Runnable" seed="787384790" result="Passed" start-time="2024-02-20T15:16:39.8900120Z" end-time="2024-02-20T15:16:39.8901170Z" duration="0.000105" asserts="3" />
                <test-case id="1-2021" name="MapAreaSystemTest_DistancePositiveCollide" fullname="PlayersWorlds.Maps.Areas.Evolving.SideToSideForceProducerTest.MapAreaSystemTest_DistancePositiveCollide" methodname="MapAreaSystemTest_DistancePositiveCollide" classname="PlayersWorlds.Maps.Areas.Evolving.SideToSideForceProducerTest" runstate="Runnable" seed="1581067905" result="Passed" start-time="2024-02-20T15:16:39.8901230Z" end-time="2024-02-20T15:16:39.8902200Z" duration="0.000097" asserts="3" />
                <test-case id="1-2019" name="MapAreaSystemTest_DistancePositiveNormal" fullname="PlayersWorlds.Maps.Areas.Evolving.SideToSideForceProducerTest.MapAreaSystemTest_DistancePositiveNormal" methodname="MapAreaSystemTest_DistancePositiveNormal" classname="PlayersWorlds.Maps.Areas.Evolving.SideToSideForceProducerTest" runstate="Runnable" seed="1840146739" result="Passed" start-time="2024-02-20T15:16:39.8902260Z" end-time="2024-02-20T15:16:39.8903210Z" duration="0.000096" asserts="3" />
                <test-case id="1-2020" name="MapAreaSystemTest_DistancePositiveOverlap" fullname="PlayersWorlds.Maps.Areas.Evolving.SideToSideForceProducerTest.MapAreaSystemTest_DistancePositiveOverlap" methodname="MapAreaSystemTest_DistancePositiveOverlap" classname="PlayersWorlds.Maps.Areas.Evolving.SideToSideForceProducerTest" runstate="Runnable" seed="767205337" result="Passed" start-time="2024-02-20T15:16:39.8903280Z" end-time="2024-02-20T15:16:39.8904190Z" duration="0.000092" asserts="3" />
              </test-suite>
            </test-suite>
            <test-suite type="TestFixture" id="1-1916" name="MapAreaTest" fullname="PlayersWorlds.Maps.Areas.MapAreaTest" classname="PlayersWorlds.Maps.Areas.MapAreaTest" runstate="Runnable" testcasecount="5" result="Passed" start-time="2024-02-20T15:16:39.8904480Z" end-time="2024-02-20T15:16:39.8941330Z" duration="0.003685" total="5" passed="5" failed="0" warnings="0" inconclusive="0" skipped="0" asserts="27">
              <test-case id="1-1919" name="Overlaps_ReturnsFalseIfDoesNotOverlap" fullname="PlayersWorlds.Maps.Areas.MapAreaTest.Overlaps_ReturnsFalseIfDoesNotOverlap" methodname="Overlaps_ReturnsFalseIfDoesNotOverlap" classname="PlayersWorlds.Maps.Areas.MapAreaTest" runstate="Runnable" seed="5247677" result="Passed" start-time="2024-02-20T15:16:39.8904930Z" end-time="2024-02-20T15:16:39.8909870Z" duration="0.000493" asserts="15" />
              <test-case id="1-1918" name="Overlaps_ReturnsTrueIfOverlaps" fullname="PlayersWorlds.Maps.Areas.MapAreaTest.Overlaps_ReturnsTrueIfOverlaps" methodname="Overlaps_ReturnsTrueIfOverlaps" classname="PlayersWorlds.Maps.Areas.MapAreaTest" runstate="Runnable" seed="1648409748" result="Passed" start-time="2024-02-20T15:16:39.8909940Z" end-time="2024-02-20T15:16:39.8911550Z" duration="0.000161" asserts="7" />
              <test-case id="1-1917" name="Overlaps_ThrowsIfSame" fullname="PlayersWorlds.Maps.Areas.MapAreaTest.Overlaps_ThrowsIfSame" methodname="Overlaps_ThrowsIfSame" classname="PlayersWorlds.Maps.Areas.MapAreaTest" runstate="Runnable" seed="125794750" result="Passed" start-time="2024-02-20T15:16:39.8911610Z" end-time="2024-02-20T15:16:39.8918940Z" duration="0.000733" asserts="2" />
              <test-case id="1-1920" name="Position_ThrowsIfNotInitialized" fullname="PlayersWorlds.Maps.Areas.MapAreaTest.Position_ThrowsIfNotInitialized" methodname="Position_ThrowsIfNotInitialized" classname="PlayersWorlds.Maps.Areas.MapAreaTest" runstate="Runnable" seed="1940619031" result="Passed" start-time="2024-02-20T15:16:39.8919020Z" end-time="2024-02-20T15:16:39.8937000Z" duration="0.001798" asserts="2" />
              <test-case id="1-1921" name="ThrowsIfWrongParameters" fullname="PlayersWorlds.Maps.Areas.MapAreaTest.ThrowsIfWrongParameters" methodname="ThrowsIfWrongParameters" classname="PlayersWorlds.Maps.Areas.MapAreaTest" runstate="Runnable" seed="1330914820" result="Passed" start-time="2024-02-20T15:16:39.8937080Z" end-time="2024-02-20T15:16:39.8941220Z" duration="0.000414" asserts="1" />
            </test-suite>
          </test-suite>
          <test-suite type="TestFixture" id="1-1004" name="AssemblyInfoTest" fullname="PlayersWorlds.Maps.AssemblyInfoTest" classname="PlayersWorlds.Maps.AssemblyInfoTest" runstate="Runnable" testcasecount="2" result="Passed" start-time="2024-02-20T15:16:39.8941500Z" end-time="2024-02-20T15:16:39.8949460Z" duration="0.000797" total="2" passed="2" failed="0" warnings="0" inconclusive="0" skipped="0" asserts="4">
            <test-case id="1-1006" name="TestAssemblyCompany" fullname="PlayersWorlds.Maps.AssemblyInfoTest.TestAssemblyCompany" methodname="TestAssemblyCompany" classname="PlayersWorlds.Maps.AssemblyInfoTest" runstate="Runnable" seed="1492763777" result="Passed" start-time="2024-02-20T15:16:39.8941960Z" end-time="2024-02-20T15:16:39.8946870Z" duration="0.000491" asserts="2" />
            <test-case id="1-1005" name="TestAssemblyTitle" fullname="PlayersWorlds.Maps.AssemblyInfoTest.TestAssemblyTitle" methodname="TestAssemblyTitle" classname="PlayersWorlds.Maps.AssemblyInfoTest" runstate="Runnable" seed="1539476801" result="Passed" start-time="2024-02-20T15:16:39.8946950Z" end-time="2024-02-20T15:16:39.8949360Z" duration="0.000240" asserts="2" />
          </test-suite>
          <test-suite type="TestFixture" id="1-1007" name="CellTest" fullname="PlayersWorlds.Maps.CellTest" classname="PlayersWorlds.Maps.CellTest" runstate="Runnable" testcasecount="1" result="Passed" start-time="2024-02-20T15:16:39.8949570Z" end-time="2024-02-20T15:16:39.8953750Z" duration="0.000418" total="1" passed="1" failed="0" warnings="0" inconclusive="0" skipped="0" asserts="3">
            <test-case id="1-1008" name="CellTagEqualityTest" fullname="PlayersWorlds.Maps.CellTest.CellTagEqualityTest" methodname="CellTagEqualityTest" classname="PlayersWorlds.Maps.CellTest" runstate="Runnable" seed="1964311469" result="Passed" start-time="2024-02-20T15:16:39.8950010Z" end-time="2024-02-20T15:16:39.8953640Z" duration="0.000364" asserts="3" />
          </test-suite>
          <test-suite type="TestFixture" id="1-1009" name="ExtensionsTest" fullname="PlayersWorlds.Maps.ExtensionsTest" classname="PlayersWorlds.Maps.ExtensionsTest" runstate="Runnable" testcasecount="7" result="Passed" start-time="2024-02-20T15:16:39.8953860Z" end-time="2024-02-20T15:16:39.9032160Z" duration="0.007830" total="7" passed="7" failed="0" warnings="0" inconclusive="0" skipped="0" asserts="13">
            <test-case id="1-1012" name="DebugString" fullname="PlayersWorlds.Maps.ExtensionsTest.DebugString" methodname="DebugString" classname="PlayersWorlds.Maps.ExtensionsTest" runstate="Runnable" seed="1685513911" result="Passed" start-time="2024-02-20T15:16:39.8954300Z" end-time="2024-02-20T15:16:39.8972730Z" duration="0.001843" asserts="2" />
            <test-case id="1-1015" name="GetAllDictionaryItems" fullname="PlayersWorlds.Maps.ExtensionsTest.GetAllDictionaryItems" methodname="GetAllDictionaryItems" classname="PlayersWorlds.Maps.ExtensionsTest" runstate="Runnable" seed="1389565777" result="Passed" start-time="2024-02-20T15:16:39.8972810Z" end-time="2024-02-20T15:16:39.8991200Z" duration="0.001839" asserts="1" />
            <test-case id="1-1016" name="GetAllHashSetKeys" fullname="PlayersWorlds.Maps.ExtensionsTest.GetAllHashSetKeys" methodname="GetAllHashSetKeys" classname="PlayersWorlds.Maps.ExtensionsTest" runstate="Runnable" seed="425812193" result="Passed" start-time="2024-02-20T15:16:39.8991290Z" end-time="2024-02-20T15:16:39.9000040Z" duration="0.000875" asserts="1" />
            <test-case id="1-1013" name="Set" fullname="PlayersWorlds.Maps.ExtensionsTest.Set" methodname="Set" classname="PlayersWorlds.Maps.ExtensionsTest" runstate="Runnable" seed="1393560814" result="Passed" start-time="2024-02-20T15:16:39.9000120Z" end-time="2024-02-20T15:16:39.9008770Z" duration="0.000865" asserts="3" />
            <test-case id="1-1014" name="SetList" fullname="PlayersWorlds.Maps.ExtensionsTest.SetList" methodname="SetList" classname="PlayersWorlds.Maps.ExtensionsTest" runstate="Runnable" seed="1723660619" result="Passed" start-time="2024-02-20T15:16:39.9008850Z" end-time="2024-02-20T15:16:39.9026870Z" duration="0.001803" asserts="3" />
            <test-case id="1-1011" name="TryDequeue_Dequeues" fullname="PlayersWorlds.Maps.ExtensionsTest.TryDequeue_Dequeues" methodname="TryDequeue_Dequeues" classname="PlayersWorlds.Maps.ExtensionsTest" runstate="Runnable" seed="118378527" result="Passed" start-time="2024-02-20T15:16:39.9026960Z" end-time="2024-02-20T15:16:39.9030870Z" duration="0.000391" asserts="2" />
            <test-case id="1-1010" name="TryDequeue_DoesNotThrow" fullname="PlayersWorlds.Maps.ExtensionsTest.TryDequeue_DoesNotThrow" methodname="TryDequeue_DoesNotThrow" classname="PlayersWorlds.Maps.ExtensionsTest" runstate="Runnable" seed="1076424696" result="Passed" start-time="2024-02-20T15:16:39.9030940Z" end-time="2024-02-20T15:16:39.9032050Z" duration="0.000111" asserts="1" />
          </test-suite>
          <test-suite type="TestFixture" id="1-1017" name="GlobalRandomTest" fullname="PlayersWorlds.Maps.GlobalRandomTest" classname="PlayersWorlds.Maps.GlobalRandomTest" runstate="Runnable" testcasecount="3" result="Passed" start-time="2024-02-20T15:16:39.9032280Z" end-time="2024-02-20T15:16:39.9061390Z" duration="0.002912" total="3" passed="3" failed="0" warnings="0" inconclusive="0" skipped="0" asserts="1002">
            <test-case id="1-1018" name="RandomCollectionItem" fullname="PlayersWorlds.Maps.GlobalRandomTest.RandomCollectionItem" methodname="RandomCollectionItem" classname="PlayersWorlds.Maps.GlobalRandomTest" runstate="Runnable" seed="1278300465" result="Passed" start-time="2024-02-20T15:16:39.9032860Z" end-time="2024-02-20T15:16:39.9039520Z" duration="0.000666" asserts="1" />
            <test-case id="1-1020" name="RandomInRange" fullname="PlayersWorlds.Maps.GlobalRandomTest.RandomInRange" methodname="RandomInRange" classname="PlayersWorlds.Maps.GlobalRandomTest" runstate="Runnable" seed="2068486907" result="Passed" start-time="2024-02-20T15:16:39.9039590Z" end-time="2024-02-20T15:16:39.9059520Z" duration="0.001993" asserts="1000" />
            <test-case id="1-1019" name="ThrowsIfEmptyCollection" fullname="PlayersWorlds.Maps.GlobalRandomTest.ThrowsIfEmptyCollection" methodname="ThrowsIfEmptyCollection" classname="PlayersWorlds.Maps.GlobalRandomTest" runstate="Runnable" seed="7935619" result="Passed" start-time="2024-02-20T15:16:39.9059600Z" end-time="2024-02-20T15:16:39.9061290Z" duration="0.000169" asserts="1" />
          </test-suite>
          <test-suite type="TestFixture" id="1-1021" name="Map2DTest" fullname="PlayersWorlds.Maps.Map2DTest" classname="PlayersWorlds.Maps.Map2DTest" runstate="Runnable" testcasecount="1" result="Passed" start-time="2024-02-20T15:16:39.9061490Z" end-time="2024-02-20T15:16:39.9087550Z" duration="0.002606" total="1" passed="1" failed="0" warnings="0" inconclusive="0" skipped="0" asserts="6">
            <test-case id="1-1022" name="ParseMap" fullname="PlayersWorlds.Maps.Map2DTest.ParseMap" methodname="ParseMap" classname="PlayersWorlds.Maps.Map2DTest" runstate="Runnable" seed="1599753251" result="Passed" start-time="2024-02-20T15:16:39.9069680Z" end-time="2024-02-20T15:16:39.9087440Z" duration="0.001776" asserts="6" />
          </test-suite>
          <test-suite type="TestSuite" id="1-2047" name="MapFilters" fullname="PlayersWorlds.Maps.MapFilters" runstate="Runnable" testcasecount="5" result="Passed" start-time="2024-02-20T15:16:39.7205380Z" end-time="2024-02-20T15:16:39.9136810Z" duration="0.193144" total="5" passed="5" failed="0" warnings="0" inconclusive="0" skipped="0" asserts="10">
            <test-suite type="TestFixture" id="1-1910" name="Map2DEraseSpotsTest" fullname="PlayersWorlds.Maps.MapFilters.Map2DEraseSpotsTest" classname="PlayersWorlds.Maps.MapFilters.Map2DEraseSpotsTest" runstate="Runnable" testcasecount="5" result="Passed" start-time="2024-02-20T15:16:39.9087660Z" end-time="2024-02-20T15:16:39.9136760Z" duration="0.004910" total="5" passed="5" failed="0" warnings="0" inconclusive="0" skipped="0" asserts="10">
              <test-case id="1-1911" name="BackslashEraseSpots" fullname="PlayersWorlds.Maps.MapFilters.Map2DEraseSpotsTest.BackslashEraseSpots" methodname="BackslashEraseSpots" classname="PlayersWorlds.Maps.MapFilters.Map2DEraseSpotsTest" runstate="Runnable" seed="1243203640" result="Passed" start-time="2024-02-20T15:16:39.9088070Z" end-time="2024-02-20T15:16:39.9123150Z" duration="0.003508" asserts="1">
                <output><![CDATA[▓▓░░░
░▓▓░░
░░▓▓░
░░░▓▓
░░░░▓

▓▓░░░
░▓▓░░
░░▓▓░
░░░▓▓
░░░░▓

▓▓░░░
░▓▓░░
░░▓▓░
░░░▓▓
░░░░▓

]]></output>
              </test-case>
              <test-case id="1-1915" name="SmoothBoxEraseSpots" fullname="PlayersWorlds.Maps.MapFilters.Map2DEraseSpotsTest.SmoothBoxEraseSpots" methodname="SmoothBoxEraseSpots" classname="PlayersWorlds.Maps.MapFilters.Map2DEraseSpotsTest" runstate="Runnable" seed="1952722909" result="Passed" start-time="2024-02-20T15:16:39.9123240Z" end-time="2024-02-20T15:16:39.9126770Z" duration="0.000354" asserts="1">
                <output><![CDATA[▒▓▓▓▒
▓▓░▓▓
▓░░░▓
▓▓░░▓
▒▓▓▓▓

▒▓▓▓▒
▓▓▓▓▓
▓▓▓▓▓
▓▓▓▓▓
▒▓▓▓▓

▒▓▓▓▒
▓▓▓▓▓
▓▓▓▓▓
▓▓▓▓▓
▒▓▓▓▓

]]></output>
              </test-case>
              <test-case id="1-1914" name="SmoothBoxVoidBgEraseSpots" fullname="PlayersWorlds.Maps.MapFilters.Map2DEraseSpotsTest.SmoothBoxVoidBgEraseSpots" methodname="SmoothBoxVoidBgEraseSpots" classname="PlayersWorlds.Maps.MapFilters.Map2DEraseSpotsTest" runstate="Runnable" seed="1129179786" result="Passed" start-time="2024-02-20T15:16:39.9126850Z" end-time="2024-02-20T15:16:39.9131140Z" duration="0.000429" asserts="1">
                <output><![CDATA[▒▓▓▓▒
▓▓0▓▓
▓000▓
▓▓00▓
▒▓▓▓▓

▒▓▓▓▒
▓▓▓▓▓
▓▓▓▓▓
▓▓▓▓▓
▒▓▓▓▓

▒▓▓▓▒
▓▓▓▓▓
▓▓▓▓▓
▓▓▓▓▓
▒▓▓▓▓

]]></output>
              </test-case>
              <test-case id="1-1913" name="Spot1x3SpotsEraseSpots" fullname="PlayersWorlds.Maps.MapFilters.Map2DEraseSpotsTest.Spot1x3SpotsEraseSpots" methodname="Spot1x3SpotsEraseSpots" classname="PlayersWorlds.Maps.MapFilters.Map2DEraseSpotsTest" runstate="Runnable" seed="828508670" result="Passed" start-time="2024-02-20T15:16:39.9131210Z" end-time="2024-02-20T15:16:39.9132650Z" duration="0.000144" asserts="1">
                <output><![CDATA[░░░░░
░░▓░░
░░▓░░
░░▓░░
░░░░░

░░░░░
░░▓░░
░░▓░░
░░▓░░
░░░░░

░░░░░
░░▓░░
░░▓░░
░░▓░░
░░░░░

]]></output>
              </test-case>
              <test-case id="1-1912" name="VariousSpotsEraseSpots" fullname="PlayersWorlds.Maps.MapFilters.Map2DEraseSpotsTest.VariousSpotsEraseSpots" methodname="VariousSpotsEraseSpots" classname="PlayersWorlds.Maps.MapFilters.Map2DEraseSpotsTest" runstate="Runnable" seed="200748281" result="Passed" start-time="2024-02-20T15:16:39.9132710Z" end-time="2024-02-20T15:16:39.9136660Z" duration="0.000395" asserts="6">
                <output><![CDATA[░░░░░
░░░▓░
░░▓▓░
░░░░░
░░░░░

░░░░░
░░░░░
░░░░░
░░░░░
░░░░░

░░░░░
░░░░░
░░░░░
░░░░░
░░░░░

░░░░░
░░▓░░
░░▓▓░
░░░░░
░░░░░

░░░░░
░░░░░
░░░░░
░░░░░
░░░░░

░░░░░
░░░░░
░░░░░
░░░░░
░░░░░

░░░░░
░░▓▓░
░░▓░░
░░░░░
░░░░░

░░░░░
░░░░░
░░░░░
░░░░░
░░░░░

░░░░░
░░░░░
░░░░░
░░░░░
░░░░░

░░░░░
░░▓▓░
░░▓░░
░░░░░
░░░░░

░░░░░
░░░░░
░░░░░
░░░░░
░░░░░

░░░░░
░░░░░
░░░░░
░░░░░
░░░░░

░░░░░
░░▓▓░
░░▓▓░
░░░░░
░░░░░

░░░░░
░░░░░
░░░░░
░░░░░
░░░░░

░░░░░
░░░░░
░░░░░
░░░░░
░░░░░

░░░░░
░░▓░░
░░░▓░
░░░░░
░░░░░

░░░░░
░░░░░
░░░░░
░░░░░
░░░░░

░░░░░
░░░░░
░░░░░
░░░░░
░░░░░

]]></output>
              </test-case>
            </test-suite>
          </test-suite>
          <test-suite type="TestSuite" id="1-2045" name="Maze" fullname="PlayersWorlds.Maps.Maze" runstate="Runnable" testcasecount="780" result="Skipped" label="Ignored" site="Child" start-time="2024-02-20T15:16:39.7205430Z" end-time="2024-02-20T15:16:53.0113780Z" duration="13.290835" total="276" passed="174" failed="0" warnings="0" inconclusive="0" skipped="102" asserts="12312">
            <reason>
              <message><![CDATA[One or more child tests were ignored]]></message>
            </reason>
            <test-suite type="TestFixture" id="1-1109" name="Maze2DBuilderTest" fullname="PlayersWorlds.Maps.Maze.Maze2DBuilderTest" classname="PlayersWorlds.Maps.Maze.Maze2DBuilderTest" runstate="Runnable" testcasecount="21" result="Passed" start-time="2024-02-20T15:16:39.9136910Z" end-time="2024-02-20T15:16:40.0465610Z" duration="0.132870" total="21" passed="21" failed="0" warnings="0" inconclusive="0" skipped="0" asserts="7095">
              <test-case id="1-1110" name="BuildsCorrectCellsCollections" fullname="PlayersWorlds.Maps.Maze.Maze2DBuilderTest.BuildsCorrectCellsCollections" methodname="BuildsCorrectCellsCollections" classname="PlayersWorlds.Maps.Maze.Maze2DBuilderTest" runstate="Runnable" seed="957267285" result="Passed" start-time="2024-02-20T15:16:39.9137330Z" end-time="2024-02-20T15:16:39.9199280Z" duration="0.006196" asserts="2" />
              <test-case id="1-1111" name="BuildsCorrectCellsCollectionsWithHallAreas" fullname="PlayersWorlds.Maps.Maze.Maze2DBuilderTest.BuildsCorrectCellsCollectionsWithHallAreas" methodname="BuildsCorrectCellsCollectionsWithHallAreas" classname="PlayersWorlds.Maps.Maze.Maze2DBuilderTest" runstate="Runnable" seed="2127796273" result="Passed" start-time="2024-02-20T15:16:39.9199390Z" end-time="2024-02-20T15:16:39.9263650Z" duration="0.006426" asserts="4" />
              <test-case id="1-1112" name="BuildsCorrectCellsCollectionsWithHallAreasAtTheEdge" fullname="PlayersWorlds.Maps.Maze.Maze2DBuilderTest.BuildsCorrectCellsCollectionsWithHallAreasAtTheEdge" methodname="BuildsCorrectCellsCollectionsWithHallAreasAtTheEdge" classname="PlayersWorlds.Maps.Maze.Maze2DBuilderTest" runstate="Runnable" seed="1596786857" result="Passed" start-time="2024-02-20T15:16:39.9263760Z" end-time="2024-02-20T15:16:39.9268700Z" duration="0.000494" asserts="4" />
              <test-case id="1-1130" name="CanConnect" fullname="PlayersWorlds.Maps.Maze.Maze2DBuilderTest.CanConnect" methodname="CanConnect" classname="PlayersWorlds.Maps.Maze.Maze2DBuilderTest" runstate="Runnable" seed="2076524777" result="Passed" start-time="2024-02-20T15:16:39.9268780Z" end-time="2024-02-20T15:16:39.9279790Z" duration="0.001101" asserts="11" />
              <test-case id="1-1128" name="ConnectHalls" fullname="PlayersWorlds.Maps.Maze.Maze2DBuilderTest.ConnectHalls" methodname="ConnectHalls" classname="PlayersWorlds.Maps.Maze.Maze2DBuilderTest" runstate="Runnable" seed="1350916239" result="Passed" start-time="2024-02-20T15:16:39.9279900Z" end-time="2024-02-20T15:16:39.9338030Z" duration="0.005813" asserts="4" />
              <test-case id="1-1118" name="IsFillComplete_Full" fullname="PlayersWorlds.Maps.Maze.Maze2DBuilderTest.IsFillComplete_Full" methodname="IsFillComplete_Full" classname="PlayersWorlds.Maps.Maze.Maze2DBuilderTest" runstate="Runnable" seed="1175431466" result="Passed" start-time="2024-02-20T15:16:39.9338160Z" end-time="2024-02-20T15:16:39.9343270Z" duration="0.000511" asserts="4" />
              <test-case id="1-1121" name="IsFillComplete_Full_WithCave" fullname="PlayersWorlds.Maps.Maze.Maze2DBuilderTest.IsFillComplete_Full_WithCave" methodname="IsFillComplete_Full_WithCave" classname="PlayersWorlds.Maps.Maze.Maze2DBuilderTest" runstate="Runnable" seed="202552920" result="Passed" start-time="2024-02-20T15:16:39.9343350Z" end-time="2024-02-20T15:16:39.9349260Z" duration="0.000591" asserts="3" />
              <test-case id="1-1120" name="IsFillComplete_Full_WithFill" fullname="PlayersWorlds.Maps.Maze.Maze2DBuilderTest.IsFillComplete_Full_WithFill" methodname="IsFillComplete_Full_WithFill" classname="PlayersWorlds.Maps.Maze.Maze2DBuilderTest" runstate="Runnable" seed="1615637348" result="Passed" start-time="2024-02-20T15:16:39.9349360Z" end-time="2024-02-20T15:16:39.9357250Z" duration="0.000789" asserts="2" />
              <test-case id="1-1119" name="IsFillComplete_Full_WithHall" fullname="PlayersWorlds.Maps.Maze.Maze2DBuilderTest.IsFillComplete_Full_WithHall" methodname="IsFillComplete_Full_WithHall" classname="PlayersWorlds.Maps.Maze.Maze2DBuilderTest" runstate="Runnable" seed="942575395" result="Passed" start-time="2024-02-20T15:16:39.9357350Z" end-time="2024-02-20T15:16:39.9362310Z" duration="0.000496" asserts="2" />
              <test-case id="1-1123" name="IsFillComplete_FullHeight" fullname="PlayersWorlds.Maps.Maze.Maze2DBuilderTest.IsFillComplete_FullHeight" methodname="IsFillComplete_FullHeight" classname="PlayersWorlds.Maps.Maze.Maze2DBuilderTest" runstate="Runnable" seed="1982425761" result="Passed" start-time="2024-02-20T15:16:39.9362400Z" end-time="2024-02-20T15:16:39.9367390Z" duration="0.000499" asserts="3" />
              <test-case id="1-1122" name="IsFillComplete_FullWidth" fullname="PlayersWorlds.Maps.Maze.Maze2DBuilderTest.IsFillComplete_FullWidth" methodname="IsFillComplete_FullWidth" classname="PlayersWorlds.Maps.Maze.Maze2DBuilderTest" runstate="Runnable" seed="688007599" result="Passed" start-time="2024-02-20T15:16:39.9367490Z" end-time="2024-02-20T15:16:39.9370010Z" duration="0.000253" asserts="3" />
              <test-case id="1-1125" name="IsFillComplete_Half" fullname="PlayersWorlds.Maps.Maze.Maze2DBuilderTest.IsFillComplete_Half" methodname="IsFillComplete_Half" classname="PlayersWorlds.Maps.Maze.Maze2DBuilderTest" runstate="Runnable" seed="1687054351" result="Passed" start-time="2024-02-20T15:16:39.9370080Z" end-time="2024-02-20T15:16:39.9371480Z" duration="0.000139" asserts="2" />
              <test-case id="1-1127" name="IsFillComplete_NinetyPercent" fullname="PlayersWorlds.Maps.Maze.Maze2DBuilderTest.IsFillComplete_NinetyPercent" methodname="IsFillComplete_NinetyPercent" classname="PlayersWorlds.Maps.Maze.Maze2DBuilderTest" runstate="Runnable" seed="1240102188" result="Passed" start-time="2024-02-20T15:16:39.9371540Z" end-time="2024-02-20T15:16:39.9373570Z" duration="0.000203" asserts="4" />
              <test-case id="1-1117" name="IsFillComplete_NoCells" fullname="PlayersWorlds.Maps.Maze.Maze2DBuilderTest.IsFillComplete_NoCells" methodname="IsFillComplete_NoCells" classname="PlayersWorlds.Maps.Maze.Maze2DBuilderTest" runstate="Runnable" seed="1233567834" result="Passed" start-time="2024-02-20T15:16:39.9373630Z" end-time="2024-02-20T15:16:39.9374970Z" duration="0.000134" asserts="1" />
              <test-case id="1-1124" name="IsFillComplete_Quarter" fullname="PlayersWorlds.Maps.Maze.Maze2DBuilderTest.IsFillComplete_Quarter" methodname="IsFillComplete_Quarter" classname="PlayersWorlds.Maps.Maze.Maze2DBuilderTest" runstate="Runnable" seed="1667852612" result="Passed" start-time="2024-02-20T15:16:39.9375040Z" end-time="2024-02-20T15:16:39.9376320Z" duration="0.000128" asserts="2" />
              <test-case id="1-1126" name="IsFillComplete_ThreeQuarters" fullname="PlayersWorlds.Maps.Maze.Maze2DBuilderTest.IsFillComplete_ThreeQuarters" methodname="IsFillComplete_ThreeQuarters" classname="PlayersWorlds.Maps.Maze.Maze2DBuilderTest" runstate="Runnable" seed="575140596" result="Passed" start-time="2024-02-20T15:16:39.9376390Z" end-time="2024-02-20T15:16:39.9378030Z" duration="0.000164" asserts="3" />
              <test-case id="1-1116" name="IterateUnlinkedCells_IteratesAllAvailableCells" fullname="PlayersWorlds.Maps.Maze.Maze2DBuilderTest.IterateUnlinkedCells_IteratesAllAvailableCells" methodname="IterateUnlinkedCells_IteratesAllAvailableCells" classname="PlayersWorlds.Maps.Maze.Maze2DBuilderTest" runstate="Runnable" seed="303421761" result="Passed" start-time="2024-02-20T15:16:39.9378090Z" end-time="2024-02-20T15:16:39.9441400Z" duration="0.006331" asserts="28" />
              <test-case id="1-1115" name="MarkConnected" fullname="PlayersWorlds.Maps.Maze.Maze2DBuilderTest.MarkConnected" methodname="MarkConnected" classname="PlayersWorlds.Maps.Maze.Maze2DBuilderTest" runstate="Runnable" seed="1277741323" result="Passed" start-time="2024-02-20T15:16:39.9441500Z" end-time="2024-02-20T15:16:39.9446440Z" duration="0.000494" asserts="6" />
              <test-case id="1-1129" name="OverlappingAreas_ProduceValidPriorityCells" fullname="PlayersWorlds.Maps.Maze.Maze2DBuilderTest.OverlappingAreas_ProduceValidPriorityCells" methodname="OverlappingAreas_ProduceValidPriorityCells" classname="PlayersWorlds.Maps.Maze.Maze2DBuilderTest" runstate="Runnable" seed="1200297382" result="Passed" start-time="2024-02-20T15:16:39.9446520Z" end-time="2024-02-20T15:16:39.9455010Z" duration="0.000849" asserts="4" />
              <test-case id="1-1114" name="PickRandomNeighborToLink" fullname="PlayersWorlds.Maps.Maze.Maze2DBuilderTest.PickRandomNeighborToLink" methodname="PickRandomNeighborToLink" classname="PlayersWorlds.Maps.Maze.Maze2DBuilderTest" runstate="Runnable" seed="1711435231" result="Passed" start-time="2024-02-20T15:16:39.9455110Z" end-time="2024-02-20T15:16:39.9513310Z" duration="0.005820" asserts="5000" />
              <test-case id="1-1113" name="PicksPriorityCellsWhenAvailable" fullname="PlayersWorlds.Maps.Maze.Maze2DBuilderTest.PicksPriorityCellsWhenAvailable" methodname="PicksPriorityCellsWhenAvailable" classname="PlayersWorlds.Maps.Maze.Maze2DBuilderTest" runstate="Runnable" seed="928708408" result="Passed" start-time="2024-02-20T15:16:39.9513410Z" end-time="2024-02-20T15:16:40.0465440Z" duration="0.095203" asserts="2003" />
            </test-suite>
            <test-suite type="TestFixture" id="1-1131" name="Maze2DRendererTest" fullname="PlayersWorlds.Maps.Maze.Maze2DRendererTest" classname="PlayersWorlds.Maps.Maze.Maze2DRendererTest" runstate="Runnable" testcasecount="1" result="Passed" start-time="2024-02-20T15:16:40.0467640Z" end-time="2024-02-20T15:16:40.0490550Z" duration="0.002291" total="1" passed="1" failed="0" warnings="0" inconclusive="0" skipped="0" asserts="1">
              <test-case id="1-1132" name="ThrowsIfCantFit" fullname="PlayersWorlds.Maps.Maze.Maze2DRendererTest.ThrowsIfCantFit" methodname="ThrowsIfCantFit" classname="PlayersWorlds.Maps.Maze.Maze2DRendererTest" runstate="Runnable" seed="179981584" result="Passed" start-time="2024-02-20T15:16:40.0468200Z" end-time="2024-02-20T15:16:40.0490410Z" duration="0.002221" asserts="1">
                <output><![CDATA[42x42
]]></output>
              </test-case>
            </test-suite>
            <test-suite type="TestFixture" id="1-1133" name="Maze2DTest" fullname="PlayersWorlds.Maps.Maze.Maze2DTest" classname="PlayersWorlds.Maps.Maze.Maze2DTest" runstate="Runnable" testcasecount="14" result="Passed" start-time="2024-02-20T15:16:40.0490660Z" end-time="2024-02-20T15:16:40.0809460Z" duration="0.031881" total="14" passed="14" failed="0" warnings="0" inconclusive="0" skipped="0" asserts="178">
              <test-case id="1-1141" name="Maze2D_AddsNoRoomsToASmallMaze" fullname="PlayersWorlds.Maps.Maze.Maze2DTest.Maze2D_AddsNoRoomsToASmallMaze" methodname="Maze2D_AddsNoRoomsToASmallMaze" classname="PlayersWorlds.Maps.Maze.Maze2DTest" runstate="Runnable" seed="640417532" result="Passed" start-time="2024-02-20T15:16:40.0491090Z" end-time="2024-02-20T15:16:40.0553620Z" duration="0.006253" asserts="1">
                <output><![CDATA[AldousBroderMazeGenerator: Generating maze 3x3 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Auto, <null>, PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.AldousBroderMazeGenerator)
]]></output>
              </test-case>
              <test-case id="1-1140" name="Maze2D_AddsNoRoomsWhenNoneRequested" fullname="PlayersWorlds.Maps.Maze.Maze2DTest.Maze2D_AddsNoRoomsWhenNoneRequested" methodname="Maze2D_AddsNoRoomsWhenNoneRequested" classname="PlayersWorlds.Maps.Maze.Maze2DTest" runstate="Runnable" seed="823940166" result="Passed" start-time="2024-02-20T15:16:40.0554070Z" end-time="2024-02-20T15:16:40.0565130Z" duration="0.001107" asserts="1">
                <output><![CDATA[AldousBroderMazeGenerator: Generating maze 10x10 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, <null>, PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.AldousBroderMazeGenerator)
]]></output>
              </test-case>
              <test-case id="1-1144" name="Maze2D_AddsOneFill" fullname="PlayersWorlds.Maps.Maze.Maze2DTest.Maze2D_AddsOneFill" methodname="Maze2D_AddsOneFill" classname="PlayersWorlds.Maps.Maze.Maze2DTest" runstate="Runnable" seed="429477540" result="Passed" start-time="2024-02-20T15:16:40.0565240Z" end-time="2024-02-20T15:16:40.0581500Z" duration="0.001627" asserts="1">
                <output><![CDATA[AldousBroderMazeGenerator: Generating maze 5x5 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x2;S2x1;Fill;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.AldousBroderMazeGenerator)
]]></output>
              </test-case>
              <test-case id="1-1143" name="Maze2D_AddsOneHall" fullname="PlayersWorlds.Maps.Maze.Maze2DTest.Maze2D_AddsOneHall" methodname="Maze2D_AddsOneHall" classname="PlayersWorlds.Maps.Maze.Maze2DTest" runstate="Runnable" seed="692842327" result="Passed" start-time="2024-02-20T15:16:40.0581610Z" end-time="2024-02-20T15:16:40.0588500Z" duration="0.000689" asserts="1">
                <output><![CDATA[AldousBroderMazeGenerator: Generating maze 5x5 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x2;S2x1;Hall;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.AldousBroderMazeGenerator)
]]></output>
              </test-case>
              <test-case id="1-1142" name="Maze2D_AddsRooms" fullname="PlayersWorlds.Maps.Maze.Maze2DTest.Maze2D_AddsRooms" methodname="Maze2D_AddsRooms" classname="PlayersWorlds.Maps.Maze.Maze2DTest" runstate="Runnable" seed="402646807" result="Passed" start-time="2024-02-20T15:16:40.0588610Z" end-time="2024-02-20T15:16:40.0672720Z" duration="0.008411" asserts="1">
                <output><![CDATA[AldousBroderMazeGenerator: Generating maze 5x5 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Auto, <null>, PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.AldousBroderMazeGenerator)
]]></output>
              </test-case>
              <test-case id="1-1136" name="Maze2D_AllowsOnly2D" fullname="PlayersWorlds.Maps.Maze.Maze2DTest.Maze2D_AllowsOnly2D" methodname="Maze2D_AllowsOnly2D" classname="PlayersWorlds.Maps.Maze.Maze2DTest" runstate="Runnable" seed="1398458445" result="Passed" start-time="2024-02-20T15:16:40.0672820Z" end-time="2024-02-20T15:16:40.0675290Z" duration="0.000247" asserts="1" />
              <test-case id="1-1146" name="Maze2D_CanParse" fullname="PlayersWorlds.Maps.Maze.Maze2DTest.Maze2D_CanParse" methodname="Maze2D_CanParse" classname="PlayersWorlds.Maps.Maze.Maze2DTest" runstate="Runnable" seed="923307403" result="Passed" start-time="2024-02-20T15:16:40.0675370Z" end-time="2024-02-20T15:16:40.0720550Z" duration="0.004519" asserts="16">
                <output><![CDATA[┌───────────┐
│           │
├───╴   ┌───┤
│       │   │
│   ╷   ╵   │
│   │       │
└───┴───────┘

]]></output>
              </test-case>
              <test-case id="1-1147" name="Maze2D_CanParse2" fullname="PlayersWorlds.Maps.Maze.Maze2DTest.Maze2D_CanParse2" methodname="Maze2D_CanParse2" classname="PlayersWorlds.Maps.Maze.Maze2DTest" runstate="Runnable" seed="1392666239" result="Passed" start-time="2024-02-20T15:16:40.0720660Z" end-time="2024-02-20T15:16:40.0721970Z" duration="0.000131" asserts="1" />
              <test-case id="1-1139" name="Maze2D_CanRenderMap" fullname="PlayersWorlds.Maps.Maze.Maze2DTest.Maze2D_CanRenderMap" methodname="Maze2D_CanRenderMap" classname="PlayersWorlds.Maps.Maze.Maze2DTest" runstate="Runnable" seed="1742558898" result="Passed" start-time="2024-02-20T15:16:40.0722040Z" end-time="2024-02-20T15:16:40.0764550Z" duration="0.004251" asserts="1">
                <output><![CDATA[AldousBroderMazeGenerator: Generating maze 3x3 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, None, <null>, PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.AldousBroderMazeGenerator)
]]></output>
              </test-case>
              <test-case id="1-1138" name="Maze2D_CellsNeighborsAreValid" fullname="PlayersWorlds.Maps.Maze.Maze2DTest.Maze2D_CellsNeighborsAreValid" methodname="Maze2D_CellsNeighborsAreValid" classname="PlayersWorlds.Maps.Maze.Maze2DTest" runstate="Runnable" seed="933904697" result="Passed" start-time="2024-02-20T15:16:40.0764650Z" end-time="2024-02-20T15:16:40.0774880Z" duration="0.001023" asserts="136" />
              <test-case id="1-1145" name="Maze2D_HasAttributesSet" fullname="PlayersWorlds.Maps.Maze.Maze2DTest.Maze2D_HasAttributesSet" methodname="Maze2D_HasAttributesSet" classname="PlayersWorlds.Maps.Maze.Maze2DTest" runstate="Runnable" seed="1882430142" result="Passed" start-time="2024-02-20T15:16:40.0775010Z" end-time="2024-02-20T15:16:40.0779690Z" duration="0.000468" asserts="2">
                <output><![CDATA[AldousBroderMazeGenerator: Generating maze 3x3 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, None, <null>, PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.AldousBroderMazeGenerator)
]]></output>
              </test-case>
              <test-case id="1-1134" name="Maze2D_IsInitialized" fullname="PlayersWorlds.Maps.Maze.Maze2DTest.Maze2D_IsInitialized" methodname="Maze2D_IsInitialized" classname="PlayersWorlds.Maps.Maze.Maze2DTest" runstate="Runnable" seed="19083088" result="Passed" start-time="2024-02-20T15:16:40.0779770Z" end-time="2024-02-20T15:16:40.0781700Z" duration="0.000194" asserts="4" />
              <test-case id="1-1137" name="Maze2D_ToMapWrongOptions" fullname="PlayersWorlds.Maps.Maze.Maze2DTest.Maze2D_ToMapWrongOptions" methodname="Maze2D_ToMapWrongOptions" classname="PlayersWorlds.Maps.Maze.Maze2DTest" runstate="Runnable" seed="151145280" result="Passed" start-time="2024-02-20T15:16:40.0781780Z" end-time="2024-02-20T15:16:40.0805180Z" duration="0.002341" asserts="7" />
              <test-case id="1-1135" name="Maze2D_WrongSize" fullname="PlayersWorlds.Maps.Maze.Maze2DTest.Maze2D_WrongSize" methodname="Maze2D_WrongSize" classname="PlayersWorlds.Maps.Maze.Maze2DTest" runstate="Runnable" seed="1367608412" result="Passed" start-time="2024-02-20T15:16:40.0805360Z" end-time="2024-02-20T15:16:40.0809260Z" duration="0.000391" asserts="5" />
            </test-suite>
            <test-suite type="TestFixture" id="1-1148" name="MazeCellTest" fullname="PlayersWorlds.Maps.Maze.MazeCellTest" classname="PlayersWorlds.Maps.Maze.MazeCellTest" runstate="Runnable" testcasecount="5" result="Passed" start-time="2024-02-20T15:16:40.0809790Z" end-time="2024-02-20T15:16:40.0855080Z" duration="0.004529" total="5" passed="5" failed="0" warnings="0" inconclusive="0" skipped="0" asserts="23">
              <test-case id="1-1151" name="CanAssignMapAreaOnce" fullname="PlayersWorlds.Maps.Maze.MazeCellTest.CanAssignMapAreaOnce" methodname="CanAssignMapAreaOnce" classname="PlayersWorlds.Maps.Maze.MazeCellTest" runstate="Runnable" seed="1864660626" result="Passed" start-time="2024-02-20T15:16:40.0811480Z" end-time="2024-02-20T15:16:40.0828380Z" duration="0.001690" asserts="4" />
              <test-case id="1-1153" name="DoubleLinkingThrowsError" fullname="PlayersWorlds.Maps.Maze.MazeCellTest.DoubleLinkingThrowsError" methodname="DoubleLinkingThrowsError" classname="PlayersWorlds.Maps.Maze.MazeCellTest" runstate="Runnable" seed="1527185188" result="Passed" start-time="2024-02-20T15:16:40.0828490Z" end-time="2024-02-20T15:16:40.0830290Z" duration="0.000180" asserts="1" />
              <test-case id="1-1149" name="LinksAreMutual" fullname="PlayersWorlds.Maps.Maze.MazeCellTest.LinksAreMutual" methodname="LinksAreMutual" classname="PlayersWorlds.Maps.Maze.MazeCellTest" runstate="Runnable" seed="2073281396" result="Passed" start-time="2024-02-20T15:16:40.0830370Z" end-time="2024-02-20T15:16:40.0846140Z" duration="0.001577" asserts="10" />
              <test-case id="1-1150" name="LinksOnlyWithNeighbors" fullname="PlayersWorlds.Maps.Maze.MazeCellTest.LinksOnlyWithNeighbors" methodname="LinksOnlyWithNeighbors" classname="PlayersWorlds.Maps.Maze.MazeCellTest" runstate="Runnable" seed="1582166882" result="Passed" start-time="2024-02-20T15:16:40.0846240Z" end-time="2024-02-20T15:16:40.0850590Z" duration="0.000434" asserts="1" />
              <test-case id="1-1152" name="ToStringTest" fullname="PlayersWorlds.Maps.Maze.MazeCellTest.ToStringTest" methodname="ToStringTest" classname="PlayersWorlds.Maps.Maze.MazeCellTest" runstate="Runnable" seed="925694506" result="Passed" start-time="2024-02-20T15:16:40.0850680Z" end-time="2024-02-20T15:16:40.0854940Z" duration="0.000426" asserts="7" />
            </test-suite>
            <test-suite type="TestFixture" id="1-1154" name="MazeGeneratorAreasTest" fullname="PlayersWorlds.Maps.Maze.MazeGeneratorAreasTest" classname="PlayersWorlds.Maps.Maze.MazeGeneratorAreasTest" runstate="Runnable" testcasecount="199" result="Skipped" label="Ignored" site="Child" start-time="2024-02-20T15:16:40.0855320Z" end-time="2024-02-20T15:16:52.8618650Z" duration="12.776333" total="199" passed="97" failed="0" warnings="0" inconclusive="0" skipped="102" asserts="4801">
              <reason>
                <message><![CDATA[One or more child tests were ignored]]></message>
              </reason>
              <test-suite type="ParameterizedMethod" id="1-1175" name="CaveAreasAreAppliedProperly" fullname="PlayersWorlds.Maps.Maze.MazeGeneratorAreasTest.CaveAreasAreAppliedProperly" classname="PlayersWorlds.Maps.Maze.MazeGeneratorAreasTest" runstate="Runnable" testcasecount="6" result="Passed" start-time="2024-02-20T15:16:40.0855910Z" end-time="2024-02-20T15:16:40.3319590Z" duration="0.246368" total="6" passed="6" failed="0" warnings="0" inconclusive="0" skipped="0" asserts="540">
                <properties>
                  <property name="Repeat" value="10" />
                </properties>
                <test-case id="1-1169" name="CaveAreasAreAppliedProperly(PlayersWorlds.Maps.Maze.AldousBroderMazeGenerator)" fullname="PlayersWorlds.Maps.Maze.MazeGeneratorAreasTest.CaveAreasAreAppliedProperly(PlayersWorlds.Maps.Maze.AldousBroderMazeGenerator)" methodname="CaveAreasAreAppliedProperly" classname="PlayersWorlds.Maps.Maze.MazeGeneratorAreasTest" runstate="Runnable" seed="424964079" result="Passed" start-time="2024-02-20T15:16:40.0856120Z" end-time="2024-02-20T15:16:40.1509250Z" duration="0.065314" asserts="90">
                  <output><![CDATA[AldousBroderMazeGenerator: Generating maze 15x15 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P5x10;S7x3;Cave;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.AldousBroderMazeGenerator)
AldousBroderMazeGenerator: Generating maze 15x15 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P5x10;S7x3;Cave;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.AldousBroderMazeGenerator)
AldousBroderMazeGenerator: Generating maze 15x15 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P5x10;S7x3;Cave;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.AldousBroderMazeGenerator)
AldousBroderMazeGenerator: Generating maze 15x15 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P5x10;S7x3;Cave;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.AldousBroderMazeGenerator)
AldousBroderMazeGenerator: Generating maze 15x15 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P5x10;S7x3;Cave;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.AldousBroderMazeGenerator)
AldousBroderMazeGenerator: Generating maze 15x15 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P5x10;S7x3;Cave;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.AldousBroderMazeGenerator)
AldousBroderMazeGenerator: Generating maze 15x15 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P5x10;S7x3;Cave;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.AldousBroderMazeGenerator)
AldousBroderMazeGenerator: Generating maze 15x15 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P5x10;S7x3;Cave;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.AldousBroderMazeGenerator)
AldousBroderMazeGenerator: Generating maze 15x15 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P5x10;S7x3;Cave;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.AldousBroderMazeGenerator)
AldousBroderMazeGenerator: Generating maze 15x15 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P5x10;S7x3;Cave;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.AldousBroderMazeGenerator)
]]></output>
                </test-case>
                <test-case id="1-1170" name="CaveAreasAreAppliedProperly(PlayersWorlds.Maps.Maze.BinaryTreeMazeGenerator)" fullname="PlayersWorlds.Maps.Maze.MazeGeneratorAreasTest.CaveAreasAreAppliedProperly(PlayersWorlds.Maps.Maze.BinaryTreeMazeGenerator)" methodname="CaveAreasAreAppliedProperly" classname="PlayersWorlds.Maps.Maze.MazeGeneratorAreasTest" runstate="Runnable" seed="1842967533" result="Passed" start-time="2024-02-20T15:16:40.1509440Z" end-time="2024-02-20T15:16:40.1942760Z" duration="0.043332" asserts="90">
                  <output><![CDATA[BinaryTreeMazeGenerator: Generating maze 15x15 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P5x10;S7x3;Cave;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.BinaryTreeMazeGenerator)
BinaryTreeMazeGenerator: Generating maze 15x15 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P5x10;S7x3;Cave;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.BinaryTreeMazeGenerator)
BinaryTreeMazeGenerator: Generating maze 15x15 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P5x10;S7x3;Cave;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.BinaryTreeMazeGenerator)
BinaryTreeMazeGenerator: Generating maze 15x15 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P5x10;S7x3;Cave;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.BinaryTreeMazeGenerator)
BinaryTreeMazeGenerator: Generating maze 15x15 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P5x10;S7x3;Cave;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.BinaryTreeMazeGenerator)
BinaryTreeMazeGenerator: Generating maze 15x15 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P5x10;S7x3;Cave;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.BinaryTreeMazeGenerator)
BinaryTreeMazeGenerator: Generating maze 15x15 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P5x10;S7x3;Cave;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.BinaryTreeMazeGenerator)
BinaryTreeMazeGenerator: Generating maze 15x15 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P5x10;S7x3;Cave;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.BinaryTreeMazeGenerator)
BinaryTreeMazeGenerator: Generating maze 15x15 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P5x10;S7x3;Cave;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.BinaryTreeMazeGenerator)
BinaryTreeMazeGenerator: Generating maze 15x15 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P5x10;S7x3;Cave;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.BinaryTreeMazeGenerator)
]]></output>
                </test-case>
                <test-case id="1-1171" name="CaveAreasAreAppliedProperly(PlayersWorlds.Maps.Maze.HuntAndKillMazeGenerator)" fullname="PlayersWorlds.Maps.Maze.MazeGeneratorAreasTest.CaveAreasAreAppliedProperly(PlayersWorlds.Maps.Maze.HuntAndKillMazeGenerator)" methodname="CaveAreasAreAppliedProperly" classname="PlayersWorlds.Maps.Maze.MazeGeneratorAreasTest" runstate="Runnable" seed="576457578" result="Passed" start-time="2024-02-20T15:16:40.1942970Z" end-time="2024-02-20T15:16:40.2257030Z" duration="0.031406" asserts="90">
                  <output><![CDATA[HuntAndKillMazeGenerator: Generating maze 15x15 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P5x10;S7x3;Cave;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.HuntAndKillMazeGenerator)
HuntAndKillMazeGenerator: Generating maze 15x15 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P5x10;S7x3;Cave;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.HuntAndKillMazeGenerator)
HuntAndKillMazeGenerator: Generating maze 15x15 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P5x10;S7x3;Cave;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.HuntAndKillMazeGenerator)
HuntAndKillMazeGenerator: Generating maze 15x15 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P5x10;S7x3;Cave;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.HuntAndKillMazeGenerator)
HuntAndKillMazeGenerator: Generating maze 15x15 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P5x10;S7x3;Cave;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.HuntAndKillMazeGenerator)
HuntAndKillMazeGenerator: Generating maze 15x15 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P5x10;S7x3;Cave;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.HuntAndKillMazeGenerator)
HuntAndKillMazeGenerator: Generating maze 15x15 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P5x10;S7x3;Cave;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.HuntAndKillMazeGenerator)
HuntAndKillMazeGenerator: Generating maze 15x15 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P5x10;S7x3;Cave;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.HuntAndKillMazeGenerator)
HuntAndKillMazeGenerator: Generating maze 15x15 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P5x10;S7x3;Cave;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.HuntAndKillMazeGenerator)
HuntAndKillMazeGenerator: Generating maze 15x15 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P5x10;S7x3;Cave;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.HuntAndKillMazeGenerator)
]]></output>
                </test-case>
                <test-case id="1-1172" name="CaveAreasAreAppliedProperly(PlayersWorlds.Maps.Maze.RecursiveBacktrackerMazeGenerator)" fullname="PlayersWorlds.Maps.Maze.MazeGeneratorAreasTest.CaveAreasAreAppliedProperly(PlayersWorlds.Maps.Maze.RecursiveBacktrackerMazeGenerator)" methodname="CaveAreasAreAppliedProperly" classname="PlayersWorlds.Maps.Maze.MazeGeneratorAreasTest" runstate="Runnable" seed="581720175" result="Passed" start-time="2024-02-20T15:16:40.2257160Z" end-time="2024-02-20T15:16:40.2574340Z" duration="0.031718" asserts="90">
                  <output><![CDATA[RecursiveBacktrackerMazeGenerator: Generating maze 15x15 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P5x10;S7x3;Cave;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.RecursiveBacktrackerMazeGenerator)
RecursiveBacktrackerMazeGenerator: Generating maze 15x15 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P5x10;S7x3;Cave;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.RecursiveBacktrackerMazeGenerator)
RecursiveBacktrackerMazeGenerator: Generating maze 15x15 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P5x10;S7x3;Cave;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.RecursiveBacktrackerMazeGenerator)
RecursiveBacktrackerMazeGenerator: Generating maze 15x15 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P5x10;S7x3;Cave;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.RecursiveBacktrackerMazeGenerator)
RecursiveBacktrackerMazeGenerator: Generating maze 15x15 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P5x10;S7x3;Cave;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.RecursiveBacktrackerMazeGenerator)
RecursiveBacktrackerMazeGenerator: Generating maze 15x15 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P5x10;S7x3;Cave;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.RecursiveBacktrackerMazeGenerator)
RecursiveBacktrackerMazeGenerator: Generating maze 15x15 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P5x10;S7x3;Cave;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.RecursiveBacktrackerMazeGenerator)
RecursiveBacktrackerMazeGenerator: Generating maze 15x15 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P5x10;S7x3;Cave;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.RecursiveBacktrackerMazeGenerator)
RecursiveBacktrackerMazeGenerator: Generating maze 15x15 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P5x10;S7x3;Cave;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.RecursiveBacktrackerMazeGenerator)
RecursiveBacktrackerMazeGenerator: Generating maze 15x15 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P5x10;S7x3;Cave;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.RecursiveBacktrackerMazeGenerator)
]]></output>
                </test-case>
                <test-case id="1-1173" name="CaveAreasAreAppliedProperly(PlayersWorlds.Maps.Maze.SidewinderMazeGenerator)" fullname="PlayersWorlds.Maps.Maze.MazeGeneratorAreasTest.CaveAreasAreAppliedProperly(PlayersWorlds.Maps.Maze.SidewinderMazeGenerator)" methodname="CaveAreasAreAppliedProperly" classname="PlayersWorlds.Maps.Maze.MazeGeneratorAreasTest" runstate="Runnable" seed="1725841816" result="Passed" start-time="2024-02-20T15:16:40.2574470Z" end-time="2024-02-20T15:16:40.2989600Z" duration="0.041513" asserts="90">
                  <output><![CDATA[SidewinderMazeGenerator: Generating maze 15x15 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P5x10;S7x3;Cave;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.SidewinderMazeGenerator)
SidewinderMazeGenerator: Generating maze 15x15 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P5x10;S7x3;Cave;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.SidewinderMazeGenerator)
SidewinderMazeGenerator: Generating maze 15x15 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P5x10;S7x3;Cave;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.SidewinderMazeGenerator)
SidewinderMazeGenerator: Generating maze 15x15 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P5x10;S7x3;Cave;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.SidewinderMazeGenerator)
SidewinderMazeGenerator: Generating maze 15x15 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P5x10;S7x3;Cave;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.SidewinderMazeGenerator)
SidewinderMazeGenerator: Generating maze 15x15 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P5x10;S7x3;Cave;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.SidewinderMazeGenerator)
SidewinderMazeGenerator: Generating maze 15x15 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P5x10;S7x3;Cave;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.SidewinderMazeGenerator)
SidewinderMazeGenerator: Generating maze 15x15 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P5x10;S7x3;Cave;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.SidewinderMazeGenerator)
SidewinderMazeGenerator: Generating maze 15x15 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P5x10;S7x3;Cave;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.SidewinderMazeGenerator)
SidewinderMazeGenerator: Generating maze 15x15 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P5x10;S7x3;Cave;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.SidewinderMazeGenerator)
]]></output>
                </test-case>
                <test-case id="1-1174" name="CaveAreasAreAppliedProperly(PlayersWorlds.Maps.Maze.WilsonsMazeGenerator)" fullname="PlayersWorlds.Maps.Maze.MazeGeneratorAreasTest.CaveAreasAreAppliedProperly(PlayersWorlds.Maps.Maze.WilsonsMazeGenerator)" methodname="CaveAreasAreAppliedProperly" classname="PlayersWorlds.Maps.Maze.MazeGeneratorAreasTest" runstate="Runnable" seed="1182020809" result="Passed" start-time="2024-02-20T15:16:40.2989820Z" end-time="2024-02-20T15:16:40.3319440Z" duration="0.032962" asserts="90">
                  <output><![CDATA[WilsonsMazeGenerator: Generating maze 15x15 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P5x10;S7x3;Cave;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.WilsonsMazeGenerator)
WilsonsMazeGenerator: Generating maze 15x15 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P5x10;S7x3;Cave;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.WilsonsMazeGenerator)
WilsonsMazeGenerator: Generating maze 15x15 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P5x10;S7x3;Cave;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.WilsonsMazeGenerator)
WilsonsMazeGenerator: Generating maze 15x15 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P5x10;S7x3;Cave;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.WilsonsMazeGenerator)
WilsonsMazeGenerator: Generating maze 15x15 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P5x10;S7x3;Cave;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.WilsonsMazeGenerator)
WilsonsMazeGenerator: Generating maze 15x15 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P5x10;S7x3;Cave;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.WilsonsMazeGenerator)
WilsonsMazeGenerator: Generating maze 15x15 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P5x10;S7x3;Cave;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.WilsonsMazeGenerator)
WilsonsMazeGenerator: Generating maze 15x15 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P5x10;S7x3;Cave;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.WilsonsMazeGenerator)
WilsonsMazeGenerator: Generating maze 15x15 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P5x10;S7x3;Cave;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.WilsonsMazeGenerator)
WilsonsMazeGenerator: Generating maze 15x15 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P5x10;S7x3;Cave;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.WilsonsMazeGenerator)
]]></output>
                </test-case>
              </test-suite>
              <test-suite type="ParameterizedMethod" id="1-1232" name="DenseWalkways" fullname="PlayersWorlds.Maps.Maze.MazeGeneratorAreasTest.DenseWalkways" classname="PlayersWorlds.Maps.Maze.MazeGeneratorAreasTest" runstate="Runnable" testcasecount="18" result="Passed" start-time="2024-02-20T15:16:40.3319720Z" end-time="2024-02-20T15:16:40.7962090Z" duration="0.464237" total="18" passed="18" failed="0" warnings="0" inconclusive="0" skipped="0" asserts="540">
                <properties>
                  <property name="Repeat" value="10" />
                </properties>
                <test-case id="1-1214" name="DenseWalkways(PlayersWorlds.Maps.Maze.AldousBroderMazeGenerator,Cave)" fullname="PlayersWorlds.Maps.Maze.MazeGeneratorAreasTest.DenseWalkways(PlayersWorlds.Maps.Maze.AldousBroderMazeGenerator,Cave)" methodname="DenseWalkways" classname="PlayersWorlds.Maps.Maze.MazeGeneratorAreasTest" runstate="Runnable" seed="111416590" result="Passed" start-time="2024-02-20T15:16:40.3319940Z" end-time="2024-02-20T15:16:40.3614840Z" duration="0.029490" asserts="30">
                  <output><![CDATA[AldousBroderMazeGenerator: Generating maze 10x8 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P1x1;S2x2;Cave;, P4x1;S2x3;Cave;, P7x1;S2x2;Cave;, P1x4;S2x3;Cave;, P4x5;S1x2;Cave;...(8)), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.AldousBroderMazeGenerator)
AldousBroderMazeGenerator: Generating maze 10x8 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P1x1;S2x2;Cave;, P4x1;S2x3;Cave;, P7x1;S2x2;Cave;, P1x4;S2x3;Cave;, P4x5;S1x2;Cave;...(8)), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.AldousBroderMazeGenerator)
AldousBroderMazeGenerator: Generating maze 10x8 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P1x1;S2x2;Cave;, P4x1;S2x3;Cave;, P7x1;S2x2;Cave;, P1x4;S2x3;Cave;, P4x5;S1x2;Cave;...(8)), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.AldousBroderMazeGenerator)
AldousBroderMazeGenerator: Generating maze 10x8 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P1x1;S2x2;Cave;, P4x1;S2x3;Cave;, P7x1;S2x2;Cave;, P1x4;S2x3;Cave;, P4x5;S1x2;Cave;...(8)), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.AldousBroderMazeGenerator)
AldousBroderMazeGenerator: Generating maze 10x8 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P1x1;S2x2;Cave;, P4x1;S2x3;Cave;, P7x1;S2x2;Cave;, P1x4;S2x3;Cave;, P4x5;S1x2;Cave;...(8)), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.AldousBroderMazeGenerator)
AldousBroderMazeGenerator: Generating maze 10x8 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P1x1;S2x2;Cave;, P4x1;S2x3;Cave;, P7x1;S2x2;Cave;, P1x4;S2x3;Cave;, P4x5;S1x2;Cave;...(8)), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.AldousBroderMazeGenerator)
AldousBroderMazeGenerator: Generating maze 10x8 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P1x1;S2x2;Cave;, P4x1;S2x3;Cave;, P7x1;S2x2;Cave;, P1x4;S2x3;Cave;, P4x5;S1x2;Cave;...(8)), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.AldousBroderMazeGenerator)
AldousBroderMazeGenerator: Generating maze 10x8 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P1x1;S2x2;Cave;, P4x1;S2x3;Cave;, P7x1;S2x2;Cave;, P1x4;S2x3;Cave;, P4x5;S1x2;Cave;...(8)), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.AldousBroderMazeGenerator)
AldousBroderMazeGenerator: Generating maze 10x8 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P1x1;S2x2;Cave;, P4x1;S2x3;Cave;, P7x1;S2x2;Cave;, P1x4;S2x3;Cave;, P4x5;S1x2;Cave;...(8)), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.AldousBroderMazeGenerator)
AldousBroderMazeGenerator: Generating maze 10x8 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P1x1;S2x2;Cave;, P4x1;S2x3;Cave;, P7x1;S2x2;Cave;, P1x4;S2x3;Cave;, P4x5;S1x2;Cave;...(8)), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.AldousBroderMazeGenerator)
]]></output>
                </test-case>
                <test-case id="1-1215" name="DenseWalkways(PlayersWorlds.Maps.Maze.AldousBroderMazeGenerator,Hall)" fullname="PlayersWorlds.Maps.Maze.MazeGeneratorAreasTest.DenseWalkways(PlayersWorlds.Maps.Maze.AldousBroderMazeGenerator,Hall)" methodname="DenseWalkways" classname="PlayersWorlds.Maps.Maze.MazeGeneratorAreasTest" runstate="Runnable" seed="910927692" result="Passed" start-time="2024-02-20T15:16:40.3614970Z" end-time="2024-02-20T15:16:40.3893240Z" duration="0.027828" asserts="30">
                  <output><![CDATA[AldousBroderMazeGenerator: Generating maze 10x8 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P1x1;S2x2;Hall;, P4x1;S2x3;Hall;, P7x1;S2x2;Hall;, P1x4;S2x3;Hall;, P4x5;S1x2;Hall;...(8)), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.AldousBroderMazeGenerator)
AldousBroderMazeGenerator: Generating maze 10x8 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P1x1;S2x2;Hall;, P4x1;S2x3;Hall;, P7x1;S2x2;Hall;, P1x4;S2x3;Hall;, P4x5;S1x2;Hall;...(8)), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.AldousBroderMazeGenerator)
AldousBroderMazeGenerator: Generating maze 10x8 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P1x1;S2x2;Hall;, P4x1;S2x3;Hall;, P7x1;S2x2;Hall;, P1x4;S2x3;Hall;, P4x5;S1x2;Hall;...(8)), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.AldousBroderMazeGenerator)
AldousBroderMazeGenerator: Generating maze 10x8 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P1x1;S2x2;Hall;, P4x1;S2x3;Hall;, P7x1;S2x2;Hall;, P1x4;S2x3;Hall;, P4x5;S1x2;Hall;...(8)), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.AldousBroderMazeGenerator)
AldousBroderMazeGenerator: Generating maze 10x8 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P1x1;S2x2;Hall;, P4x1;S2x3;Hall;, P7x1;S2x2;Hall;, P1x4;S2x3;Hall;, P4x5;S1x2;Hall;...(8)), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.AldousBroderMazeGenerator)
AldousBroderMazeGenerator: Generating maze 10x8 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P1x1;S2x2;Hall;, P4x1;S2x3;Hall;, P7x1;S2x2;Hall;, P1x4;S2x3;Hall;, P4x5;S1x2;Hall;...(8)), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.AldousBroderMazeGenerator)
AldousBroderMazeGenerator: Generating maze 10x8 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P1x1;S2x2;Hall;, P4x1;S2x3;Hall;, P7x1;S2x2;Hall;, P1x4;S2x3;Hall;, P4x5;S1x2;Hall;...(8)), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.AldousBroderMazeGenerator)
AldousBroderMazeGenerator: Generating maze 10x8 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P1x1;S2x2;Hall;, P4x1;S2x3;Hall;, P7x1;S2x2;Hall;, P1x4;S2x3;Hall;, P4x5;S1x2;Hall;...(8)), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.AldousBroderMazeGenerator)
AldousBroderMazeGenerator: Generating maze 10x8 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P1x1;S2x2;Hall;, P4x1;S2x3;Hall;, P7x1;S2x2;Hall;, P1x4;S2x3;Hall;, P4x5;S1x2;Hall;...(8)), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.AldousBroderMazeGenerator)
AldousBroderMazeGenerator: Generating maze 10x8 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P1x1;S2x2;Hall;, P4x1;S2x3;Hall;, P7x1;S2x2;Hall;, P1x4;S2x3;Hall;, P4x5;S1x2;Hall;...(8)), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.AldousBroderMazeGenerator)
]]></output>
                </test-case>
                <test-case id="1-1216" name="DenseWalkways(PlayersWorlds.Maps.Maze.AldousBroderMazeGenerator,Fill)" fullname="PlayersWorlds.Maps.Maze.MazeGeneratorAreasTest.DenseWalkways(PlayersWorlds.Maps.Maze.AldousBroderMazeGenerator,Fill)" methodname="DenseWalkways" classname="PlayersWorlds.Maps.Maze.MazeGeneratorAreasTest" runstate="Runnable" seed="1515841908" result="Passed" start-time="2024-02-20T15:16:40.3893360Z" end-time="2024-02-20T15:16:40.4140850Z" duration="0.024750" asserts="30">
                  <output><![CDATA[AldousBroderMazeGenerator: Generating maze 10x8 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P1x1;S2x2;Fill;, P4x1;S2x3;Fill;, P7x1;S2x2;Fill;, P1x4;S2x3;Fill;, P4x5;S1x2;Fill;...(8)), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.AldousBroderMazeGenerator)
AldousBroderMazeGenerator: Generating maze 10x8 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P1x1;S2x2;Fill;, P4x1;S2x3;Fill;, P7x1;S2x2;Fill;, P1x4;S2x3;Fill;, P4x5;S1x2;Fill;...(8)), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.AldousBroderMazeGenerator)
AldousBroderMazeGenerator: Generating maze 10x8 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P1x1;S2x2;Fill;, P4x1;S2x3;Fill;, P7x1;S2x2;Fill;, P1x4;S2x3;Fill;, P4x5;S1x2;Fill;...(8)), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.AldousBroderMazeGenerator)
AldousBroderMazeGenerator: Generating maze 10x8 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P1x1;S2x2;Fill;, P4x1;S2x3;Fill;, P7x1;S2x2;Fill;, P1x4;S2x3;Fill;, P4x5;S1x2;Fill;...(8)), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.AldousBroderMazeGenerator)
AldousBroderMazeGenerator: Generating maze 10x8 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P1x1;S2x2;Fill;, P4x1;S2x3;Fill;, P7x1;S2x2;Fill;, P1x4;S2x3;Fill;, P4x5;S1x2;Fill;...(8)), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.AldousBroderMazeGenerator)
AldousBroderMazeGenerator: Generating maze 10x8 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P1x1;S2x2;Fill;, P4x1;S2x3;Fill;, P7x1;S2x2;Fill;, P1x4;S2x3;Fill;, P4x5;S1x2;Fill;...(8)), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.AldousBroderMazeGenerator)
AldousBroderMazeGenerator: Generating maze 10x8 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P1x1;S2x2;Fill;, P4x1;S2x3;Fill;, P7x1;S2x2;Fill;, P1x4;S2x3;Fill;, P4x5;S1x2;Fill;...(8)), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.AldousBroderMazeGenerator)
AldousBroderMazeGenerator: Generating maze 10x8 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P1x1;S2x2;Fill;, P4x1;S2x3;Fill;, P7x1;S2x2;Fill;, P1x4;S2x3;Fill;, P4x5;S1x2;Fill;...(8)), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.AldousBroderMazeGenerator)
AldousBroderMazeGenerator: Generating maze 10x8 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P1x1;S2x2;Fill;, P4x1;S2x3;Fill;, P7x1;S2x2;Fill;, P1x4;S2x3;Fill;, P4x5;S1x2;Fill;...(8)), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.AldousBroderMazeGenerator)
AldousBroderMazeGenerator: Generating maze 10x8 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P1x1;S2x2;Fill;, P4x1;S2x3;Fill;, P7x1;S2x2;Fill;, P1x4;S2x3;Fill;, P4x5;S1x2;Fill;...(8)), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.AldousBroderMazeGenerator)
]]></output>
                </test-case>
                <test-case id="1-1217" name="DenseWalkways(PlayersWorlds.Maps.Maze.BinaryTreeMazeGenerator,Cave)" fullname="PlayersWorlds.Maps.Maze.MazeGeneratorAreasTest.DenseWalkways(PlayersWorlds.Maps.Maze.BinaryTreeMazeGenerator,Cave)" methodname="DenseWalkways" classname="PlayersWorlds.Maps.Maze.MazeGeneratorAreasTest" runstate="Runnable" seed="915268972" result="Passed" start-time="2024-02-20T15:16:40.4140990Z" end-time="2024-02-20T15:16:40.4402900Z" duration="0.026192" asserts="30">
                  <output><![CDATA[BinaryTreeMazeGenerator: Generating maze 10x8 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P1x1;S2x2;Cave;, P4x1;S2x3;Cave;, P7x1;S2x2;Cave;, P1x4;S2x3;Cave;, P4x5;S1x2;Cave;...(8)), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.BinaryTreeMazeGenerator)
BinaryTreeMazeGenerator: Generating maze 10x8 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P1x1;S2x2;Cave;, P4x1;S2x3;Cave;, P7x1;S2x2;Cave;, P1x4;S2x3;Cave;, P4x5;S1x2;Cave;...(8)), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.BinaryTreeMazeGenerator)
BinaryTreeMazeGenerator: Generating maze 10x8 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P1x1;S2x2;Cave;, P4x1;S2x3;Cave;, P7x1;S2x2;Cave;, P1x4;S2x3;Cave;, P4x5;S1x2;Cave;...(8)), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.BinaryTreeMazeGenerator)
BinaryTreeMazeGenerator: Generating maze 10x8 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P1x1;S2x2;Cave;, P4x1;S2x3;Cave;, P7x1;S2x2;Cave;, P1x4;S2x3;Cave;, P4x5;S1x2;Cave;...(8)), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.BinaryTreeMazeGenerator)
BinaryTreeMazeGenerator: Generating maze 10x8 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P1x1;S2x2;Cave;, P4x1;S2x3;Cave;, P7x1;S2x2;Cave;, P1x4;S2x3;Cave;, P4x5;S1x2;Cave;...(8)), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.BinaryTreeMazeGenerator)
BinaryTreeMazeGenerator: Generating maze 10x8 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P1x1;S2x2;Cave;, P4x1;S2x3;Cave;, P7x1;S2x2;Cave;, P1x4;S2x3;Cave;, P4x5;S1x2;Cave;...(8)), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.BinaryTreeMazeGenerator)
BinaryTreeMazeGenerator: Generating maze 10x8 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P1x1;S2x2;Cave;, P4x1;S2x3;Cave;, P7x1;S2x2;Cave;, P1x4;S2x3;Cave;, P4x5;S1x2;Cave;...(8)), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.BinaryTreeMazeGenerator)
BinaryTreeMazeGenerator: Generating maze 10x8 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P1x1;S2x2;Cave;, P4x1;S2x3;Cave;, P7x1;S2x2;Cave;, P1x4;S2x3;Cave;, P4x5;S1x2;Cave;...(8)), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.BinaryTreeMazeGenerator)
BinaryTreeMazeGenerator: Generating maze 10x8 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P1x1;S2x2;Cave;, P4x1;S2x3;Cave;, P7x1;S2x2;Cave;, P1x4;S2x3;Cave;, P4x5;S1x2;Cave;...(8)), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.BinaryTreeMazeGenerator)
BinaryTreeMazeGenerator: Generating maze 10x8 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P1x1;S2x2;Cave;, P4x1;S2x3;Cave;, P7x1;S2x2;Cave;, P1x4;S2x3;Cave;, P4x5;S1x2;Cave;...(8)), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.BinaryTreeMazeGenerator)
]]></output>
                </test-case>
                <test-case id="1-1218" name="DenseWalkways(PlayersWorlds.Maps.Maze.BinaryTreeMazeGenerator,Hall)" fullname="PlayersWorlds.Maps.Maze.MazeGeneratorAreasTest.DenseWalkways(PlayersWorlds.Maps.Maze.BinaryTreeMazeGenerator,Hall)" methodname="DenseWalkways" classname="PlayersWorlds.Maps.Maze.MazeGeneratorAreasTest" runstate="Runnable" seed="1978545610" result="Passed" start-time="2024-02-20T15:16:40.4403000Z" end-time="2024-02-20T15:16:40.4649250Z" duration="0.024626" asserts="30">
                  <output><![CDATA[BinaryTreeMazeGenerator: Generating maze 10x8 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P1x1;S2x2;Hall;, P4x1;S2x3;Hall;, P7x1;S2x2;Hall;, P1x4;S2x3;Hall;, P4x5;S1x2;Hall;...(8)), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.BinaryTreeMazeGenerator)
BinaryTreeMazeGenerator: Generating maze 10x8 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P1x1;S2x2;Hall;, P4x1;S2x3;Hall;, P7x1;S2x2;Hall;, P1x4;S2x3;Hall;, P4x5;S1x2;Hall;...(8)), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.BinaryTreeMazeGenerator)
BinaryTreeMazeGenerator: Generating maze 10x8 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P1x1;S2x2;Hall;, P4x1;S2x3;Hall;, P7x1;S2x2;Hall;, P1x4;S2x3;Hall;, P4x5;S1x2;Hall;...(8)), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.BinaryTreeMazeGenerator)
BinaryTreeMazeGenerator: Generating maze 10x8 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P1x1;S2x2;Hall;, P4x1;S2x3;Hall;, P7x1;S2x2;Hall;, P1x4;S2x3;Hall;, P4x5;S1x2;Hall;...(8)), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.BinaryTreeMazeGenerator)
BinaryTreeMazeGenerator: Generating maze 10x8 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P1x1;S2x2;Hall;, P4x1;S2x3;Hall;, P7x1;S2x2;Hall;, P1x4;S2x3;Hall;, P4x5;S1x2;Hall;...(8)), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.BinaryTreeMazeGenerator)
BinaryTreeMazeGenerator: Generating maze 10x8 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P1x1;S2x2;Hall;, P4x1;S2x3;Hall;, P7x1;S2x2;Hall;, P1x4;S2x3;Hall;, P4x5;S1x2;Hall;...(8)), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.BinaryTreeMazeGenerator)
BinaryTreeMazeGenerator: Generating maze 10x8 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P1x1;S2x2;Hall;, P4x1;S2x3;Hall;, P7x1;S2x2;Hall;, P1x4;S2x3;Hall;, P4x5;S1x2;Hall;...(8)), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.BinaryTreeMazeGenerator)
BinaryTreeMazeGenerator: Generating maze 10x8 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P1x1;S2x2;Hall;, P4x1;S2x3;Hall;, P7x1;S2x2;Hall;, P1x4;S2x3;Hall;, P4x5;S1x2;Hall;...(8)), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.BinaryTreeMazeGenerator)
BinaryTreeMazeGenerator: Generating maze 10x8 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P1x1;S2x2;Hall;, P4x1;S2x3;Hall;, P7x1;S2x2;Hall;, P1x4;S2x3;Hall;, P4x5;S1x2;Hall;...(8)), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.BinaryTreeMazeGenerator)
BinaryTreeMazeGenerator: Generating maze 10x8 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P1x1;S2x2;Hall;, P4x1;S2x3;Hall;, P7x1;S2x2;Hall;, P1x4;S2x3;Hall;, P4x5;S1x2;Hall;...(8)), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.BinaryTreeMazeGenerator)
]]></output>
                </test-case>
                <test-case id="1-1219" name="DenseWalkways(PlayersWorlds.Maps.Maze.BinaryTreeMazeGenerator,Fill)" fullname="PlayersWorlds.Maps.Maze.MazeGeneratorAreasTest.DenseWalkways(PlayersWorlds.Maps.Maze.BinaryTreeMazeGenerator,Fill)" methodname="DenseWalkways" classname="PlayersWorlds.Maps.Maze.MazeGeneratorAreasTest" runstate="Runnable" seed="861683093" result="Passed" start-time="2024-02-20T15:16:40.4649360Z" end-time="2024-02-20T15:16:40.4866680Z" duration="0.021733" asserts="30">
                  <output><![CDATA[BinaryTreeMazeGenerator: Generating maze 10x8 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P1x1;S2x2;Fill;, P4x1;S2x3;Fill;, P7x1;S2x2;Fill;, P1x4;S2x3;Fill;, P4x5;S1x2;Fill;...(8)), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.BinaryTreeMazeGenerator)
BinaryTreeMazeGenerator: Generating maze 10x8 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P1x1;S2x2;Fill;, P4x1;S2x3;Fill;, P7x1;S2x2;Fill;, P1x4;S2x3;Fill;, P4x5;S1x2;Fill;...(8)), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.BinaryTreeMazeGenerator)
BinaryTreeMazeGenerator: Generating maze 10x8 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P1x1;S2x2;Fill;, P4x1;S2x3;Fill;, P7x1;S2x2;Fill;, P1x4;S2x3;Fill;, P4x5;S1x2;Fill;...(8)), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.BinaryTreeMazeGenerator)
BinaryTreeMazeGenerator: Generating maze 10x8 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P1x1;S2x2;Fill;, P4x1;S2x3;Fill;, P7x1;S2x2;Fill;, P1x4;S2x3;Fill;, P4x5;S1x2;Fill;...(8)), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.BinaryTreeMazeGenerator)
BinaryTreeMazeGenerator: Generating maze 10x8 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P1x1;S2x2;Fill;, P4x1;S2x3;Fill;, P7x1;S2x2;Fill;, P1x4;S2x3;Fill;, P4x5;S1x2;Fill;...(8)), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.BinaryTreeMazeGenerator)
BinaryTreeMazeGenerator: Generating maze 10x8 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P1x1;S2x2;Fill;, P4x1;S2x3;Fill;, P7x1;S2x2;Fill;, P1x4;S2x3;Fill;, P4x5;S1x2;Fill;...(8)), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.BinaryTreeMazeGenerator)
BinaryTreeMazeGenerator: Generating maze 10x8 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P1x1;S2x2;Fill;, P4x1;S2x3;Fill;, P7x1;S2x2;Fill;, P1x4;S2x3;Fill;, P4x5;S1x2;Fill;...(8)), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.BinaryTreeMazeGenerator)
BinaryTreeMazeGenerator: Generating maze 10x8 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P1x1;S2x2;Fill;, P4x1;S2x3;Fill;, P7x1;S2x2;Fill;, P1x4;S2x3;Fill;, P4x5;S1x2;Fill;...(8)), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.BinaryTreeMazeGenerator)
BinaryTreeMazeGenerator: Generating maze 10x8 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P1x1;S2x2;Fill;, P4x1;S2x3;Fill;, P7x1;S2x2;Fill;, P1x4;S2x3;Fill;, P4x5;S1x2;Fill;...(8)), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.BinaryTreeMazeGenerator)
BinaryTreeMazeGenerator: Generating maze 10x8 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P1x1;S2x2;Fill;, P4x1;S2x3;Fill;, P7x1;S2x2;Fill;, P1x4;S2x3;Fill;, P4x5;S1x2;Fill;...(8)), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.BinaryTreeMazeGenerator)
]]></output>
                </test-case>
                <test-case id="1-1220" name="DenseWalkways(PlayersWorlds.Maps.Maze.HuntAndKillMazeGenerator,Cave)" fullname="PlayersWorlds.Maps.Maze.MazeGeneratorAreasTest.DenseWalkways(PlayersWorlds.Maps.Maze.HuntAndKillMazeGenerator,Cave)" methodname="DenseWalkways" classname="PlayersWorlds.Maps.Maze.MazeGeneratorAreasTest" runstate="Runnable" seed="2103117282" result="Passed" start-time="2024-02-20T15:16:40.4866790Z" end-time="2024-02-20T15:16:40.5103680Z" duration="0.023689" asserts="30">
                  <output><![CDATA[HuntAndKillMazeGenerator: Generating maze 10x8 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P1x1;S2x2;Cave;, P4x1;S2x3;Cave;, P7x1;S2x2;Cave;, P1x4;S2x3;Cave;, P4x5;S1x2;Cave;...(8)), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.HuntAndKillMazeGenerator)
HuntAndKillMazeGenerator: Generating maze 10x8 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P1x1;S2x2;Cave;, P4x1;S2x3;Cave;, P7x1;S2x2;Cave;, P1x4;S2x3;Cave;, P4x5;S1x2;Cave;...(8)), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.HuntAndKillMazeGenerator)
HuntAndKillMazeGenerator: Generating maze 10x8 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P1x1;S2x2;Cave;, P4x1;S2x3;Cave;, P7x1;S2x2;Cave;, P1x4;S2x3;Cave;, P4x5;S1x2;Cave;...(8)), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.HuntAndKillMazeGenerator)
HuntAndKillMazeGenerator: Generating maze 10x8 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P1x1;S2x2;Cave;, P4x1;S2x3;Cave;, P7x1;S2x2;Cave;, P1x4;S2x3;Cave;, P4x5;S1x2;Cave;...(8)), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.HuntAndKillMazeGenerator)
HuntAndKillMazeGenerator: Generating maze 10x8 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P1x1;S2x2;Cave;, P4x1;S2x3;Cave;, P7x1;S2x2;Cave;, P1x4;S2x3;Cave;, P4x5;S1x2;Cave;...(8)), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.HuntAndKillMazeGenerator)
HuntAndKillMazeGenerator: Generating maze 10x8 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P1x1;S2x2;Cave;, P4x1;S2x3;Cave;, P7x1;S2x2;Cave;, P1x4;S2x3;Cave;, P4x5;S1x2;Cave;...(8)), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.HuntAndKillMazeGenerator)
HuntAndKillMazeGenerator: Generating maze 10x8 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P1x1;S2x2;Cave;, P4x1;S2x3;Cave;, P7x1;S2x2;Cave;, P1x4;S2x3;Cave;, P4x5;S1x2;Cave;...(8)), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.HuntAndKillMazeGenerator)
HuntAndKillMazeGenerator: Generating maze 10x8 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P1x1;S2x2;Cave;, P4x1;S2x3;Cave;, P7x1;S2x2;Cave;, P1x4;S2x3;Cave;, P4x5;S1x2;Cave;...(8)), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.HuntAndKillMazeGenerator)
HuntAndKillMazeGenerator: Generating maze 10x8 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P1x1;S2x2;Cave;, P4x1;S2x3;Cave;, P7x1;S2x2;Cave;, P1x4;S2x3;Cave;, P4x5;S1x2;Cave;...(8)), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.HuntAndKillMazeGenerator)
HuntAndKillMazeGenerator: Generating maze 10x8 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P1x1;S2x2;Cave;, P4x1;S2x3;Cave;, P7x1;S2x2;Cave;, P1x4;S2x3;Cave;, P4x5;S1x2;Cave;...(8)), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.HuntAndKillMazeGenerator)
]]></output>
                </test-case>
                <test-case id="1-1221" name="DenseWalkways(PlayersWorlds.Maps.Maze.HuntAndKillMazeGenerator,Hall)" fullname="PlayersWorlds.Maps.Maze.MazeGeneratorAreasTest.DenseWalkways(PlayersWorlds.Maps.Maze.HuntAndKillMazeGenerator,Hall)" methodname="DenseWalkways" classname="PlayersWorlds.Maps.Maze.MazeGeneratorAreasTest" runstate="Runnable" seed="811663269" result="Passed" start-time="2024-02-20T15:16:40.5103790Z" end-time="2024-02-20T15:16:40.5332380Z" duration="0.022859" asserts="30">
                  <output><![CDATA[HuntAndKillMazeGenerator: Generating maze 10x8 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P1x1;S2x2;Hall;, P4x1;S2x3;Hall;, P7x1;S2x2;Hall;, P1x4;S2x3;Hall;, P4x5;S1x2;Hall;...(8)), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.HuntAndKillMazeGenerator)
HuntAndKillMazeGenerator: Generating maze 10x8 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P1x1;S2x2;Hall;, P4x1;S2x3;Hall;, P7x1;S2x2;Hall;, P1x4;S2x3;Hall;, P4x5;S1x2;Hall;...(8)), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.HuntAndKillMazeGenerator)
HuntAndKillMazeGenerator: Generating maze 10x8 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P1x1;S2x2;Hall;, P4x1;S2x3;Hall;, P7x1;S2x2;Hall;, P1x4;S2x3;Hall;, P4x5;S1x2;Hall;...(8)), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.HuntAndKillMazeGenerator)
HuntAndKillMazeGenerator: Generating maze 10x8 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P1x1;S2x2;Hall;, P4x1;S2x3;Hall;, P7x1;S2x2;Hall;, P1x4;S2x3;Hall;, P4x5;S1x2;Hall;...(8)), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.HuntAndKillMazeGenerator)
HuntAndKillMazeGenerator: Generating maze 10x8 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P1x1;S2x2;Hall;, P4x1;S2x3;Hall;, P7x1;S2x2;Hall;, P1x4;S2x3;Hall;, P4x5;S1x2;Hall;...(8)), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.HuntAndKillMazeGenerator)
HuntAndKillMazeGenerator: Generating maze 10x8 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P1x1;S2x2;Hall;, P4x1;S2x3;Hall;, P7x1;S2x2;Hall;, P1x4;S2x3;Hall;, P4x5;S1x2;Hall;...(8)), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.HuntAndKillMazeGenerator)
HuntAndKillMazeGenerator: Generating maze 10x8 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P1x1;S2x2;Hall;, P4x1;S2x3;Hall;, P7x1;S2x2;Hall;, P1x4;S2x3;Hall;, P4x5;S1x2;Hall;...(8)), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.HuntAndKillMazeGenerator)
HuntAndKillMazeGenerator: Generating maze 10x8 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P1x1;S2x2;Hall;, P4x1;S2x3;Hall;, P7x1;S2x2;Hall;, P1x4;S2x3;Hall;, P4x5;S1x2;Hall;...(8)), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.HuntAndKillMazeGenerator)
HuntAndKillMazeGenerator: Generating maze 10x8 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P1x1;S2x2;Hall;, P4x1;S2x3;Hall;, P7x1;S2x2;Hall;, P1x4;S2x3;Hall;, P4x5;S1x2;Hall;...(8)), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.HuntAndKillMazeGenerator)
HuntAndKillMazeGenerator: Generating maze 10x8 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P1x1;S2x2;Hall;, P4x1;S2x3;Hall;, P7x1;S2x2;Hall;, P1x4;S2x3;Hall;, P4x5;S1x2;Hall;...(8)), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.HuntAndKillMazeGenerator)
]]></output>
                </test-case>
                <test-case id="1-1222" name="DenseWalkways(PlayersWorlds.Maps.Maze.HuntAndKillMazeGenerator,Fill)" fullname="PlayersWorlds.Maps.Maze.MazeGeneratorAreasTest.DenseWalkways(PlayersWorlds.Maps.Maze.HuntAndKillMazeGenerator,Fill)" methodname="DenseWalkways" classname="PlayersWorlds.Maps.Maze.MazeGeneratorAreasTest" runstate="Runnable" seed="1157752344" result="Passed" start-time="2024-02-20T15:16:40.5332490Z" end-time="2024-02-20T15:16:40.5533940Z" duration="0.020145" asserts="30">
                  <output><![CDATA[HuntAndKillMazeGenerator: Generating maze 10x8 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P1x1;S2x2;Fill;, P4x1;S2x3;Fill;, P7x1;S2x2;Fill;, P1x4;S2x3;Fill;, P4x5;S1x2;Fill;...(8)), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.HuntAndKillMazeGenerator)
HuntAndKillMazeGenerator: Generating maze 10x8 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P1x1;S2x2;Fill;, P4x1;S2x3;Fill;, P7x1;S2x2;Fill;, P1x4;S2x3;Fill;, P4x5;S1x2;Fill;...(8)), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.HuntAndKillMazeGenerator)
HuntAndKillMazeGenerator: Generating maze 10x8 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P1x1;S2x2;Fill;, P4x1;S2x3;Fill;, P7x1;S2x2;Fill;, P1x4;S2x3;Fill;, P4x5;S1x2;Fill;...(8)), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.HuntAndKillMazeGenerator)
HuntAndKillMazeGenerator: Generating maze 10x8 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P1x1;S2x2;Fill;, P4x1;S2x3;Fill;, P7x1;S2x2;Fill;, P1x4;S2x3;Fill;, P4x5;S1x2;Fill;...(8)), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.HuntAndKillMazeGenerator)
HuntAndKillMazeGenerator: Generating maze 10x8 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P1x1;S2x2;Fill;, P4x1;S2x3;Fill;, P7x1;S2x2;Fill;, P1x4;S2x3;Fill;, P4x5;S1x2;Fill;...(8)), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.HuntAndKillMazeGenerator)
HuntAndKillMazeGenerator: Generating maze 10x8 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P1x1;S2x2;Fill;, P4x1;S2x3;Fill;, P7x1;S2x2;Fill;, P1x4;S2x3;Fill;, P4x5;S1x2;Fill;...(8)), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.HuntAndKillMazeGenerator)
HuntAndKillMazeGenerator: Generating maze 10x8 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P1x1;S2x2;Fill;, P4x1;S2x3;Fill;, P7x1;S2x2;Fill;, P1x4;S2x3;Fill;, P4x5;S1x2;Fill;...(8)), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.HuntAndKillMazeGenerator)
HuntAndKillMazeGenerator: Generating maze 10x8 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P1x1;S2x2;Fill;, P4x1;S2x3;Fill;, P7x1;S2x2;Fill;, P1x4;S2x3;Fill;, P4x5;S1x2;Fill;...(8)), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.HuntAndKillMazeGenerator)
HuntAndKillMazeGenerator: Generating maze 10x8 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P1x1;S2x2;Fill;, P4x1;S2x3;Fill;, P7x1;S2x2;Fill;, P1x4;S2x3;Fill;, P4x5;S1x2;Fill;...(8)), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.HuntAndKillMazeGenerator)
HuntAndKillMazeGenerator: Generating maze 10x8 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P1x1;S2x2;Fill;, P4x1;S2x3;Fill;, P7x1;S2x2;Fill;, P1x4;S2x3;Fill;, P4x5;S1x2;Fill;...(8)), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.HuntAndKillMazeGenerator)
]]></output>
                </test-case>
                <test-case id="1-1223" name="DenseWalkways(PlayersWorlds.Maps.Maze.RecursiveBacktrackerMazeGenerator,Cave)" fullname="PlayersWorlds.Maps.Maze.MazeGeneratorAreasTest.DenseWalkways(PlayersWorlds.Maps.Maze.RecursiveBacktrackerMazeGenerator,Cave)" methodname="DenseWalkways" classname="PlayersWorlds.Maps.Maze.MazeGeneratorAreasTest" runstate="Runnable" seed="1286065477" result="Passed" start-time="2024-02-20T15:16:40.5534050Z" end-time="2024-02-20T15:16:40.5774630Z" duration="0.024059" asserts="30">
                  <output><![CDATA[RecursiveBacktrackerMazeGenerator: Generating maze 10x8 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P1x1;S2x2;Cave;, P4x1;S2x3;Cave;, P7x1;S2x2;Cave;, P1x4;S2x3;Cave;, P4x5;S1x2;Cave;...(8)), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.RecursiveBacktrackerMazeGenerator)
RecursiveBacktrackerMazeGenerator: Generating maze 10x8 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P1x1;S2x2;Cave;, P4x1;S2x3;Cave;, P7x1;S2x2;Cave;, P1x4;S2x3;Cave;, P4x5;S1x2;Cave;...(8)), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.RecursiveBacktrackerMazeGenerator)
RecursiveBacktrackerMazeGenerator: Generating maze 10x8 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P1x1;S2x2;Cave;, P4x1;S2x3;Cave;, P7x1;S2x2;Cave;, P1x4;S2x3;Cave;, P4x5;S1x2;Cave;...(8)), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.RecursiveBacktrackerMazeGenerator)
RecursiveBacktrackerMazeGenerator: Generating maze 10x8 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P1x1;S2x2;Cave;, P4x1;S2x3;Cave;, P7x1;S2x2;Cave;, P1x4;S2x3;Cave;, P4x5;S1x2;Cave;...(8)), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.RecursiveBacktrackerMazeGenerator)
RecursiveBacktrackerMazeGenerator: Generating maze 10x8 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P1x1;S2x2;Cave;, P4x1;S2x3;Cave;, P7x1;S2x2;Cave;, P1x4;S2x3;Cave;, P4x5;S1x2;Cave;...(8)), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.RecursiveBacktrackerMazeGenerator)
RecursiveBacktrackerMazeGenerator: Generating maze 10x8 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P1x1;S2x2;Cave;, P4x1;S2x3;Cave;, P7x1;S2x2;Cave;, P1x4;S2x3;Cave;, P4x5;S1x2;Cave;...(8)), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.RecursiveBacktrackerMazeGenerator)
RecursiveBacktrackerMazeGenerator: Generating maze 10x8 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P1x1;S2x2;Cave;, P4x1;S2x3;Cave;, P7x1;S2x2;Cave;, P1x4;S2x3;Cave;, P4x5;S1x2;Cave;...(8)), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.RecursiveBacktrackerMazeGenerator)
RecursiveBacktrackerMazeGenerator: Generating maze 10x8 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P1x1;S2x2;Cave;, P4x1;S2x3;Cave;, P7x1;S2x2;Cave;, P1x4;S2x3;Cave;, P4x5;S1x2;Cave;...(8)), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.RecursiveBacktrackerMazeGenerator)
RecursiveBacktrackerMazeGenerator: Generating maze 10x8 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P1x1;S2x2;Cave;, P4x1;S2x3;Cave;, P7x1;S2x2;Cave;, P1x4;S2x3;Cave;, P4x5;S1x2;Cave;...(8)), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.RecursiveBacktrackerMazeGenerator)
RecursiveBacktrackerMazeGenerator: Generating maze 10x8 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P1x1;S2x2;Cave;, P4x1;S2x3;Cave;, P7x1;S2x2;Cave;, P1x4;S2x3;Cave;, P4x5;S1x2;Cave;...(8)), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.RecursiveBacktrackerMazeGenerator)
]]></output>
                </test-case>
                <test-case id="1-1224" name="DenseWalkways(PlayersWorlds.Maps.Maze.RecursiveBacktrackerMazeGenerator,Hall)" fullname="PlayersWorlds.Maps.Maze.MazeGeneratorAreasTest.DenseWalkways(PlayersWorlds.Maps.Maze.RecursiveBacktrackerMazeGenerator,Hall)" methodname="DenseWalkways" classname="PlayersWorlds.Maps.Maze.MazeGeneratorAreasTest" runstate="Runnable" seed="1154120853" result="Passed" start-time="2024-02-20T15:16:40.5774740Z" end-time="2024-02-20T15:16:40.6006480Z" duration="0.023173" asserts="30">
                  <output><![CDATA[RecursiveBacktrackerMazeGenerator: Generating maze 10x8 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P1x1;S2x2;Hall;, P4x1;S2x3;Hall;, P7x1;S2x2;Hall;, P1x4;S2x3;Hall;, P4x5;S1x2;Hall;...(8)), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.RecursiveBacktrackerMazeGenerator)
RecursiveBacktrackerMazeGenerator: Generating maze 10x8 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P1x1;S2x2;Hall;, P4x1;S2x3;Hall;, P7x1;S2x2;Hall;, P1x4;S2x3;Hall;, P4x5;S1x2;Hall;...(8)), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.RecursiveBacktrackerMazeGenerator)
RecursiveBacktrackerMazeGenerator: Generating maze 10x8 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P1x1;S2x2;Hall;, P4x1;S2x3;Hall;, P7x1;S2x2;Hall;, P1x4;S2x3;Hall;, P4x5;S1x2;Hall;...(8)), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.RecursiveBacktrackerMazeGenerator)
RecursiveBacktrackerMazeGenerator: Generating maze 10x8 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P1x1;S2x2;Hall;, P4x1;S2x3;Hall;, P7x1;S2x2;Hall;, P1x4;S2x3;Hall;, P4x5;S1x2;Hall;...(8)), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.RecursiveBacktrackerMazeGenerator)
RecursiveBacktrackerMazeGenerator: Generating maze 10x8 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P1x1;S2x2;Hall;, P4x1;S2x3;Hall;, P7x1;S2x2;Hall;, P1x4;S2x3;Hall;, P4x5;S1x2;Hall;...(8)), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.RecursiveBacktrackerMazeGenerator)
RecursiveBacktrackerMazeGenerator: Generating maze 10x8 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P1x1;S2x2;Hall;, P4x1;S2x3;Hall;, P7x1;S2x2;Hall;, P1x4;S2x3;Hall;, P4x5;S1x2;Hall;...(8)), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.RecursiveBacktrackerMazeGenerator)
RecursiveBacktrackerMazeGenerator: Generating maze 10x8 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P1x1;S2x2;Hall;, P4x1;S2x3;Hall;, P7x1;S2x2;Hall;, P1x4;S2x3;Hall;, P4x5;S1x2;Hall;...(8)), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.RecursiveBacktrackerMazeGenerator)
RecursiveBacktrackerMazeGenerator: Generating maze 10x8 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P1x1;S2x2;Hall;, P4x1;S2x3;Hall;, P7x1;S2x2;Hall;, P1x4;S2x3;Hall;, P4x5;S1x2;Hall;...(8)), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.RecursiveBacktrackerMazeGenerator)
RecursiveBacktrackerMazeGenerator: Generating maze 10x8 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P1x1;S2x2;Hall;, P4x1;S2x3;Hall;, P7x1;S2x2;Hall;, P1x4;S2x3;Hall;, P4x5;S1x2;Hall;...(8)), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.RecursiveBacktrackerMazeGenerator)
RecursiveBacktrackerMazeGenerator: Generating maze 10x8 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P1x1;S2x2;Hall;, P4x1;S2x3;Hall;, P7x1;S2x2;Hall;, P1x4;S2x3;Hall;, P4x5;S1x2;Hall;...(8)), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.RecursiveBacktrackerMazeGenerator)
]]></output>
                </test-case>
                <test-case id="1-1225" name="DenseWalkways(PlayersWorlds.Maps.Maze.RecursiveBacktrackerMazeGenerator,Fill)" fullname="PlayersWorlds.Maps.Maze.MazeGeneratorAreasTest.DenseWalkways(PlayersWorlds.Maps.Maze.RecursiveBacktrackerMazeGenerator,Fill)" methodname="DenseWalkways" classname="PlayersWorlds.Maps.Maze.MazeGeneratorAreasTest" runstate="Runnable" seed="771345317" result="Passed" start-time="2024-02-20T15:16:40.6006580Z" end-time="2024-02-20T15:16:40.6209720Z" duration="0.020314" asserts="30">
                  <output><![CDATA[RecursiveBacktrackerMazeGenerator: Generating maze 10x8 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P1x1;S2x2;Fill;, P4x1;S2x3;Fill;, P7x1;S2x2;Fill;, P1x4;S2x3;Fill;, P4x5;S1x2;Fill;...(8)), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.RecursiveBacktrackerMazeGenerator)
RecursiveBacktrackerMazeGenerator: Generating maze 10x8 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P1x1;S2x2;Fill;, P4x1;S2x3;Fill;, P7x1;S2x2;Fill;, P1x4;S2x3;Fill;, P4x5;S1x2;Fill;...(8)), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.RecursiveBacktrackerMazeGenerator)
RecursiveBacktrackerMazeGenerator: Generating maze 10x8 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P1x1;S2x2;Fill;, P4x1;S2x3;Fill;, P7x1;S2x2;Fill;, P1x4;S2x3;Fill;, P4x5;S1x2;Fill;...(8)), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.RecursiveBacktrackerMazeGenerator)
RecursiveBacktrackerMazeGenerator: Generating maze 10x8 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P1x1;S2x2;Fill;, P4x1;S2x3;Fill;, P7x1;S2x2;Fill;, P1x4;S2x3;Fill;, P4x5;S1x2;Fill;...(8)), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.RecursiveBacktrackerMazeGenerator)
RecursiveBacktrackerMazeGenerator: Generating maze 10x8 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P1x1;S2x2;Fill;, P4x1;S2x3;Fill;, P7x1;S2x2;Fill;, P1x4;S2x3;Fill;, P4x5;S1x2;Fill;...(8)), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.RecursiveBacktrackerMazeGenerator)
RecursiveBacktrackerMazeGenerator: Generating maze 10x8 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P1x1;S2x2;Fill;, P4x1;S2x3;Fill;, P7x1;S2x2;Fill;, P1x4;S2x3;Fill;, P4x5;S1x2;Fill;...(8)), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.RecursiveBacktrackerMazeGenerator)
RecursiveBacktrackerMazeGenerator: Generating maze 10x8 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P1x1;S2x2;Fill;, P4x1;S2x3;Fill;, P7x1;S2x2;Fill;, P1x4;S2x3;Fill;, P4x5;S1x2;Fill;...(8)), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.RecursiveBacktrackerMazeGenerator)
RecursiveBacktrackerMazeGenerator: Generating maze 10x8 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P1x1;S2x2;Fill;, P4x1;S2x3;Fill;, P7x1;S2x2;Fill;, P1x4;S2x3;Fill;, P4x5;S1x2;Fill;...(8)), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.RecursiveBacktrackerMazeGenerator)
RecursiveBacktrackerMazeGenerator: Generating maze 10x8 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P1x1;S2x2;Fill;, P4x1;S2x3;Fill;, P7x1;S2x2;Fill;, P1x4;S2x3;Fill;, P4x5;S1x2;Fill;...(8)), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.RecursiveBacktrackerMazeGenerator)
RecursiveBacktrackerMazeGenerator: Generating maze 10x8 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P1x1;S2x2;Fill;, P4x1;S2x3;Fill;, P7x1;S2x2;Fill;, P1x4;S2x3;Fill;, P4x5;S1x2;Fill;...(8)), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.RecursiveBacktrackerMazeGenerator)
]]></output>
                </test-case>
                <test-case id="1-1226" name="DenseWalkways(PlayersWorlds.Maps.Maze.SidewinderMazeGenerator,Cave)" fullname="PlayersWorlds.Maps.Maze.MazeGeneratorAreasTest.DenseWalkways(PlayersWorlds.Maps.Maze.SidewinderMazeGenerator,Cave)" methodname="DenseWalkways" classname="PlayersWorlds.Maps.Maze.MazeGeneratorAreasTest" runstate="Runnable" seed="1507453864" result="Passed" start-time="2024-02-20T15:16:40.6209820Z" end-time="2024-02-20T15:16:40.6479910Z" duration="0.027009" asserts="30">
                  <output><![CDATA[SidewinderMazeGenerator: Generating maze 10x8 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P1x1;S2x2;Cave;, P4x1;S2x3;Cave;, P7x1;S2x2;Cave;, P1x4;S2x3;Cave;, P4x5;S1x2;Cave;...(8)), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.SidewinderMazeGenerator)
SidewinderMazeGenerator: Generating maze 10x8 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P1x1;S2x2;Cave;, P4x1;S2x3;Cave;, P7x1;S2x2;Cave;, P1x4;S2x3;Cave;, P4x5;S1x2;Cave;...(8)), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.SidewinderMazeGenerator)
SidewinderMazeGenerator: Generating maze 10x8 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P1x1;S2x2;Cave;, P4x1;S2x3;Cave;, P7x1;S2x2;Cave;, P1x4;S2x3;Cave;, P4x5;S1x2;Cave;...(8)), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.SidewinderMazeGenerator)
SidewinderMazeGenerator: Generating maze 10x8 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P1x1;S2x2;Cave;, P4x1;S2x3;Cave;, P7x1;S2x2;Cave;, P1x4;S2x3;Cave;, P4x5;S1x2;Cave;...(8)), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.SidewinderMazeGenerator)
SidewinderMazeGenerator: Generating maze 10x8 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P1x1;S2x2;Cave;, P4x1;S2x3;Cave;, P7x1;S2x2;Cave;, P1x4;S2x3;Cave;, P4x5;S1x2;Cave;...(8)), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.SidewinderMazeGenerator)
SidewinderMazeGenerator: Generating maze 10x8 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P1x1;S2x2;Cave;, P4x1;S2x3;Cave;, P7x1;S2x2;Cave;, P1x4;S2x3;Cave;, P4x5;S1x2;Cave;...(8)), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.SidewinderMazeGenerator)
SidewinderMazeGenerator: Generating maze 10x8 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P1x1;S2x2;Cave;, P4x1;S2x3;Cave;, P7x1;S2x2;Cave;, P1x4;S2x3;Cave;, P4x5;S1x2;Cave;...(8)), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.SidewinderMazeGenerator)
SidewinderMazeGenerator: Generating maze 10x8 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P1x1;S2x2;Cave;, P4x1;S2x3;Cave;, P7x1;S2x2;Cave;, P1x4;S2x3;Cave;, P4x5;S1x2;Cave;...(8)), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.SidewinderMazeGenerator)
SidewinderMazeGenerator: Generating maze 10x8 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P1x1;S2x2;Cave;, P4x1;S2x3;Cave;, P7x1;S2x2;Cave;, P1x4;S2x3;Cave;, P4x5;S1x2;Cave;...(8)), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.SidewinderMazeGenerator)
SidewinderMazeGenerator: Generating maze 10x8 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P1x1;S2x2;Cave;, P4x1;S2x3;Cave;, P7x1;S2x2;Cave;, P1x4;S2x3;Cave;, P4x5;S1x2;Cave;...(8)), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.SidewinderMazeGenerator)
]]></output>
                </test-case>
                <test-case id="1-1227" name="DenseWalkways(PlayersWorlds.Maps.Maze.SidewinderMazeGenerator,Hall)" fullname="PlayersWorlds.Maps.Maze.MazeGeneratorAreasTest.DenseWalkways(PlayersWorlds.Maps.Maze.SidewinderMazeGenerator,Hall)" methodname="DenseWalkways" classname="PlayersWorlds.Maps.Maze.MazeGeneratorAreasTest" runstate="Runnable" seed="2018643523" result="Passed" start-time="2024-02-20T15:16:40.6480020Z" end-time="2024-02-20T15:16:40.6733600Z" duration="0.025358" asserts="30">
                  <output><![CDATA[SidewinderMazeGenerator: Generating maze 10x8 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P1x1;S2x2;Hall;, P4x1;S2x3;Hall;, P7x1;S2x2;Hall;, P1x4;S2x3;Hall;, P4x5;S1x2;Hall;...(8)), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.SidewinderMazeGenerator)
SidewinderMazeGenerator: Generating maze 10x8 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P1x1;S2x2;Hall;, P4x1;S2x3;Hall;, P7x1;S2x2;Hall;, P1x4;S2x3;Hall;, P4x5;S1x2;Hall;...(8)), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.SidewinderMazeGenerator)
SidewinderMazeGenerator: Generating maze 10x8 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P1x1;S2x2;Hall;, P4x1;S2x3;Hall;, P7x1;S2x2;Hall;, P1x4;S2x3;Hall;, P4x5;S1x2;Hall;...(8)), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.SidewinderMazeGenerator)
SidewinderMazeGenerator: Generating maze 10x8 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P1x1;S2x2;Hall;, P4x1;S2x3;Hall;, P7x1;S2x2;Hall;, P1x4;S2x3;Hall;, P4x5;S1x2;Hall;...(8)), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.SidewinderMazeGenerator)
SidewinderMazeGenerator: Generating maze 10x8 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P1x1;S2x2;Hall;, P4x1;S2x3;Hall;, P7x1;S2x2;Hall;, P1x4;S2x3;Hall;, P4x5;S1x2;Hall;...(8)), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.SidewinderMazeGenerator)
SidewinderMazeGenerator: Generating maze 10x8 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P1x1;S2x2;Hall;, P4x1;S2x3;Hall;, P7x1;S2x2;Hall;, P1x4;S2x3;Hall;, P4x5;S1x2;Hall;...(8)), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.SidewinderMazeGenerator)
SidewinderMazeGenerator: Generating maze 10x8 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P1x1;S2x2;Hall;, P4x1;S2x3;Hall;, P7x1;S2x2;Hall;, P1x4;S2x3;Hall;, P4x5;S1x2;Hall;...(8)), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.SidewinderMazeGenerator)
SidewinderMazeGenerator: Generating maze 10x8 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P1x1;S2x2;Hall;, P4x1;S2x3;Hall;, P7x1;S2x2;Hall;, P1x4;S2x3;Hall;, P4x5;S1x2;Hall;...(8)), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.SidewinderMazeGenerator)
SidewinderMazeGenerator: Generating maze 10x8 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P1x1;S2x2;Hall;, P4x1;S2x3;Hall;, P7x1;S2x2;Hall;, P1x4;S2x3;Hall;, P4x5;S1x2;Hall;...(8)), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.SidewinderMazeGenerator)
SidewinderMazeGenerator: Generating maze 10x8 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P1x1;S2x2;Hall;, P4x1;S2x3;Hall;, P7x1;S2x2;Hall;, P1x4;S2x3;Hall;, P4x5;S1x2;Hall;...(8)), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.SidewinderMazeGenerator)
]]></output>
                </test-case>
                <test-case id="1-1228" name="DenseWalkways(PlayersWorlds.Maps.Maze.SidewinderMazeGenerator,Fill)" fullname="PlayersWorlds.Maps.Maze.MazeGeneratorAreasTest.DenseWalkways(PlayersWorlds.Maps.Maze.SidewinderMazeGenerator,Fill)" methodname="DenseWalkways" classname="PlayersWorlds.Maps.Maze.MazeGeneratorAreasTest" runstate="Runnable" seed="1743991280" result="Passed" start-time="2024-02-20T15:16:40.6733700Z" end-time="2024-02-20T15:16:40.7059140Z" duration="0.032544" asserts="30">
                  <output><![CDATA[SidewinderMazeGenerator: Generating maze 10x8 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P1x1;S2x2;Fill;, P4x1;S2x3;Fill;, P7x1;S2x2;Fill;, P1x4;S2x3;Fill;, P4x5;S1x2;Fill;...(8)), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.SidewinderMazeGenerator)
SidewinderMazeGenerator: Generating maze 10x8 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P1x1;S2x2;Fill;, P4x1;S2x3;Fill;, P7x1;S2x2;Fill;, P1x4;S2x3;Fill;, P4x5;S1x2;Fill;...(8)), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.SidewinderMazeGenerator)
SidewinderMazeGenerator: Generating maze 10x8 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P1x1;S2x2;Fill;, P4x1;S2x3;Fill;, P7x1;S2x2;Fill;, P1x4;S2x3;Fill;, P4x5;S1x2;Fill;...(8)), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.SidewinderMazeGenerator)
SidewinderMazeGenerator: Generating maze 10x8 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P1x1;S2x2;Fill;, P4x1;S2x3;Fill;, P7x1;S2x2;Fill;, P1x4;S2x3;Fill;, P4x5;S1x2;Fill;...(8)), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.SidewinderMazeGenerator)
SidewinderMazeGenerator: Generating maze 10x8 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P1x1;S2x2;Fill;, P4x1;S2x3;Fill;, P7x1;S2x2;Fill;, P1x4;S2x3;Fill;, P4x5;S1x2;Fill;...(8)), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.SidewinderMazeGenerator)
SidewinderMazeGenerator: Generating maze 10x8 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P1x1;S2x2;Fill;, P4x1;S2x3;Fill;, P7x1;S2x2;Fill;, P1x4;S2x3;Fill;, P4x5;S1x2;Fill;...(8)), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.SidewinderMazeGenerator)
SidewinderMazeGenerator: Generating maze 10x8 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P1x1;S2x2;Fill;, P4x1;S2x3;Fill;, P7x1;S2x2;Fill;, P1x4;S2x3;Fill;, P4x5;S1x2;Fill;...(8)), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.SidewinderMazeGenerator)
SidewinderMazeGenerator: Generating maze 10x8 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P1x1;S2x2;Fill;, P4x1;S2x3;Fill;, P7x1;S2x2;Fill;, P1x4;S2x3;Fill;, P4x5;S1x2;Fill;...(8)), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.SidewinderMazeGenerator)
SidewinderMazeGenerator: Generating maze 10x8 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P1x1;S2x2;Fill;, P4x1;S2x3;Fill;, P7x1;S2x2;Fill;, P1x4;S2x3;Fill;, P4x5;S1x2;Fill;...(8)), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.SidewinderMazeGenerator)
SidewinderMazeGenerator: Generating maze 10x8 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P1x1;S2x2;Fill;, P4x1;S2x3;Fill;, P7x1;S2x2;Fill;, P1x4;S2x3;Fill;, P4x5;S1x2;Fill;...(8)), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.SidewinderMazeGenerator)
]]></output>
                </test-case>
                <test-case id="1-1229" name="DenseWalkways(PlayersWorlds.Maps.Maze.WilsonsMazeGenerator,Cave)" fullname="PlayersWorlds.Maps.Maze.MazeGeneratorAreasTest.DenseWalkways(PlayersWorlds.Maps.Maze.WilsonsMazeGenerator,Cave)" methodname="DenseWalkways" classname="PlayersWorlds.Maps.Maze.MazeGeneratorAreasTest" runstate="Runnable" seed="2106547445" result="Passed" start-time="2024-02-20T15:16:40.7059340Z" end-time="2024-02-20T15:16:40.7411150Z" duration="0.035181" asserts="30">
                  <output><![CDATA[WilsonsMazeGenerator: Generating maze 10x8 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P1x1;S2x2;Cave;, P4x1;S2x3;Cave;, P7x1;S2x2;Cave;, P1x4;S2x3;Cave;, P4x5;S1x2;Cave;...(8)), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.WilsonsMazeGenerator)
WilsonsMazeGenerator: Generating maze 10x8 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P1x1;S2x2;Cave;, P4x1;S2x3;Cave;, P7x1;S2x2;Cave;, P1x4;S2x3;Cave;, P4x5;S1x2;Cave;...(8)), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.WilsonsMazeGenerator)
WilsonsMazeGenerator: Generating maze 10x8 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P1x1;S2x2;Cave;, P4x1;S2x3;Cave;, P7x1;S2x2;Cave;, P1x4;S2x3;Cave;, P4x5;S1x2;Cave;...(8)), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.WilsonsMazeGenerator)
WilsonsMazeGenerator: Generating maze 10x8 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P1x1;S2x2;Cave;, P4x1;S2x3;Cave;, P7x1;S2x2;Cave;, P1x4;S2x3;Cave;, P4x5;S1x2;Cave;...(8)), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.WilsonsMazeGenerator)
WilsonsMazeGenerator: Generating maze 10x8 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P1x1;S2x2;Cave;, P4x1;S2x3;Cave;, P7x1;S2x2;Cave;, P1x4;S2x3;Cave;, P4x5;S1x2;Cave;...(8)), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.WilsonsMazeGenerator)
WilsonsMazeGenerator: Generating maze 10x8 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P1x1;S2x2;Cave;, P4x1;S2x3;Cave;, P7x1;S2x2;Cave;, P1x4;S2x3;Cave;, P4x5;S1x2;Cave;...(8)), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.WilsonsMazeGenerator)
WilsonsMazeGenerator: Generating maze 10x8 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P1x1;S2x2;Cave;, P4x1;S2x3;Cave;, P7x1;S2x2;Cave;, P1x4;S2x3;Cave;, P4x5;S1x2;Cave;...(8)), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.WilsonsMazeGenerator)
WilsonsMazeGenerator: Generating maze 10x8 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P1x1;S2x2;Cave;, P4x1;S2x3;Cave;, P7x1;S2x2;Cave;, P1x4;S2x3;Cave;, P4x5;S1x2;Cave;...(8)), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.WilsonsMazeGenerator)
WilsonsMazeGenerator: Generating maze 10x8 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P1x1;S2x2;Cave;, P4x1;S2x3;Cave;, P7x1;S2x2;Cave;, P1x4;S2x3;Cave;, P4x5;S1x2;Cave;...(8)), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.WilsonsMazeGenerator)
WilsonsMazeGenerator: Generating maze 10x8 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P1x1;S2x2;Cave;, P4x1;S2x3;Cave;, P7x1;S2x2;Cave;, P1x4;S2x3;Cave;, P4x5;S1x2;Cave;...(8)), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.WilsonsMazeGenerator)
]]></output>
                </test-case>
                <test-case id="1-1230" name="DenseWalkways(PlayersWorlds.Maps.Maze.WilsonsMazeGenerator,Hall)" fullname="PlayersWorlds.Maps.Maze.MazeGeneratorAreasTest.DenseWalkways(PlayersWorlds.Maps.Maze.WilsonsMazeGenerator,Hall)" methodname="DenseWalkways" classname="PlayersWorlds.Maps.Maze.MazeGeneratorAreasTest" runstate="Runnable" seed="1778436865" result="Passed" start-time="2024-02-20T15:16:40.7411340Z" end-time="2024-02-20T15:16:40.7756140Z" duration="0.034480" asserts="30">
                  <output><![CDATA[WilsonsMazeGenerator: Generating maze 10x8 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P1x1;S2x2;Hall;, P4x1;S2x3;Hall;, P7x1;S2x2;Hall;, P1x4;S2x3;Hall;, P4x5;S1x2;Hall;...(8)), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.WilsonsMazeGenerator)
WilsonsMazeGenerator: Generating maze 10x8 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P1x1;S2x2;Hall;, P4x1;S2x3;Hall;, P7x1;S2x2;Hall;, P1x4;S2x3;Hall;, P4x5;S1x2;Hall;...(8)), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.WilsonsMazeGenerator)
WilsonsMazeGenerator: Generating maze 10x8 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P1x1;S2x2;Hall;, P4x1;S2x3;Hall;, P7x1;S2x2;Hall;, P1x4;S2x3;Hall;, P4x5;S1x2;Hall;...(8)), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.WilsonsMazeGenerator)
WilsonsMazeGenerator: Generating maze 10x8 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P1x1;S2x2;Hall;, P4x1;S2x3;Hall;, P7x1;S2x2;Hall;, P1x4;S2x3;Hall;, P4x5;S1x2;Hall;...(8)), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.WilsonsMazeGenerator)
WilsonsMazeGenerator: Generating maze 10x8 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P1x1;S2x2;Hall;, P4x1;S2x3;Hall;, P7x1;S2x2;Hall;, P1x4;S2x3;Hall;, P4x5;S1x2;Hall;...(8)), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.WilsonsMazeGenerator)
WilsonsMazeGenerator: Generating maze 10x8 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P1x1;S2x2;Hall;, P4x1;S2x3;Hall;, P7x1;S2x2;Hall;, P1x4;S2x3;Hall;, P4x5;S1x2;Hall;...(8)), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.WilsonsMazeGenerator)
WilsonsMazeGenerator: Generating maze 10x8 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P1x1;S2x2;Hall;, P4x1;S2x3;Hall;, P7x1;S2x2;Hall;, P1x4;S2x3;Hall;, P4x5;S1x2;Hall;...(8)), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.WilsonsMazeGenerator)
WilsonsMazeGenerator: Generating maze 10x8 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P1x1;S2x2;Hall;, P4x1;S2x3;Hall;, P7x1;S2x2;Hall;, P1x4;S2x3;Hall;, P4x5;S1x2;Hall;...(8)), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.WilsonsMazeGenerator)
WilsonsMazeGenerator: Generating maze 10x8 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P1x1;S2x2;Hall;, P4x1;S2x3;Hall;, P7x1;S2x2;Hall;, P1x4;S2x3;Hall;, P4x5;S1x2;Hall;...(8)), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.WilsonsMazeGenerator)
WilsonsMazeGenerator: Generating maze 10x8 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P1x1;S2x2;Hall;, P4x1;S2x3;Hall;, P7x1;S2x2;Hall;, P1x4;S2x3;Hall;, P4x5;S1x2;Hall;...(8)), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.WilsonsMazeGenerator)
]]></output>
                </test-case>
                <test-case id="1-1231" name="DenseWalkways(PlayersWorlds.Maps.Maze.WilsonsMazeGenerator,Fill)" fullname="PlayersWorlds.Maps.Maze.MazeGeneratorAreasTest.DenseWalkways(PlayersWorlds.Maps.Maze.WilsonsMazeGenerator,Fill)" methodname="DenseWalkways" classname="PlayersWorlds.Maps.Maze.MazeGeneratorAreasTest" runstate="Runnable" seed="1893933357" result="Passed" start-time="2024-02-20T15:16:40.7756380Z" end-time="2024-02-20T15:16:40.7961890Z" duration="0.020552" asserts="30">
                  <output><![CDATA[WilsonsMazeGenerator: Generating maze 10x8 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P1x1;S2x2;Fill;, P4x1;S2x3;Fill;, P7x1;S2x2;Fill;, P1x4;S2x3;Fill;, P4x5;S1x2;Fill;...(8)), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.WilsonsMazeGenerator)
WilsonsMazeGenerator: Generating maze 10x8 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P1x1;S2x2;Fill;, P4x1;S2x3;Fill;, P7x1;S2x2;Fill;, P1x4;S2x3;Fill;, P4x5;S1x2;Fill;...(8)), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.WilsonsMazeGenerator)
WilsonsMazeGenerator: Generating maze 10x8 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P1x1;S2x2;Fill;, P4x1;S2x3;Fill;, P7x1;S2x2;Fill;, P1x4;S2x3;Fill;, P4x5;S1x2;Fill;...(8)), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.WilsonsMazeGenerator)
WilsonsMazeGenerator: Generating maze 10x8 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P1x1;S2x2;Fill;, P4x1;S2x3;Fill;, P7x1;S2x2;Fill;, P1x4;S2x3;Fill;, P4x5;S1x2;Fill;...(8)), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.WilsonsMazeGenerator)
WilsonsMazeGenerator: Generating maze 10x8 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P1x1;S2x2;Fill;, P4x1;S2x3;Fill;, P7x1;S2x2;Fill;, P1x4;S2x3;Fill;, P4x5;S1x2;Fill;...(8)), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.WilsonsMazeGenerator)
WilsonsMazeGenerator: Generating maze 10x8 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P1x1;S2x2;Fill;, P4x1;S2x3;Fill;, P7x1;S2x2;Fill;, P1x4;S2x3;Fill;, P4x5;S1x2;Fill;...(8)), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.WilsonsMazeGenerator)
WilsonsMazeGenerator: Generating maze 10x8 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P1x1;S2x2;Fill;, P4x1;S2x3;Fill;, P7x1;S2x2;Fill;, P1x4;S2x3;Fill;, P4x5;S1x2;Fill;...(8)), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.WilsonsMazeGenerator)
WilsonsMazeGenerator: Generating maze 10x8 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P1x1;S2x2;Fill;, P4x1;S2x3;Fill;, P7x1;S2x2;Fill;, P1x4;S2x3;Fill;, P4x5;S1x2;Fill;...(8)), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.WilsonsMazeGenerator)
WilsonsMazeGenerator: Generating maze 10x8 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P1x1;S2x2;Fill;, P4x1;S2x3;Fill;, P7x1;S2x2;Fill;, P1x4;S2x3;Fill;, P4x5;S1x2;Fill;...(8)), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.WilsonsMazeGenerator)
WilsonsMazeGenerator: Generating maze 10x8 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P1x1;S2x2;Fill;, P4x1;S2x3;Fill;, P7x1;S2x2;Fill;, P1x4;S2x3;Fill;, P4x5;S1x2;Fill;...(8)), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.WilsonsMazeGenerator)
]]></output>
                </test-case>
              </test-suite>
              <test-suite type="ParameterizedMethod" id="1-1161" name="FillAreasAreAppliedProperly" fullname="PlayersWorlds.Maps.Maze.MazeGeneratorAreasTest.FillAreasAreAppliedProperly" classname="PlayersWorlds.Maps.Maze.MazeGeneratorAreasTest" runstate="Runnable" testcasecount="6" result="Passed" start-time="2024-02-20T15:16:40.7962230Z" end-time="2024-02-20T15:16:40.9849330Z" duration="0.188710" total="6" passed="6" failed="0" warnings="0" inconclusive="0" skipped="0" asserts="240">
                <properties>
                  <property name="Repeat" value="10" />
                </properties>
                <test-case id="1-1155" name="FillAreasAreAppliedProperly(PlayersWorlds.Maps.Maze.AldousBroderMazeGenerator)" fullname="PlayersWorlds.Maps.Maze.MazeGeneratorAreasTest.FillAreasAreAppliedProperly(PlayersWorlds.Maps.Maze.AldousBroderMazeGenerator)" methodname="FillAreasAreAppliedProperly" classname="PlayersWorlds.Maps.Maze.MazeGeneratorAreasTest" runstate="Runnable" seed="1259830791" result="Passed" start-time="2024-02-20T15:16:40.7962490Z" end-time="2024-02-20T15:16:40.8449250Z" duration="0.048676" asserts="40">
                  <output><![CDATA[AldousBroderMazeGenerator: Generating maze 15x15 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x4;S3x4;Fill;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.AldousBroderMazeGenerator)
AldousBroderMazeGenerator: Generating maze 15x15 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x4;S3x4;Fill;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.AldousBroderMazeGenerator)
AldousBroderMazeGenerator: Generating maze 15x15 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x4;S3x4;Fill;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.AldousBroderMazeGenerator)
AldousBroderMazeGenerator: Generating maze 15x15 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x4;S3x4;Fill;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.AldousBroderMazeGenerator)
AldousBroderMazeGenerator: Generating maze 15x15 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x4;S3x4;Fill;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.AldousBroderMazeGenerator)
AldousBroderMazeGenerator: Generating maze 15x15 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x4;S3x4;Fill;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.AldousBroderMazeGenerator)
AldousBroderMazeGenerator: Generating maze 15x15 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x4;S3x4;Fill;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.AldousBroderMazeGenerator)
AldousBroderMazeGenerator: Generating maze 15x15 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x4;S3x4;Fill;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.AldousBroderMazeGenerator)
AldousBroderMazeGenerator: Generating maze 15x15 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x4;S3x4;Fill;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.AldousBroderMazeGenerator)
AldousBroderMazeGenerator: Generating maze 15x15 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x4;S3x4;Fill;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.AldousBroderMazeGenerator)
]]></output>
                </test-case>
                <test-case id="1-1156" name="FillAreasAreAppliedProperly(PlayersWorlds.Maps.Maze.BinaryTreeMazeGenerator)" fullname="PlayersWorlds.Maps.Maze.MazeGeneratorAreasTest.FillAreasAreAppliedProperly(PlayersWorlds.Maps.Maze.BinaryTreeMazeGenerator)" methodname="FillAreasAreAppliedProperly" classname="PlayersWorlds.Maps.Maze.MazeGeneratorAreasTest" runstate="Runnable" seed="360915076" result="Passed" start-time="2024-02-20T15:16:40.8449450Z" end-time="2024-02-20T15:16:40.8759070Z" duration="0.030962" asserts="40">
                  <output><![CDATA[BinaryTreeMazeGenerator: Generating maze 15x15 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x4;S3x4;Fill;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.BinaryTreeMazeGenerator)
BinaryTreeMazeGenerator: Generating maze 15x15 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x4;S3x4;Fill;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.BinaryTreeMazeGenerator)
BinaryTreeMazeGenerator: Generating maze 15x15 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x4;S3x4;Fill;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.BinaryTreeMazeGenerator)
BinaryTreeMazeGenerator: Generating maze 15x15 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x4;S3x4;Fill;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.BinaryTreeMazeGenerator)
BinaryTreeMazeGenerator: Generating maze 15x15 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x4;S3x4;Fill;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.BinaryTreeMazeGenerator)
BinaryTreeMazeGenerator: Generating maze 15x15 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x4;S3x4;Fill;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.BinaryTreeMazeGenerator)
BinaryTreeMazeGenerator: Generating maze 15x15 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x4;S3x4;Fill;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.BinaryTreeMazeGenerator)
BinaryTreeMazeGenerator: Generating maze 15x15 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x4;S3x4;Fill;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.BinaryTreeMazeGenerator)
BinaryTreeMazeGenerator: Generating maze 15x15 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x4;S3x4;Fill;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.BinaryTreeMazeGenerator)
BinaryTreeMazeGenerator: Generating maze 15x15 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x4;S3x4;Fill;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.BinaryTreeMazeGenerator)
]]></output>
                </test-case>
                <test-case id="1-1157" name="FillAreasAreAppliedProperly(PlayersWorlds.Maps.Maze.HuntAndKillMazeGenerator)" fullname="PlayersWorlds.Maps.Maze.MazeGeneratorAreasTest.FillAreasAreAppliedProperly(PlayersWorlds.Maps.Maze.HuntAndKillMazeGenerator)" methodname="FillAreasAreAppliedProperly" classname="PlayersWorlds.Maps.Maze.MazeGeneratorAreasTest" runstate="Runnable" seed="22400562" result="Passed" start-time="2024-02-20T15:16:40.8759240Z" end-time="2024-02-20T15:16:40.8993040Z" duration="0.023381" asserts="40">
                  <output><![CDATA[HuntAndKillMazeGenerator: Generating maze 15x15 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x4;S3x4;Fill;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.HuntAndKillMazeGenerator)
HuntAndKillMazeGenerator: Generating maze 15x15 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x4;S3x4;Fill;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.HuntAndKillMazeGenerator)
HuntAndKillMazeGenerator: Generating maze 15x15 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x4;S3x4;Fill;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.HuntAndKillMazeGenerator)
HuntAndKillMazeGenerator: Generating maze 15x15 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x4;S3x4;Fill;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.HuntAndKillMazeGenerator)
HuntAndKillMazeGenerator: Generating maze 15x15 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x4;S3x4;Fill;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.HuntAndKillMazeGenerator)
HuntAndKillMazeGenerator: Generating maze 15x15 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x4;S3x4;Fill;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.HuntAndKillMazeGenerator)
HuntAndKillMazeGenerator: Generating maze 15x15 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x4;S3x4;Fill;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.HuntAndKillMazeGenerator)
HuntAndKillMazeGenerator: Generating maze 15x15 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x4;S3x4;Fill;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.HuntAndKillMazeGenerator)
HuntAndKillMazeGenerator: Generating maze 15x15 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x4;S3x4;Fill;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.HuntAndKillMazeGenerator)
HuntAndKillMazeGenerator: Generating maze 15x15 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x4;S3x4;Fill;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.HuntAndKillMazeGenerator)
]]></output>
                </test-case>
                <test-case id="1-1158" name="FillAreasAreAppliedProperly(PlayersWorlds.Maps.Maze.RecursiveBacktrackerMazeGenerator)" fullname="PlayersWorlds.Maps.Maze.MazeGeneratorAreasTest.FillAreasAreAppliedProperly(PlayersWorlds.Maps.Maze.RecursiveBacktrackerMazeGenerator)" methodname="FillAreasAreAppliedProperly" classname="PlayersWorlds.Maps.Maze.MazeGeneratorAreasTest" runstate="Runnable" seed="1250475450" result="Passed" start-time="2024-02-20T15:16:40.8993160Z" end-time="2024-02-20T15:16:40.9231610Z" duration="0.023845" asserts="40">
                  <output><![CDATA[RecursiveBacktrackerMazeGenerator: Generating maze 15x15 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x4;S3x4;Fill;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.RecursiveBacktrackerMazeGenerator)
RecursiveBacktrackerMazeGenerator: Generating maze 15x15 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x4;S3x4;Fill;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.RecursiveBacktrackerMazeGenerator)
RecursiveBacktrackerMazeGenerator: Generating maze 15x15 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x4;S3x4;Fill;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.RecursiveBacktrackerMazeGenerator)
RecursiveBacktrackerMazeGenerator: Generating maze 15x15 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x4;S3x4;Fill;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.RecursiveBacktrackerMazeGenerator)
RecursiveBacktrackerMazeGenerator: Generating maze 15x15 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x4;S3x4;Fill;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.RecursiveBacktrackerMazeGenerator)
RecursiveBacktrackerMazeGenerator: Generating maze 15x15 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x4;S3x4;Fill;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.RecursiveBacktrackerMazeGenerator)
RecursiveBacktrackerMazeGenerator: Generating maze 15x15 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x4;S3x4;Fill;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.RecursiveBacktrackerMazeGenerator)
RecursiveBacktrackerMazeGenerator: Generating maze 15x15 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x4;S3x4;Fill;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.RecursiveBacktrackerMazeGenerator)
RecursiveBacktrackerMazeGenerator: Generating maze 15x15 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x4;S3x4;Fill;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.RecursiveBacktrackerMazeGenerator)
RecursiveBacktrackerMazeGenerator: Generating maze 15x15 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x4;S3x4;Fill;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.RecursiveBacktrackerMazeGenerator)
]]></output>
                </test-case>
                <test-case id="1-1159" name="FillAreasAreAppliedProperly(PlayersWorlds.Maps.Maze.SidewinderMazeGenerator)" fullname="PlayersWorlds.Maps.Maze.MazeGeneratorAreasTest.FillAreasAreAppliedProperly(PlayersWorlds.Maps.Maze.SidewinderMazeGenerator)" methodname="FillAreasAreAppliedProperly" classname="PlayersWorlds.Maps.Maze.MazeGeneratorAreasTest" runstate="Runnable" seed="2033054282" result="Passed" start-time="2024-02-20T15:16:40.9231800Z" end-time="2024-02-20T15:16:40.9572570Z" duration="0.034077" asserts="40">
                  <output><![CDATA[SidewinderMazeGenerator: Generating maze 15x15 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x4;S3x4;Fill;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.SidewinderMazeGenerator)
SidewinderMazeGenerator: Generating maze 15x15 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x4;S3x4;Fill;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.SidewinderMazeGenerator)
SidewinderMazeGenerator: Generating maze 15x15 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x4;S3x4;Fill;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.SidewinderMazeGenerator)
SidewinderMazeGenerator: Generating maze 15x15 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x4;S3x4;Fill;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.SidewinderMazeGenerator)
SidewinderMazeGenerator: Generating maze 15x15 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x4;S3x4;Fill;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.SidewinderMazeGenerator)
SidewinderMazeGenerator: Generating maze 15x15 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x4;S3x4;Fill;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.SidewinderMazeGenerator)
SidewinderMazeGenerator: Generating maze 15x15 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x4;S3x4;Fill;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.SidewinderMazeGenerator)
SidewinderMazeGenerator: Generating maze 15x15 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x4;S3x4;Fill;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.SidewinderMazeGenerator)
SidewinderMazeGenerator: Generating maze 15x15 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x4;S3x4;Fill;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.SidewinderMazeGenerator)
SidewinderMazeGenerator: Generating maze 15x15 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x4;S3x4;Fill;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.SidewinderMazeGenerator)
]]></output>
                </test-case>
                <test-case id="1-1160" name="FillAreasAreAppliedProperly(PlayersWorlds.Maps.Maze.WilsonsMazeGenerator)" fullname="PlayersWorlds.Maps.Maze.MazeGeneratorAreasTest.FillAreasAreAppliedProperly(PlayersWorlds.Maps.Maze.WilsonsMazeGenerator)" methodname="FillAreasAreAppliedProperly" classname="PlayersWorlds.Maps.Maze.MazeGeneratorAreasTest" runstate="Runnable" seed="98204979" result="Passed" start-time="2024-02-20T15:16:40.9572660Z" end-time="2024-02-20T15:16:40.9849200Z" duration="0.027654" asserts="40">
                  <output><![CDATA[WilsonsMazeGenerator: Generating maze 15x15 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x4;S3x4;Fill;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.WilsonsMazeGenerator)
WilsonsMazeGenerator: Generating maze 15x15 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x4;S3x4;Fill;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.WilsonsMazeGenerator)
WilsonsMazeGenerator: Generating maze 15x15 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x4;S3x4;Fill;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.WilsonsMazeGenerator)
WilsonsMazeGenerator: Generating maze 15x15 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x4;S3x4;Fill;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.WilsonsMazeGenerator)
WilsonsMazeGenerator: Generating maze 15x15 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x4;S3x4;Fill;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.WilsonsMazeGenerator)
WilsonsMazeGenerator: Generating maze 15x15 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x4;S3x4;Fill;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.WilsonsMazeGenerator)
WilsonsMazeGenerator: Generating maze 15x15 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x4;S3x4;Fill;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.WilsonsMazeGenerator)
WilsonsMazeGenerator: Generating maze 15x15 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x4;S3x4;Fill;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.WilsonsMazeGenerator)
WilsonsMazeGenerator: Generating maze 15x15 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x4;S3x4;Fill;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.WilsonsMazeGenerator)
WilsonsMazeGenerator: Generating maze 15x15 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x4;S3x4;Fill;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.WilsonsMazeGenerator)
]]></output>
                </test-case>
              </test-suite>
              <test-suite type="ParameterizedMethod" id="1-1168" name="HallAreasAreAppliedProperly" fullname="PlayersWorlds.Maps.Maze.MazeGeneratorAreasTest.HallAreasAreAppliedProperly" classname="PlayersWorlds.Maps.Maze.MazeGeneratorAreasTest" runstate="Runnable" testcasecount="6" result="Passed" start-time="2024-02-20T15:16:40.9849450Z" end-time="2024-02-20T15:16:49.1480080Z" duration="8.163064" total="6" passed="6" failed="0" warnings="0" inconclusive="0" skipped="0" asserts="600">
                <properties>
                  <property name="Repeat" value="10" />
                </properties>
                <test-case id="1-1162" name="HallAreasAreAppliedProperly(PlayersWorlds.Maps.Maze.AldousBroderMazeGenerator)" fullname="PlayersWorlds.Maps.Maze.MazeGeneratorAreasTest.HallAreasAreAppliedProperly(PlayersWorlds.Maps.Maze.AldousBroderMazeGenerator)" methodname="HallAreasAreAppliedProperly" classname="PlayersWorlds.Maps.Maze.MazeGeneratorAreasTest" runstate="Runnable" seed="1409082116" result="Passed" start-time="2024-02-20T15:16:40.9849630Z" end-time="2024-02-20T15:16:42.4256560Z" duration="1.440693" asserts="100">
                  <output><![CDATA[AldousBroderMazeGenerator: Generating maze 15x15 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P8x2;S4x5;Hall;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.AldousBroderMazeGenerator)
AldousBroderMazeGenerator: Generating maze 15x15 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P8x2;S4x5;Hall;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.AldousBroderMazeGenerator)
AldousBroderMazeGenerator: Generating maze 15x15 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P8x2;S4x5;Hall;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.AldousBroderMazeGenerator)
AldousBroderMazeGenerator: Generating maze 15x15 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P8x2;S4x5;Hall;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.AldousBroderMazeGenerator)
AldousBroderMazeGenerator: Generating maze 15x15 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P8x2;S4x5;Hall;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.AldousBroderMazeGenerator)
AldousBroderMazeGenerator: Generating maze 15x15 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P8x2;S4x5;Hall;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.AldousBroderMazeGenerator)
AldousBroderMazeGenerator: Generating maze 15x15 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P8x2;S4x5;Hall;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.AldousBroderMazeGenerator)
AldousBroderMazeGenerator: Generating maze 15x15 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P8x2;S4x5;Hall;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.AldousBroderMazeGenerator)
AldousBroderMazeGenerator: Generating maze 15x15 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P8x2;S4x5;Hall;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.AldousBroderMazeGenerator)
AldousBroderMazeGenerator: Generating maze 15x15 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P8x2;S4x5;Hall;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.AldousBroderMazeGenerator)
]]></output>
                </test-case>
                <test-case id="1-1163" name="HallAreasAreAppliedProperly(PlayersWorlds.Maps.Maze.BinaryTreeMazeGenerator)" fullname="PlayersWorlds.Maps.Maze.MazeGeneratorAreasTest.HallAreasAreAppliedProperly(PlayersWorlds.Maps.Maze.BinaryTreeMazeGenerator)" methodname="HallAreasAreAppliedProperly" classname="PlayersWorlds.Maps.Maze.MazeGeneratorAreasTest" runstate="Runnable" seed="1242500738" result="Passed" start-time="2024-02-20T15:16:42.4256700Z" end-time="2024-02-20T15:16:43.9089150Z" duration="1.483245" asserts="100">
                  <output><![CDATA[BinaryTreeMazeGenerator: Generating maze 15x15 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P8x2;S4x5;Hall;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.BinaryTreeMazeGenerator)
BinaryTreeMazeGenerator: Generating maze 15x15 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P8x2;S4x5;Hall;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.BinaryTreeMazeGenerator)
BinaryTreeMazeGenerator: Generating maze 15x15 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P8x2;S4x5;Hall;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.BinaryTreeMazeGenerator)
BinaryTreeMazeGenerator: Generating maze 15x15 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P8x2;S4x5;Hall;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.BinaryTreeMazeGenerator)
BinaryTreeMazeGenerator: Generating maze 15x15 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P8x2;S4x5;Hall;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.BinaryTreeMazeGenerator)
BinaryTreeMazeGenerator: Generating maze 15x15 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P8x2;S4x5;Hall;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.BinaryTreeMazeGenerator)
BinaryTreeMazeGenerator: Generating maze 15x15 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P8x2;S4x5;Hall;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.BinaryTreeMazeGenerator)
BinaryTreeMazeGenerator: Generating maze 15x15 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P8x2;S4x5;Hall;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.BinaryTreeMazeGenerator)
BinaryTreeMazeGenerator: Generating maze 15x15 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P8x2;S4x5;Hall;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.BinaryTreeMazeGenerator)
BinaryTreeMazeGenerator: Generating maze 15x15 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P8x2;S4x5;Hall;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.BinaryTreeMazeGenerator)
]]></output>
                </test-case>
                <test-case id="1-1164" name="HallAreasAreAppliedProperly(PlayersWorlds.Maps.Maze.HuntAndKillMazeGenerator)" fullname="PlayersWorlds.Maps.Maze.MazeGeneratorAreasTest.HallAreasAreAppliedProperly(PlayersWorlds.Maps.Maze.HuntAndKillMazeGenerator)" methodname="HallAreasAreAppliedProperly" classname="PlayersWorlds.Maps.Maze.MazeGeneratorAreasTest" runstate="Runnable" seed="637923091" result="Passed" start-time="2024-02-20T15:16:43.9089270Z" end-time="2024-02-20T15:16:45.1639020Z" duration="1.254976" asserts="100">
                  <output><![CDATA[HuntAndKillMazeGenerator: Generating maze 15x15 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P8x2;S4x5;Hall;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.HuntAndKillMazeGenerator)
HuntAndKillMazeGenerator: Generating maze 15x15 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P8x2;S4x5;Hall;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.HuntAndKillMazeGenerator)
HuntAndKillMazeGenerator: Generating maze 15x15 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P8x2;S4x5;Hall;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.HuntAndKillMazeGenerator)
HuntAndKillMazeGenerator: Generating maze 15x15 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P8x2;S4x5;Hall;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.HuntAndKillMazeGenerator)
HuntAndKillMazeGenerator: Generating maze 15x15 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P8x2;S4x5;Hall;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.HuntAndKillMazeGenerator)
HuntAndKillMazeGenerator: Generating maze 15x15 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P8x2;S4x5;Hall;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.HuntAndKillMazeGenerator)
HuntAndKillMazeGenerator: Generating maze 15x15 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P8x2;S4x5;Hall;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.HuntAndKillMazeGenerator)
HuntAndKillMazeGenerator: Generating maze 15x15 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P8x2;S4x5;Hall;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.HuntAndKillMazeGenerator)
HuntAndKillMazeGenerator: Generating maze 15x15 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P8x2;S4x5;Hall;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.HuntAndKillMazeGenerator)
HuntAndKillMazeGenerator: Generating maze 15x15 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P8x2;S4x5;Hall;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.HuntAndKillMazeGenerator)
]]></output>
                </test-case>
                <test-case id="1-1165" name="HallAreasAreAppliedProperly(PlayersWorlds.Maps.Maze.RecursiveBacktrackerMazeGenerator)" fullname="PlayersWorlds.Maps.Maze.MazeGeneratorAreasTest.HallAreasAreAppliedProperly(PlayersWorlds.Maps.Maze.RecursiveBacktrackerMazeGenerator)" methodname="HallAreasAreAppliedProperly" classname="PlayersWorlds.Maps.Maze.MazeGeneratorAreasTest" runstate="Runnable" seed="1711132171" result="Passed" start-time="2024-02-20T15:16:45.1639150Z" end-time="2024-02-20T15:16:46.2622790Z" duration="1.098365" asserts="100">
                  <output><![CDATA[RecursiveBacktrackerMazeGenerator: Generating maze 15x15 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P8x2;S4x5;Hall;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.RecursiveBacktrackerMazeGenerator)
RecursiveBacktrackerMazeGenerator: Generating maze 15x15 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P8x2;S4x5;Hall;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.RecursiveBacktrackerMazeGenerator)
RecursiveBacktrackerMazeGenerator: Generating maze 15x15 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P8x2;S4x5;Hall;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.RecursiveBacktrackerMazeGenerator)
RecursiveBacktrackerMazeGenerator: Generating maze 15x15 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P8x2;S4x5;Hall;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.RecursiveBacktrackerMazeGenerator)
RecursiveBacktrackerMazeGenerator: Generating maze 15x15 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P8x2;S4x5;Hall;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.RecursiveBacktrackerMazeGenerator)
RecursiveBacktrackerMazeGenerator: Generating maze 15x15 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P8x2;S4x5;Hall;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.RecursiveBacktrackerMazeGenerator)
RecursiveBacktrackerMazeGenerator: Generating maze 15x15 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P8x2;S4x5;Hall;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.RecursiveBacktrackerMazeGenerator)
RecursiveBacktrackerMazeGenerator: Generating maze 15x15 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P8x2;S4x5;Hall;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.RecursiveBacktrackerMazeGenerator)
RecursiveBacktrackerMazeGenerator: Generating maze 15x15 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P8x2;S4x5;Hall;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.RecursiveBacktrackerMazeGenerator)
RecursiveBacktrackerMazeGenerator: Generating maze 15x15 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P8x2;S4x5;Hall;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.RecursiveBacktrackerMazeGenerator)
]]></output>
                </test-case>
                <test-case id="1-1166" name="HallAreasAreAppliedProperly(PlayersWorlds.Maps.Maze.SidewinderMazeGenerator)" fullname="PlayersWorlds.Maps.Maze.MazeGeneratorAreasTest.HallAreasAreAppliedProperly(PlayersWorlds.Maps.Maze.SidewinderMazeGenerator)" methodname="HallAreasAreAppliedProperly" classname="PlayersWorlds.Maps.Maze.MazeGeneratorAreasTest" runstate="Runnable" seed="683818799" result="Passed" start-time="2024-02-20T15:16:46.2622980Z" end-time="2024-02-20T15:16:47.7525340Z" duration="1.490237" asserts="100">
                  <output><![CDATA[SidewinderMazeGenerator: Generating maze 15x15 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P8x2;S4x5;Hall;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.SidewinderMazeGenerator)
SidewinderMazeGenerator: Generating maze 15x15 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P8x2;S4x5;Hall;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.SidewinderMazeGenerator)
SidewinderMazeGenerator: Generating maze 15x15 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P8x2;S4x5;Hall;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.SidewinderMazeGenerator)
SidewinderMazeGenerator: Generating maze 15x15 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P8x2;S4x5;Hall;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.SidewinderMazeGenerator)
SidewinderMazeGenerator: Generating maze 15x15 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P8x2;S4x5;Hall;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.SidewinderMazeGenerator)
SidewinderMazeGenerator: Generating maze 15x15 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P8x2;S4x5;Hall;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.SidewinderMazeGenerator)
SidewinderMazeGenerator: Generating maze 15x15 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P8x2;S4x5;Hall;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.SidewinderMazeGenerator)
SidewinderMazeGenerator: Generating maze 15x15 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P8x2;S4x5;Hall;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.SidewinderMazeGenerator)
SidewinderMazeGenerator: Generating maze 15x15 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P8x2;S4x5;Hall;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.SidewinderMazeGenerator)
SidewinderMazeGenerator: Generating maze 15x15 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P8x2;S4x5;Hall;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.SidewinderMazeGenerator)
]]></output>
                </test-case>
                <test-case id="1-1167" name="HallAreasAreAppliedProperly(PlayersWorlds.Maps.Maze.WilsonsMazeGenerator)" fullname="PlayersWorlds.Maps.Maze.MazeGeneratorAreasTest.HallAreasAreAppliedProperly(PlayersWorlds.Maps.Maze.WilsonsMazeGenerator)" methodname="HallAreasAreAppliedProperly" classname="PlayersWorlds.Maps.Maze.MazeGeneratorAreasTest" runstate="Runnable" seed="1606789596" result="Passed" start-time="2024-02-20T15:16:47.7525540Z" end-time="2024-02-20T15:16:49.1479860Z" duration="1.395433" asserts="100">
                  <output><![CDATA[WilsonsMazeGenerator: Generating maze 15x15 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P8x2;S4x5;Hall;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.WilsonsMazeGenerator)
WilsonsMazeGenerator: Generating maze 15x15 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P8x2;S4x5;Hall;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.WilsonsMazeGenerator)
WilsonsMazeGenerator: Generating maze 15x15 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P8x2;S4x5;Hall;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.WilsonsMazeGenerator)
WilsonsMazeGenerator: Generating maze 15x15 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P8x2;S4x5;Hall;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.WilsonsMazeGenerator)
WilsonsMazeGenerator: Generating maze 15x15 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P8x2;S4x5;Hall;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.WilsonsMazeGenerator)
WilsonsMazeGenerator: Generating maze 15x15 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P8x2;S4x5;Hall;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.WilsonsMazeGenerator)
WilsonsMazeGenerator: Generating maze 15x15 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P8x2;S4x5;Hall;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.WilsonsMazeGenerator)
WilsonsMazeGenerator: Generating maze 15x15 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P8x2;S4x5;Hall;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.WilsonsMazeGenerator)
WilsonsMazeGenerator: Generating maze 15x15 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P8x2;S4x5;Hall;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.WilsonsMazeGenerator)
WilsonsMazeGenerator: Generating maze 15x15 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P8x2;S4x5;Hall;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.WilsonsMazeGenerator)
]]></output>
                </test-case>
              </test-suite>
              <test-suite type="ParameterizedMethod" id="1-1194" name="OverlappingAreasAreAppliedProperly" fullname="PlayersWorlds.Maps.Maze.MazeGeneratorAreasTest.OverlappingAreasAreAppliedProperly" classname="PlayersWorlds.Maps.Maze.MazeGeneratorAreasTest" runstate="Runnable" testcasecount="18" result="Passed" start-time="2024-02-20T15:16:49.1480230Z" end-time="2024-02-20T15:16:49.8513620Z" duration="0.703339" total="18" passed="18" failed="0" warnings="0" inconclusive="0" skipped="0" asserts="1320">
                <properties>
                  <property name="Repeat" value="10" />
                </properties>
                <test-case id="1-1176" name="OverlappingAreasAreAppliedProperly(PlayersWorlds.Maps.Maze.AldousBroderMazeGenerator,Cave)" fullname="PlayersWorlds.Maps.Maze.MazeGeneratorAreasTest.OverlappingAreasAreAppliedProperly(PlayersWorlds.Maps.Maze.AldousBroderMazeGenerator,Cave)" methodname="OverlappingAreasAreAppliedProperly" classname="PlayersWorlds.Maps.Maze.MazeGeneratorAreasTest" runstate="Runnable" seed="547022136" result="Passed" start-time="2024-02-20T15:16:49.1480530Z" end-time="2024-02-20T15:16:49.2113160Z" duration="0.063264" asserts="80">
                  <output><![CDATA[OAAAP(AldousBroderMazeGenerator, Cave)AldousBroderMazeGenerator: Generating maze 15x15 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x3;S4x7;Cave;, P4x8;S7x3;Cave;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.AldousBroderMazeGenerator)
OAAAP(AldousBroderMazeGenerator, Cave)AldousBroderMazeGenerator: Generating maze 15x15 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x3;S4x7;Cave;, P4x8;S7x3;Cave;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.AldousBroderMazeGenerator)
OAAAP(AldousBroderMazeGenerator, Cave)AldousBroderMazeGenerator: Generating maze 15x15 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x3;S4x7;Cave;, P4x8;S7x3;Cave;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.AldousBroderMazeGenerator)
OAAAP(AldousBroderMazeGenerator, Cave)AldousBroderMazeGenerator: Generating maze 15x15 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x3;S4x7;Cave;, P4x8;S7x3;Cave;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.AldousBroderMazeGenerator)
OAAAP(AldousBroderMazeGenerator, Cave)AldousBroderMazeGenerator: Generating maze 15x15 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x3;S4x7;Cave;, P4x8;S7x3;Cave;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.AldousBroderMazeGenerator)
OAAAP(AldousBroderMazeGenerator, Cave)AldousBroderMazeGenerator: Generating maze 15x15 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x3;S4x7;Cave;, P4x8;S7x3;Cave;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.AldousBroderMazeGenerator)
OAAAP(AldousBroderMazeGenerator, Cave)AldousBroderMazeGenerator: Generating maze 15x15 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x3;S4x7;Cave;, P4x8;S7x3;Cave;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.AldousBroderMazeGenerator)
OAAAP(AldousBroderMazeGenerator, Cave)AldousBroderMazeGenerator: Generating maze 15x15 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x3;S4x7;Cave;, P4x8;S7x3;Cave;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.AldousBroderMazeGenerator)
OAAAP(AldousBroderMazeGenerator, Cave)AldousBroderMazeGenerator: Generating maze 15x15 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x3;S4x7;Cave;, P4x8;S7x3;Cave;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.AldousBroderMazeGenerator)
OAAAP(AldousBroderMazeGenerator, Cave)AldousBroderMazeGenerator: Generating maze 15x15 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x3;S4x7;Cave;, P4x8;S7x3;Cave;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.AldousBroderMazeGenerator)
]]></output>
                </test-case>
                <test-case id="1-1177" name="OverlappingAreasAreAppliedProperly(PlayersWorlds.Maps.Maze.AldousBroderMazeGenerator,Hall)" fullname="PlayersWorlds.Maps.Maze.MazeGeneratorAreasTest.OverlappingAreasAreAppliedProperly(PlayersWorlds.Maps.Maze.AldousBroderMazeGenerator,Hall)" methodname="OverlappingAreasAreAppliedProperly" classname="PlayersWorlds.Maps.Maze.MazeGeneratorAreasTest" runstate="Runnable" seed="1644486985" result="Passed" start-time="2024-02-20T15:16:49.2113340Z" end-time="2024-02-20T15:16:49.2722150Z" duration="0.060881" asserts="80">
                  <output><![CDATA[OAAAP(AldousBroderMazeGenerator, Hall)AldousBroderMazeGenerator: Generating maze 15x15 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x3;S4x7;Hall;, P4x8;S7x3;Hall;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.AldousBroderMazeGenerator)
OAAAP(AldousBroderMazeGenerator, Hall)AldousBroderMazeGenerator: Generating maze 15x15 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x3;S4x7;Hall;, P4x8;S7x3;Hall;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.AldousBroderMazeGenerator)
OAAAP(AldousBroderMazeGenerator, Hall)AldousBroderMazeGenerator: Generating maze 15x15 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x3;S4x7;Hall;, P4x8;S7x3;Hall;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.AldousBroderMazeGenerator)
OAAAP(AldousBroderMazeGenerator, Hall)AldousBroderMazeGenerator: Generating maze 15x15 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x3;S4x7;Hall;, P4x8;S7x3;Hall;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.AldousBroderMazeGenerator)
OAAAP(AldousBroderMazeGenerator, Hall)AldousBroderMazeGenerator: Generating maze 15x15 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x3;S4x7;Hall;, P4x8;S7x3;Hall;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.AldousBroderMazeGenerator)
OAAAP(AldousBroderMazeGenerator, Hall)AldousBroderMazeGenerator: Generating maze 15x15 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x3;S4x7;Hall;, P4x8;S7x3;Hall;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.AldousBroderMazeGenerator)
OAAAP(AldousBroderMazeGenerator, Hall)AldousBroderMazeGenerator: Generating maze 15x15 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x3;S4x7;Hall;, P4x8;S7x3;Hall;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.AldousBroderMazeGenerator)
OAAAP(AldousBroderMazeGenerator, Hall)AldousBroderMazeGenerator: Generating maze 15x15 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x3;S4x7;Hall;, P4x8;S7x3;Hall;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.AldousBroderMazeGenerator)
OAAAP(AldousBroderMazeGenerator, Hall)AldousBroderMazeGenerator: Generating maze 15x15 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x3;S4x7;Hall;, P4x8;S7x3;Hall;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.AldousBroderMazeGenerator)
OAAAP(AldousBroderMazeGenerator, Hall)AldousBroderMazeGenerator: Generating maze 15x15 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x3;S4x7;Hall;, P4x8;S7x3;Hall;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.AldousBroderMazeGenerator)
]]></output>
                </test-case>
                <test-case id="1-1178" name="OverlappingAreasAreAppliedProperly(PlayersWorlds.Maps.Maze.AldousBroderMazeGenerator,Fill)" fullname="PlayersWorlds.Maps.Maze.MazeGeneratorAreasTest.OverlappingAreasAreAppliedProperly(PlayersWorlds.Maps.Maze.AldousBroderMazeGenerator,Fill)" methodname="OverlappingAreasAreAppliedProperly" classname="PlayersWorlds.Maps.Maze.MazeGeneratorAreasTest" runstate="Runnable" seed="1088706760" result="Passed" start-time="2024-02-20T15:16:49.2722330Z" end-time="2024-02-20T15:16:49.3266360Z" duration="0.054403" asserts="60">
                  <output><![CDATA[OAAAP(AldousBroderMazeGenerator, Fill)AldousBroderMazeGenerator: Generating maze 15x15 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x3;S4x7;Fill;, P4x8;S7x3;Fill;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.AldousBroderMazeGenerator)
OAAAP(AldousBroderMazeGenerator, Fill)AldousBroderMazeGenerator: Generating maze 15x15 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x3;S4x7;Fill;, P4x8;S7x3;Fill;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.AldousBroderMazeGenerator)
OAAAP(AldousBroderMazeGenerator, Fill)AldousBroderMazeGenerator: Generating maze 15x15 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x3;S4x7;Fill;, P4x8;S7x3;Fill;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.AldousBroderMazeGenerator)
OAAAP(AldousBroderMazeGenerator, Fill)AldousBroderMazeGenerator: Generating maze 15x15 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x3;S4x7;Fill;, P4x8;S7x3;Fill;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.AldousBroderMazeGenerator)
OAAAP(AldousBroderMazeGenerator, Fill)AldousBroderMazeGenerator: Generating maze 15x15 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x3;S4x7;Fill;, P4x8;S7x3;Fill;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.AldousBroderMazeGenerator)
OAAAP(AldousBroderMazeGenerator, Fill)AldousBroderMazeGenerator: Generating maze 15x15 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x3;S4x7;Fill;, P4x8;S7x3;Fill;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.AldousBroderMazeGenerator)
OAAAP(AldousBroderMazeGenerator, Fill)AldousBroderMazeGenerator: Generating maze 15x15 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x3;S4x7;Fill;, P4x8;S7x3;Fill;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.AldousBroderMazeGenerator)
OAAAP(AldousBroderMazeGenerator, Fill)AldousBroderMazeGenerator: Generating maze 15x15 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x3;S4x7;Fill;, P4x8;S7x3;Fill;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.AldousBroderMazeGenerator)
OAAAP(AldousBroderMazeGenerator, Fill)AldousBroderMazeGenerator: Generating maze 15x15 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x3;S4x7;Fill;, P4x8;S7x3;Fill;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.AldousBroderMazeGenerator)
OAAAP(AldousBroderMazeGenerator, Fill)AldousBroderMazeGenerator: Generating maze 15x15 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x3;S4x7;Fill;, P4x8;S7x3;Fill;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.AldousBroderMazeGenerator)
]]></output>
                </test-case>
                <test-case id="1-1179" name="OverlappingAreasAreAppliedProperly(PlayersWorlds.Maps.Maze.BinaryTreeMazeGenerator,Cave)" fullname="PlayersWorlds.Maps.Maze.MazeGeneratorAreasTest.OverlappingAreasAreAppliedProperly(PlayersWorlds.Maps.Maze.BinaryTreeMazeGenerator,Cave)" methodname="OverlappingAreasAreAppliedProperly" classname="PlayersWorlds.Maps.Maze.MazeGeneratorAreasTest" runstate="Runnable" seed="1191498650" result="Passed" start-time="2024-02-20T15:16:49.3266530Z" end-time="2024-02-20T15:16:49.3700390Z" duration="0.043386" asserts="80">
                  <output><![CDATA[OAAAP(BinaryTreeMazeGenerator, Cave)BinaryTreeMazeGenerator: Generating maze 15x15 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x3;S4x7;Cave;, P4x8;S7x3;Cave;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.BinaryTreeMazeGenerator)
OAAAP(BinaryTreeMazeGenerator, Cave)BinaryTreeMazeGenerator: Generating maze 15x15 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x3;S4x7;Cave;, P4x8;S7x3;Cave;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.BinaryTreeMazeGenerator)
OAAAP(BinaryTreeMazeGenerator, Cave)BinaryTreeMazeGenerator: Generating maze 15x15 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x3;S4x7;Cave;, P4x8;S7x3;Cave;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.BinaryTreeMazeGenerator)
OAAAP(BinaryTreeMazeGenerator, Cave)BinaryTreeMazeGenerator: Generating maze 15x15 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x3;S4x7;Cave;, P4x8;S7x3;Cave;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.BinaryTreeMazeGenerator)
OAAAP(BinaryTreeMazeGenerator, Cave)BinaryTreeMazeGenerator: Generating maze 15x15 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x3;S4x7;Cave;, P4x8;S7x3;Cave;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.BinaryTreeMazeGenerator)
OAAAP(BinaryTreeMazeGenerator, Cave)BinaryTreeMazeGenerator: Generating maze 15x15 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x3;S4x7;Cave;, P4x8;S7x3;Cave;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.BinaryTreeMazeGenerator)
OAAAP(BinaryTreeMazeGenerator, Cave)BinaryTreeMazeGenerator: Generating maze 15x15 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x3;S4x7;Cave;, P4x8;S7x3;Cave;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.BinaryTreeMazeGenerator)
OAAAP(BinaryTreeMazeGenerator, Cave)BinaryTreeMazeGenerator: Generating maze 15x15 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x3;S4x7;Cave;, P4x8;S7x3;Cave;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.BinaryTreeMazeGenerator)
OAAAP(BinaryTreeMazeGenerator, Cave)BinaryTreeMazeGenerator: Generating maze 15x15 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x3;S4x7;Cave;, P4x8;S7x3;Cave;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.BinaryTreeMazeGenerator)
OAAAP(BinaryTreeMazeGenerator, Cave)BinaryTreeMazeGenerator: Generating maze 15x15 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x3;S4x7;Cave;, P4x8;S7x3;Cave;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.BinaryTreeMazeGenerator)
]]></output>
                </test-case>
                <test-case id="1-1180" name="OverlappingAreasAreAppliedProperly(PlayersWorlds.Maps.Maze.BinaryTreeMazeGenerator,Hall)" fullname="PlayersWorlds.Maps.Maze.MazeGeneratorAreasTest.OverlappingAreasAreAppliedProperly(PlayersWorlds.Maps.Maze.BinaryTreeMazeGenerator,Hall)" methodname="OverlappingAreasAreAppliedProperly" classname="PlayersWorlds.Maps.Maze.MazeGeneratorAreasTest" runstate="Runnable" seed="1144717256" result="Passed" start-time="2024-02-20T15:16:49.3700580Z" end-time="2024-02-20T15:16:49.4098540Z" duration="0.039796" asserts="80">
                  <output><![CDATA[OAAAP(BinaryTreeMazeGenerator, Hall)BinaryTreeMazeGenerator: Generating maze 15x15 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x3;S4x7;Hall;, P4x8;S7x3;Hall;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.BinaryTreeMazeGenerator)
OAAAP(BinaryTreeMazeGenerator, Hall)BinaryTreeMazeGenerator: Generating maze 15x15 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x3;S4x7;Hall;, P4x8;S7x3;Hall;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.BinaryTreeMazeGenerator)
OAAAP(BinaryTreeMazeGenerator, Hall)BinaryTreeMazeGenerator: Generating maze 15x15 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x3;S4x7;Hall;, P4x8;S7x3;Hall;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.BinaryTreeMazeGenerator)
OAAAP(BinaryTreeMazeGenerator, Hall)BinaryTreeMazeGenerator: Generating maze 15x15 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x3;S4x7;Hall;, P4x8;S7x3;Hall;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.BinaryTreeMazeGenerator)
OAAAP(BinaryTreeMazeGenerator, Hall)BinaryTreeMazeGenerator: Generating maze 15x15 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x3;S4x7;Hall;, P4x8;S7x3;Hall;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.BinaryTreeMazeGenerator)
OAAAP(BinaryTreeMazeGenerator, Hall)BinaryTreeMazeGenerator: Generating maze 15x15 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x3;S4x7;Hall;, P4x8;S7x3;Hall;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.BinaryTreeMazeGenerator)
OAAAP(BinaryTreeMazeGenerator, Hall)BinaryTreeMazeGenerator: Generating maze 15x15 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x3;S4x7;Hall;, P4x8;S7x3;Hall;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.BinaryTreeMazeGenerator)
OAAAP(BinaryTreeMazeGenerator, Hall)BinaryTreeMazeGenerator: Generating maze 15x15 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x3;S4x7;Hall;, P4x8;S7x3;Hall;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.BinaryTreeMazeGenerator)
OAAAP(BinaryTreeMazeGenerator, Hall)BinaryTreeMazeGenerator: Generating maze 15x15 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x3;S4x7;Hall;, P4x8;S7x3;Hall;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.BinaryTreeMazeGenerator)
OAAAP(BinaryTreeMazeGenerator, Hall)BinaryTreeMazeGenerator: Generating maze 15x15 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x3;S4x7;Hall;, P4x8;S7x3;Hall;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.BinaryTreeMazeGenerator)
]]></output>
                </test-case>
                <test-case id="1-1181" name="OverlappingAreasAreAppliedProperly(PlayersWorlds.Maps.Maze.BinaryTreeMazeGenerator,Fill)" fullname="PlayersWorlds.Maps.Maze.MazeGeneratorAreasTest.OverlappingAreasAreAppliedProperly(PlayersWorlds.Maps.Maze.BinaryTreeMazeGenerator,Fill)" methodname="OverlappingAreasAreAppliedProperly" classname="PlayersWorlds.Maps.Maze.MazeGeneratorAreasTest" runstate="Runnable" seed="889207489" result="Passed" start-time="2024-02-20T15:16:49.4098700Z" end-time="2024-02-20T15:16:49.4395740Z" duration="0.029704" asserts="60">
                  <output><![CDATA[OAAAP(BinaryTreeMazeGenerator, Fill)BinaryTreeMazeGenerator: Generating maze 15x15 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x3;S4x7;Fill;, P4x8;S7x3;Fill;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.BinaryTreeMazeGenerator)
OAAAP(BinaryTreeMazeGenerator, Fill)BinaryTreeMazeGenerator: Generating maze 15x15 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x3;S4x7;Fill;, P4x8;S7x3;Fill;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.BinaryTreeMazeGenerator)
OAAAP(BinaryTreeMazeGenerator, Fill)BinaryTreeMazeGenerator: Generating maze 15x15 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x3;S4x7;Fill;, P4x8;S7x3;Fill;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.BinaryTreeMazeGenerator)
OAAAP(BinaryTreeMazeGenerator, Fill)BinaryTreeMazeGenerator: Generating maze 15x15 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x3;S4x7;Fill;, P4x8;S7x3;Fill;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.BinaryTreeMazeGenerator)
OAAAP(BinaryTreeMazeGenerator, Fill)BinaryTreeMazeGenerator: Generating maze 15x15 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x3;S4x7;Fill;, P4x8;S7x3;Fill;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.BinaryTreeMazeGenerator)
OAAAP(BinaryTreeMazeGenerator, Fill)BinaryTreeMazeGenerator: Generating maze 15x15 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x3;S4x7;Fill;, P4x8;S7x3;Fill;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.BinaryTreeMazeGenerator)
OAAAP(BinaryTreeMazeGenerator, Fill)BinaryTreeMazeGenerator: Generating maze 15x15 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x3;S4x7;Fill;, P4x8;S7x3;Fill;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.BinaryTreeMazeGenerator)
OAAAP(BinaryTreeMazeGenerator, Fill)BinaryTreeMazeGenerator: Generating maze 15x15 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x3;S4x7;Fill;, P4x8;S7x3;Fill;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.BinaryTreeMazeGenerator)
OAAAP(BinaryTreeMazeGenerator, Fill)BinaryTreeMazeGenerator: Generating maze 15x15 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x3;S4x7;Fill;, P4x8;S7x3;Fill;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.BinaryTreeMazeGenerator)
OAAAP(BinaryTreeMazeGenerator, Fill)BinaryTreeMazeGenerator: Generating maze 15x15 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x3;S4x7;Fill;, P4x8;S7x3;Fill;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.BinaryTreeMazeGenerator)
]]></output>
                </test-case>
                <test-case id="1-1182" name="OverlappingAreasAreAppliedProperly(PlayersWorlds.Maps.Maze.HuntAndKillMazeGenerator,Cave)" fullname="PlayersWorlds.Maps.Maze.MazeGeneratorAreasTest.OverlappingAreasAreAppliedProperly(PlayersWorlds.Maps.Maze.HuntAndKillMazeGenerator,Cave)" methodname="OverlappingAreasAreAppliedProperly" classname="PlayersWorlds.Maps.Maze.MazeGeneratorAreasTest" runstate="Runnable" seed="698584202" result="Passed" start-time="2024-02-20T15:16:49.4395920Z" end-time="2024-02-20T15:16:49.4760830Z" duration="0.036491" asserts="80">
                  <output><![CDATA[OAAAP(HuntAndKillMazeGenerator, Cave)HuntAndKillMazeGenerator: Generating maze 15x15 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x3;S4x7;Cave;, P4x8;S7x3;Cave;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.HuntAndKillMazeGenerator)
OAAAP(HuntAndKillMazeGenerator, Cave)HuntAndKillMazeGenerator: Generating maze 15x15 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x3;S4x7;Cave;, P4x8;S7x3;Cave;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.HuntAndKillMazeGenerator)
OAAAP(HuntAndKillMazeGenerator, Cave)HuntAndKillMazeGenerator: Generating maze 15x15 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x3;S4x7;Cave;, P4x8;S7x3;Cave;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.HuntAndKillMazeGenerator)
OAAAP(HuntAndKillMazeGenerator, Cave)HuntAndKillMazeGenerator: Generating maze 15x15 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x3;S4x7;Cave;, P4x8;S7x3;Cave;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.HuntAndKillMazeGenerator)
OAAAP(HuntAndKillMazeGenerator, Cave)HuntAndKillMazeGenerator: Generating maze 15x15 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x3;S4x7;Cave;, P4x8;S7x3;Cave;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.HuntAndKillMazeGenerator)
OAAAP(HuntAndKillMazeGenerator, Cave)HuntAndKillMazeGenerator: Generating maze 15x15 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x3;S4x7;Cave;, P4x8;S7x3;Cave;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.HuntAndKillMazeGenerator)
OAAAP(HuntAndKillMazeGenerator, Cave)HuntAndKillMazeGenerator: Generating maze 15x15 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x3;S4x7;Cave;, P4x8;S7x3;Cave;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.HuntAndKillMazeGenerator)
OAAAP(HuntAndKillMazeGenerator, Cave)HuntAndKillMazeGenerator: Generating maze 15x15 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x3;S4x7;Cave;, P4x8;S7x3;Cave;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.HuntAndKillMazeGenerator)
OAAAP(HuntAndKillMazeGenerator, Cave)HuntAndKillMazeGenerator: Generating maze 15x15 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x3;S4x7;Cave;, P4x8;S7x3;Cave;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.HuntAndKillMazeGenerator)
OAAAP(HuntAndKillMazeGenerator, Cave)HuntAndKillMazeGenerator: Generating maze 15x15 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x3;S4x7;Cave;, P4x8;S7x3;Cave;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.HuntAndKillMazeGenerator)
]]></output>
                </test-case>
                <test-case id="1-1183" name="OverlappingAreasAreAppliedProperly(PlayersWorlds.Maps.Maze.HuntAndKillMazeGenerator,Hall)" fullname="PlayersWorlds.Maps.Maze.MazeGeneratorAreasTest.OverlappingAreasAreAppliedProperly(PlayersWorlds.Maps.Maze.HuntAndKillMazeGenerator,Hall)" methodname="OverlappingAreasAreAppliedProperly" classname="PlayersWorlds.Maps.Maze.MazeGeneratorAreasTest" runstate="Runnable" seed="2085571673" result="Passed" start-time="2024-02-20T15:16:49.4760950Z" end-time="2024-02-20T15:16:49.5074220Z" duration="0.031327" asserts="80">
                  <output><![CDATA[OAAAP(HuntAndKillMazeGenerator, Hall)HuntAndKillMazeGenerator: Generating maze 15x15 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x3;S4x7;Hall;, P4x8;S7x3;Hall;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.HuntAndKillMazeGenerator)
OAAAP(HuntAndKillMazeGenerator, Hall)HuntAndKillMazeGenerator: Generating maze 15x15 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x3;S4x7;Hall;, P4x8;S7x3;Hall;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.HuntAndKillMazeGenerator)
OAAAP(HuntAndKillMazeGenerator, Hall)HuntAndKillMazeGenerator: Generating maze 15x15 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x3;S4x7;Hall;, P4x8;S7x3;Hall;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.HuntAndKillMazeGenerator)
OAAAP(HuntAndKillMazeGenerator, Hall)HuntAndKillMazeGenerator: Generating maze 15x15 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x3;S4x7;Hall;, P4x8;S7x3;Hall;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.HuntAndKillMazeGenerator)
OAAAP(HuntAndKillMazeGenerator, Hall)HuntAndKillMazeGenerator: Generating maze 15x15 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x3;S4x7;Hall;, P4x8;S7x3;Hall;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.HuntAndKillMazeGenerator)
OAAAP(HuntAndKillMazeGenerator, Hall)HuntAndKillMazeGenerator: Generating maze 15x15 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x3;S4x7;Hall;, P4x8;S7x3;Hall;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.HuntAndKillMazeGenerator)
OAAAP(HuntAndKillMazeGenerator, Hall)HuntAndKillMazeGenerator: Generating maze 15x15 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x3;S4x7;Hall;, P4x8;S7x3;Hall;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.HuntAndKillMazeGenerator)
OAAAP(HuntAndKillMazeGenerator, Hall)HuntAndKillMazeGenerator: Generating maze 15x15 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x3;S4x7;Hall;, P4x8;S7x3;Hall;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.HuntAndKillMazeGenerator)
OAAAP(HuntAndKillMazeGenerator, Hall)HuntAndKillMazeGenerator: Generating maze 15x15 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x3;S4x7;Hall;, P4x8;S7x3;Hall;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.HuntAndKillMazeGenerator)
OAAAP(HuntAndKillMazeGenerator, Hall)HuntAndKillMazeGenerator: Generating maze 15x15 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x3;S4x7;Hall;, P4x8;S7x3;Hall;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.HuntAndKillMazeGenerator)
]]></output>
                </test-case>
                <test-case id="1-1184" name="OverlappingAreasAreAppliedProperly(PlayersWorlds.Maps.Maze.HuntAndKillMazeGenerator,Fill)" fullname="PlayersWorlds.Maps.Maze.MazeGeneratorAreasTest.OverlappingAreasAreAppliedProperly(PlayersWorlds.Maps.Maze.HuntAndKillMazeGenerator,Fill)" methodname="OverlappingAreasAreAppliedProperly" classname="PlayersWorlds.Maps.Maze.MazeGeneratorAreasTest" runstate="Runnable" seed="1812053894" result="Passed" start-time="2024-02-20T15:16:49.5074390Z" end-time="2024-02-20T15:16:49.5306690Z" duration="0.023230" asserts="60">
                  <output><![CDATA[OAAAP(HuntAndKillMazeGenerator, Fill)HuntAndKillMazeGenerator: Generating maze 15x15 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x3;S4x7;Fill;, P4x8;S7x3;Fill;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.HuntAndKillMazeGenerator)
OAAAP(HuntAndKillMazeGenerator, Fill)HuntAndKillMazeGenerator: Generating maze 15x15 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x3;S4x7;Fill;, P4x8;S7x3;Fill;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.HuntAndKillMazeGenerator)
OAAAP(HuntAndKillMazeGenerator, Fill)HuntAndKillMazeGenerator: Generating maze 15x15 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x3;S4x7;Fill;, P4x8;S7x3;Fill;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.HuntAndKillMazeGenerator)
OAAAP(HuntAndKillMazeGenerator, Fill)HuntAndKillMazeGenerator: Generating maze 15x15 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x3;S4x7;Fill;, P4x8;S7x3;Fill;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.HuntAndKillMazeGenerator)
OAAAP(HuntAndKillMazeGenerator, Fill)HuntAndKillMazeGenerator: Generating maze 15x15 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x3;S4x7;Fill;, P4x8;S7x3;Fill;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.HuntAndKillMazeGenerator)
OAAAP(HuntAndKillMazeGenerator, Fill)HuntAndKillMazeGenerator: Generating maze 15x15 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x3;S4x7;Fill;, P4x8;S7x3;Fill;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.HuntAndKillMazeGenerator)
OAAAP(HuntAndKillMazeGenerator, Fill)HuntAndKillMazeGenerator: Generating maze 15x15 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x3;S4x7;Fill;, P4x8;S7x3;Fill;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.HuntAndKillMazeGenerator)
OAAAP(HuntAndKillMazeGenerator, Fill)HuntAndKillMazeGenerator: Generating maze 15x15 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x3;S4x7;Fill;, P4x8;S7x3;Fill;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.HuntAndKillMazeGenerator)
OAAAP(HuntAndKillMazeGenerator, Fill)HuntAndKillMazeGenerator: Generating maze 15x15 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x3;S4x7;Fill;, P4x8;S7x3;Fill;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.HuntAndKillMazeGenerator)
OAAAP(HuntAndKillMazeGenerator, Fill)HuntAndKillMazeGenerator: Generating maze 15x15 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x3;S4x7;Fill;, P4x8;S7x3;Fill;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.HuntAndKillMazeGenerator)
]]></output>
                </test-case>
                <test-case id="1-1185" name="OverlappingAreasAreAppliedProperly(PlayersWorlds.Maps.Maze.RecursiveBacktrackerMazeGenerator,Cave)" fullname="PlayersWorlds.Maps.Maze.MazeGeneratorAreasTest.OverlappingAreasAreAppliedProperly(PlayersWorlds.Maps.Maze.RecursiveBacktrackerMazeGenerator,Cave)" methodname="OverlappingAreasAreAppliedProperly" classname="PlayersWorlds.Maps.Maze.MazeGeneratorAreasTest" runstate="Runnable" seed="1408808251" result="Passed" start-time="2024-02-20T15:16:49.5306820Z" end-time="2024-02-20T15:16:49.5687390Z" duration="0.038058" asserts="80">
                  <output><![CDATA[OAAAP(RecursiveBacktrackerMazeGenerator, Cave)RecursiveBacktrackerMazeGenerator: Generating maze 15x15 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x3;S4x7;Cave;, P4x8;S7x3;Cave;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.RecursiveBacktrackerMazeGenerator)
OAAAP(RecursiveBacktrackerMazeGenerator, Cave)RecursiveBacktrackerMazeGenerator: Generating maze 15x15 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x3;S4x7;Cave;, P4x8;S7x3;Cave;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.RecursiveBacktrackerMazeGenerator)
OAAAP(RecursiveBacktrackerMazeGenerator, Cave)RecursiveBacktrackerMazeGenerator: Generating maze 15x15 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x3;S4x7;Cave;, P4x8;S7x3;Cave;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.RecursiveBacktrackerMazeGenerator)
OAAAP(RecursiveBacktrackerMazeGenerator, Cave)RecursiveBacktrackerMazeGenerator: Generating maze 15x15 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x3;S4x7;Cave;, P4x8;S7x3;Cave;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.RecursiveBacktrackerMazeGenerator)
OAAAP(RecursiveBacktrackerMazeGenerator, Cave)RecursiveBacktrackerMazeGenerator: Generating maze 15x15 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x3;S4x7;Cave;, P4x8;S7x3;Cave;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.RecursiveBacktrackerMazeGenerator)
OAAAP(RecursiveBacktrackerMazeGenerator, Cave)RecursiveBacktrackerMazeGenerator: Generating maze 15x15 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x3;S4x7;Cave;, P4x8;S7x3;Cave;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.RecursiveBacktrackerMazeGenerator)
OAAAP(RecursiveBacktrackerMazeGenerator, Cave)RecursiveBacktrackerMazeGenerator: Generating maze 15x15 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x3;S4x7;Cave;, P4x8;S7x3;Cave;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.RecursiveBacktrackerMazeGenerator)
OAAAP(RecursiveBacktrackerMazeGenerator, Cave)RecursiveBacktrackerMazeGenerator: Generating maze 15x15 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x3;S4x7;Cave;, P4x8;S7x3;Cave;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.RecursiveBacktrackerMazeGenerator)
OAAAP(RecursiveBacktrackerMazeGenerator, Cave)RecursiveBacktrackerMazeGenerator: Generating maze 15x15 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x3;S4x7;Cave;, P4x8;S7x3;Cave;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.RecursiveBacktrackerMazeGenerator)
OAAAP(RecursiveBacktrackerMazeGenerator, Cave)RecursiveBacktrackerMazeGenerator: Generating maze 15x15 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x3;S4x7;Cave;, P4x8;S7x3;Cave;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.RecursiveBacktrackerMazeGenerator)
]]></output>
                </test-case>
                <test-case id="1-1186" name="OverlappingAreasAreAppliedProperly(PlayersWorlds.Maps.Maze.RecursiveBacktrackerMazeGenerator,Hall)" fullname="PlayersWorlds.Maps.Maze.MazeGeneratorAreasTest.OverlappingAreasAreAppliedProperly(PlayersWorlds.Maps.Maze.RecursiveBacktrackerMazeGenerator,Hall)" methodname="OverlappingAreasAreAppliedProperly" classname="PlayersWorlds.Maps.Maze.MazeGeneratorAreasTest" runstate="Runnable" seed="101106125" result="Passed" start-time="2024-02-20T15:16:49.5687580Z" end-time="2024-02-20T15:16:49.6044880Z" duration="0.035730" asserts="80">
                  <output><![CDATA[OAAAP(RecursiveBacktrackerMazeGenerator, Hall)RecursiveBacktrackerMazeGenerator: Generating maze 15x15 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x3;S4x7;Hall;, P4x8;S7x3;Hall;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.RecursiveBacktrackerMazeGenerator)
OAAAP(RecursiveBacktrackerMazeGenerator, Hall)RecursiveBacktrackerMazeGenerator: Generating maze 15x15 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x3;S4x7;Hall;, P4x8;S7x3;Hall;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.RecursiveBacktrackerMazeGenerator)
OAAAP(RecursiveBacktrackerMazeGenerator, Hall)RecursiveBacktrackerMazeGenerator: Generating maze 15x15 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x3;S4x7;Hall;, P4x8;S7x3;Hall;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.RecursiveBacktrackerMazeGenerator)
OAAAP(RecursiveBacktrackerMazeGenerator, Hall)RecursiveBacktrackerMazeGenerator: Generating maze 15x15 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x3;S4x7;Hall;, P4x8;S7x3;Hall;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.RecursiveBacktrackerMazeGenerator)
OAAAP(RecursiveBacktrackerMazeGenerator, Hall)RecursiveBacktrackerMazeGenerator: Generating maze 15x15 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x3;S4x7;Hall;, P4x8;S7x3;Hall;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.RecursiveBacktrackerMazeGenerator)
OAAAP(RecursiveBacktrackerMazeGenerator, Hall)RecursiveBacktrackerMazeGenerator: Generating maze 15x15 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x3;S4x7;Hall;, P4x8;S7x3;Hall;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.RecursiveBacktrackerMazeGenerator)
OAAAP(RecursiveBacktrackerMazeGenerator, Hall)RecursiveBacktrackerMazeGenerator: Generating maze 15x15 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x3;S4x7;Hall;, P4x8;S7x3;Hall;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.RecursiveBacktrackerMazeGenerator)
OAAAP(RecursiveBacktrackerMazeGenerator, Hall)RecursiveBacktrackerMazeGenerator: Generating maze 15x15 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x3;S4x7;Hall;, P4x8;S7x3;Hall;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.RecursiveBacktrackerMazeGenerator)
OAAAP(RecursiveBacktrackerMazeGenerator, Hall)RecursiveBacktrackerMazeGenerator: Generating maze 15x15 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x3;S4x7;Hall;, P4x8;S7x3;Hall;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.RecursiveBacktrackerMazeGenerator)
OAAAP(RecursiveBacktrackerMazeGenerator, Hall)RecursiveBacktrackerMazeGenerator: Generating maze 15x15 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x3;S4x7;Hall;, P4x8;S7x3;Hall;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.RecursiveBacktrackerMazeGenerator)
]]></output>
                </test-case>
                <test-case id="1-1187" name="OverlappingAreasAreAppliedProperly(PlayersWorlds.Maps.Maze.RecursiveBacktrackerMazeGenerator,Fill)" fullname="PlayersWorlds.Maps.Maze.MazeGeneratorAreasTest.OverlappingAreasAreAppliedProperly(PlayersWorlds.Maps.Maze.RecursiveBacktrackerMazeGenerator,Fill)" methodname="OverlappingAreasAreAppliedProperly" classname="PlayersWorlds.Maps.Maze.MazeGeneratorAreasTest" runstate="Runnable" seed="2013528790" result="Passed" start-time="2024-02-20T15:16:49.6045030Z" end-time="2024-02-20T15:16:49.6281320Z" duration="0.023629" asserts="60">
                  <output><![CDATA[OAAAP(RecursiveBacktrackerMazeGenerator, Fill)RecursiveBacktrackerMazeGenerator: Generating maze 15x15 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x3;S4x7;Fill;, P4x8;S7x3;Fill;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.RecursiveBacktrackerMazeGenerator)
OAAAP(RecursiveBacktrackerMazeGenerator, Fill)RecursiveBacktrackerMazeGenerator: Generating maze 15x15 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x3;S4x7;Fill;, P4x8;S7x3;Fill;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.RecursiveBacktrackerMazeGenerator)
OAAAP(RecursiveBacktrackerMazeGenerator, Fill)RecursiveBacktrackerMazeGenerator: Generating maze 15x15 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x3;S4x7;Fill;, P4x8;S7x3;Fill;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.RecursiveBacktrackerMazeGenerator)
OAAAP(RecursiveBacktrackerMazeGenerator, Fill)RecursiveBacktrackerMazeGenerator: Generating maze 15x15 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x3;S4x7;Fill;, P4x8;S7x3;Fill;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.RecursiveBacktrackerMazeGenerator)
OAAAP(RecursiveBacktrackerMazeGenerator, Fill)RecursiveBacktrackerMazeGenerator: Generating maze 15x15 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x3;S4x7;Fill;, P4x8;S7x3;Fill;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.RecursiveBacktrackerMazeGenerator)
OAAAP(RecursiveBacktrackerMazeGenerator, Fill)RecursiveBacktrackerMazeGenerator: Generating maze 15x15 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x3;S4x7;Fill;, P4x8;S7x3;Fill;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.RecursiveBacktrackerMazeGenerator)
OAAAP(RecursiveBacktrackerMazeGenerator, Fill)RecursiveBacktrackerMazeGenerator: Generating maze 15x15 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x3;S4x7;Fill;, P4x8;S7x3;Fill;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.RecursiveBacktrackerMazeGenerator)
OAAAP(RecursiveBacktrackerMazeGenerator, Fill)RecursiveBacktrackerMazeGenerator: Generating maze 15x15 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x3;S4x7;Fill;, P4x8;S7x3;Fill;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.RecursiveBacktrackerMazeGenerator)
OAAAP(RecursiveBacktrackerMazeGenerator, Fill)RecursiveBacktrackerMazeGenerator: Generating maze 15x15 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x3;S4x7;Fill;, P4x8;S7x3;Fill;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.RecursiveBacktrackerMazeGenerator)
OAAAP(RecursiveBacktrackerMazeGenerator, Fill)RecursiveBacktrackerMazeGenerator: Generating maze 15x15 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x3;S4x7;Fill;, P4x8;S7x3;Fill;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.RecursiveBacktrackerMazeGenerator)
]]></output>
                </test-case>
                <test-case id="1-1188" name="OverlappingAreasAreAppliedProperly(PlayersWorlds.Maps.Maze.SidewinderMazeGenerator,Cave)" fullname="PlayersWorlds.Maps.Maze.MazeGeneratorAreasTest.OverlappingAreasAreAppliedProperly(PlayersWorlds.Maps.Maze.SidewinderMazeGenerator,Cave)" methodname="OverlappingAreasAreAppliedProperly" classname="PlayersWorlds.Maps.Maze.MazeGeneratorAreasTest" runstate="Runnable" seed="1251658290" result="Passed" start-time="2024-02-20T15:16:49.6281490Z" end-time="2024-02-20T15:16:49.6753490Z" duration="0.047201" asserts="80">
                  <output><![CDATA[OAAAP(SidewinderMazeGenerator, Cave)SidewinderMazeGenerator: Generating maze 15x15 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x3;S4x7;Cave;, P4x8;S7x3;Cave;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.SidewinderMazeGenerator)
OAAAP(SidewinderMazeGenerator, Cave)SidewinderMazeGenerator: Generating maze 15x15 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x3;S4x7;Cave;, P4x8;S7x3;Cave;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.SidewinderMazeGenerator)
OAAAP(SidewinderMazeGenerator, Cave)SidewinderMazeGenerator: Generating maze 15x15 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x3;S4x7;Cave;, P4x8;S7x3;Cave;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.SidewinderMazeGenerator)
OAAAP(SidewinderMazeGenerator, Cave)SidewinderMazeGenerator: Generating maze 15x15 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x3;S4x7;Cave;, P4x8;S7x3;Cave;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.SidewinderMazeGenerator)
OAAAP(SidewinderMazeGenerator, Cave)SidewinderMazeGenerator: Generating maze 15x15 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x3;S4x7;Cave;, P4x8;S7x3;Cave;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.SidewinderMazeGenerator)
OAAAP(SidewinderMazeGenerator, Cave)SidewinderMazeGenerator: Generating maze 15x15 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x3;S4x7;Cave;, P4x8;S7x3;Cave;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.SidewinderMazeGenerator)
OAAAP(SidewinderMazeGenerator, Cave)SidewinderMazeGenerator: Generating maze 15x15 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x3;S4x7;Cave;, P4x8;S7x3;Cave;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.SidewinderMazeGenerator)
OAAAP(SidewinderMazeGenerator, Cave)SidewinderMazeGenerator: Generating maze 15x15 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x3;S4x7;Cave;, P4x8;S7x3;Cave;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.SidewinderMazeGenerator)
OAAAP(SidewinderMazeGenerator, Cave)SidewinderMazeGenerator: Generating maze 15x15 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x3;S4x7;Cave;, P4x8;S7x3;Cave;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.SidewinderMazeGenerator)
OAAAP(SidewinderMazeGenerator, Cave)SidewinderMazeGenerator: Generating maze 15x15 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x3;S4x7;Cave;, P4x8;S7x3;Cave;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.SidewinderMazeGenerator)
]]></output>
                </test-case>
                <test-case id="1-1189" name="OverlappingAreasAreAppliedProperly(PlayersWorlds.Maps.Maze.SidewinderMazeGenerator,Hall)" fullname="PlayersWorlds.Maps.Maze.MazeGeneratorAreasTest.OverlappingAreasAreAppliedProperly(PlayersWorlds.Maps.Maze.SidewinderMazeGenerator,Hall)" methodname="OverlappingAreasAreAppliedProperly" classname="PlayersWorlds.Maps.Maze.MazeGeneratorAreasTest" runstate="Runnable" seed="1793521443" result="Passed" start-time="2024-02-20T15:16:49.6753640Z" end-time="2024-02-20T15:16:49.7157990Z" duration="0.040435" asserts="80">
                  <output><![CDATA[OAAAP(SidewinderMazeGenerator, Hall)SidewinderMazeGenerator: Generating maze 15x15 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x3;S4x7;Hall;, P4x8;S7x3;Hall;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.SidewinderMazeGenerator)
OAAAP(SidewinderMazeGenerator, Hall)SidewinderMazeGenerator: Generating maze 15x15 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x3;S4x7;Hall;, P4x8;S7x3;Hall;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.SidewinderMazeGenerator)
OAAAP(SidewinderMazeGenerator, Hall)SidewinderMazeGenerator: Generating maze 15x15 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x3;S4x7;Hall;, P4x8;S7x3;Hall;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.SidewinderMazeGenerator)
OAAAP(SidewinderMazeGenerator, Hall)SidewinderMazeGenerator: Generating maze 15x15 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x3;S4x7;Hall;, P4x8;S7x3;Hall;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.SidewinderMazeGenerator)
OAAAP(SidewinderMazeGenerator, Hall)SidewinderMazeGenerator: Generating maze 15x15 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x3;S4x7;Hall;, P4x8;S7x3;Hall;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.SidewinderMazeGenerator)
OAAAP(SidewinderMazeGenerator, Hall)SidewinderMazeGenerator: Generating maze 15x15 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x3;S4x7;Hall;, P4x8;S7x3;Hall;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.SidewinderMazeGenerator)
OAAAP(SidewinderMazeGenerator, Hall)SidewinderMazeGenerator: Generating maze 15x15 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x3;S4x7;Hall;, P4x8;S7x3;Hall;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.SidewinderMazeGenerator)
OAAAP(SidewinderMazeGenerator, Hall)SidewinderMazeGenerator: Generating maze 15x15 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x3;S4x7;Hall;, P4x8;S7x3;Hall;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.SidewinderMazeGenerator)
OAAAP(SidewinderMazeGenerator, Hall)SidewinderMazeGenerator: Generating maze 15x15 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x3;S4x7;Hall;, P4x8;S7x3;Hall;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.SidewinderMazeGenerator)
OAAAP(SidewinderMazeGenerator, Hall)SidewinderMazeGenerator: Generating maze 15x15 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x3;S4x7;Hall;, P4x8;S7x3;Hall;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.SidewinderMazeGenerator)
]]></output>
                </test-case>
                <test-case id="1-1190" name="OverlappingAreasAreAppliedProperly(PlayersWorlds.Maps.Maze.SidewinderMazeGenerator,Fill)" fullname="PlayersWorlds.Maps.Maze.MazeGeneratorAreasTest.OverlappingAreasAreAppliedProperly(PlayersWorlds.Maps.Maze.SidewinderMazeGenerator,Fill)" methodname="OverlappingAreasAreAppliedProperly" classname="PlayersWorlds.Maps.Maze.MazeGeneratorAreasTest" runstate="Runnable" seed="707663938" result="Passed" start-time="2024-02-20T15:16:49.7158170Z" end-time="2024-02-20T15:16:49.7478050Z" duration="0.031989" asserts="60">
                  <output><![CDATA[OAAAP(SidewinderMazeGenerator, Fill)SidewinderMazeGenerator: Generating maze 15x15 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x3;S4x7;Fill;, P4x8;S7x3;Fill;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.SidewinderMazeGenerator)
OAAAP(SidewinderMazeGenerator, Fill)SidewinderMazeGenerator: Generating maze 15x15 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x3;S4x7;Fill;, P4x8;S7x3;Fill;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.SidewinderMazeGenerator)
OAAAP(SidewinderMazeGenerator, Fill)SidewinderMazeGenerator: Generating maze 15x15 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x3;S4x7;Fill;, P4x8;S7x3;Fill;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.SidewinderMazeGenerator)
OAAAP(SidewinderMazeGenerator, Fill)SidewinderMazeGenerator: Generating maze 15x15 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x3;S4x7;Fill;, P4x8;S7x3;Fill;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.SidewinderMazeGenerator)
OAAAP(SidewinderMazeGenerator, Fill)SidewinderMazeGenerator: Generating maze 15x15 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x3;S4x7;Fill;, P4x8;S7x3;Fill;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.SidewinderMazeGenerator)
OAAAP(SidewinderMazeGenerator, Fill)SidewinderMazeGenerator: Generating maze 15x15 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x3;S4x7;Fill;, P4x8;S7x3;Fill;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.SidewinderMazeGenerator)
OAAAP(SidewinderMazeGenerator, Fill)SidewinderMazeGenerator: Generating maze 15x15 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x3;S4x7;Fill;, P4x8;S7x3;Fill;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.SidewinderMazeGenerator)
OAAAP(SidewinderMazeGenerator, Fill)SidewinderMazeGenerator: Generating maze 15x15 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x3;S4x7;Fill;, P4x8;S7x3;Fill;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.SidewinderMazeGenerator)
OAAAP(SidewinderMazeGenerator, Fill)SidewinderMazeGenerator: Generating maze 15x15 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x3;S4x7;Fill;, P4x8;S7x3;Fill;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.SidewinderMazeGenerator)
OAAAP(SidewinderMazeGenerator, Fill)SidewinderMazeGenerator: Generating maze 15x15 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x3;S4x7;Fill;, P4x8;S7x3;Fill;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.SidewinderMazeGenerator)
]]></output>
                </test-case>
                <test-case id="1-1191" name="OverlappingAreasAreAppliedProperly(PlayersWorlds.Maps.Maze.WilsonsMazeGenerator,Cave)" fullname="PlayersWorlds.Maps.Maze.MazeGeneratorAreasTest.OverlappingAreasAreAppliedProperly(PlayersWorlds.Maps.Maze.WilsonsMazeGenerator,Cave)" methodname="OverlappingAreasAreAppliedProperly" classname="PlayersWorlds.Maps.Maze.MazeGeneratorAreasTest" runstate="Runnable" seed="1028903949" result="Passed" start-time="2024-02-20T15:16:49.7478200Z" end-time="2024-02-20T15:16:49.7843080Z" duration="0.036489" asserts="80">
                  <output><![CDATA[OAAAP(WilsonsMazeGenerator, Cave)WilsonsMazeGenerator: Generating maze 15x15 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x3;S4x7;Cave;, P4x8;S7x3;Cave;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.WilsonsMazeGenerator)
OAAAP(WilsonsMazeGenerator, Cave)WilsonsMazeGenerator: Generating maze 15x15 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x3;S4x7;Cave;, P4x8;S7x3;Cave;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.WilsonsMazeGenerator)
OAAAP(WilsonsMazeGenerator, Cave)WilsonsMazeGenerator: Generating maze 15x15 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x3;S4x7;Cave;, P4x8;S7x3;Cave;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.WilsonsMazeGenerator)
OAAAP(WilsonsMazeGenerator, Cave)WilsonsMazeGenerator: Generating maze 15x15 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x3;S4x7;Cave;, P4x8;S7x3;Cave;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.WilsonsMazeGenerator)
OAAAP(WilsonsMazeGenerator, Cave)WilsonsMazeGenerator: Generating maze 15x15 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x3;S4x7;Cave;, P4x8;S7x3;Cave;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.WilsonsMazeGenerator)
OAAAP(WilsonsMazeGenerator, Cave)WilsonsMazeGenerator: Generating maze 15x15 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x3;S4x7;Cave;, P4x8;S7x3;Cave;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.WilsonsMazeGenerator)
OAAAP(WilsonsMazeGenerator, Cave)WilsonsMazeGenerator: Generating maze 15x15 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x3;S4x7;Cave;, P4x8;S7x3;Cave;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.WilsonsMazeGenerator)
OAAAP(WilsonsMazeGenerator, Cave)WilsonsMazeGenerator: Generating maze 15x15 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x3;S4x7;Cave;, P4x8;S7x3;Cave;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.WilsonsMazeGenerator)
OAAAP(WilsonsMazeGenerator, Cave)WilsonsMazeGenerator: Generating maze 15x15 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x3;S4x7;Cave;, P4x8;S7x3;Cave;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.WilsonsMazeGenerator)
OAAAP(WilsonsMazeGenerator, Cave)WilsonsMazeGenerator: Generating maze 15x15 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x3;S4x7;Cave;, P4x8;S7x3;Cave;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.WilsonsMazeGenerator)
]]></output>
                </test-case>
                <test-case id="1-1192" name="OverlappingAreasAreAppliedProperly(PlayersWorlds.Maps.Maze.WilsonsMazeGenerator,Hall)" fullname="PlayersWorlds.Maps.Maze.MazeGeneratorAreasTest.OverlappingAreasAreAppliedProperly(PlayersWorlds.Maps.Maze.WilsonsMazeGenerator,Hall)" methodname="OverlappingAreasAreAppliedProperly" classname="PlayersWorlds.Maps.Maze.MazeGeneratorAreasTest" runstate="Runnable" seed="929228872" result="Passed" start-time="2024-02-20T15:16:49.7843260Z" end-time="2024-02-20T15:16:49.8236180Z" duration="0.039293" asserts="80">
                  <output><![CDATA[OAAAP(WilsonsMazeGenerator, Hall)WilsonsMazeGenerator: Generating maze 15x15 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x3;S4x7;Hall;, P4x8;S7x3;Hall;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.WilsonsMazeGenerator)
OAAAP(WilsonsMazeGenerator, Hall)WilsonsMazeGenerator: Generating maze 15x15 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x3;S4x7;Hall;, P4x8;S7x3;Hall;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.WilsonsMazeGenerator)
OAAAP(WilsonsMazeGenerator, Hall)WilsonsMazeGenerator: Generating maze 15x15 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x3;S4x7;Hall;, P4x8;S7x3;Hall;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.WilsonsMazeGenerator)
OAAAP(WilsonsMazeGenerator, Hall)WilsonsMazeGenerator: Generating maze 15x15 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x3;S4x7;Hall;, P4x8;S7x3;Hall;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.WilsonsMazeGenerator)
OAAAP(WilsonsMazeGenerator, Hall)WilsonsMazeGenerator: Generating maze 15x15 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x3;S4x7;Hall;, P4x8;S7x3;Hall;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.WilsonsMazeGenerator)
OAAAP(WilsonsMazeGenerator, Hall)WilsonsMazeGenerator: Generating maze 15x15 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x3;S4x7;Hall;, P4x8;S7x3;Hall;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.WilsonsMazeGenerator)
OAAAP(WilsonsMazeGenerator, Hall)WilsonsMazeGenerator: Generating maze 15x15 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x3;S4x7;Hall;, P4x8;S7x3;Hall;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.WilsonsMazeGenerator)
OAAAP(WilsonsMazeGenerator, Hall)WilsonsMazeGenerator: Generating maze 15x15 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x3;S4x7;Hall;, P4x8;S7x3;Hall;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.WilsonsMazeGenerator)
OAAAP(WilsonsMazeGenerator, Hall)WilsonsMazeGenerator: Generating maze 15x15 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x3;S4x7;Hall;, P4x8;S7x3;Hall;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.WilsonsMazeGenerator)
OAAAP(WilsonsMazeGenerator, Hall)WilsonsMazeGenerator: Generating maze 15x15 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x3;S4x7;Hall;, P4x8;S7x3;Hall;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.WilsonsMazeGenerator)
]]></output>
                </test-case>
                <test-case id="1-1193" name="OverlappingAreasAreAppliedProperly(PlayersWorlds.Maps.Maze.WilsonsMazeGenerator,Fill)" fullname="PlayersWorlds.Maps.Maze.MazeGeneratorAreasTest.OverlappingAreasAreAppliedProperly(PlayersWorlds.Maps.Maze.WilsonsMazeGenerator,Fill)" methodname="OverlappingAreasAreAppliedProperly" classname="PlayersWorlds.Maps.Maze.MazeGeneratorAreasTest" runstate="Runnable" seed="1637671145" result="Passed" start-time="2024-02-20T15:16:49.8236380Z" end-time="2024-02-20T15:16:49.8513440Z" duration="0.027706" asserts="60">
                  <output><![CDATA[OAAAP(WilsonsMazeGenerator, Fill)WilsonsMazeGenerator: Generating maze 15x15 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x3;S4x7;Fill;, P4x8;S7x3;Fill;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.WilsonsMazeGenerator)
OAAAP(WilsonsMazeGenerator, Fill)WilsonsMazeGenerator: Generating maze 15x15 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x3;S4x7;Fill;, P4x8;S7x3;Fill;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.WilsonsMazeGenerator)
OAAAP(WilsonsMazeGenerator, Fill)WilsonsMazeGenerator: Generating maze 15x15 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x3;S4x7;Fill;, P4x8;S7x3;Fill;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.WilsonsMazeGenerator)
OAAAP(WilsonsMazeGenerator, Fill)WilsonsMazeGenerator: Generating maze 15x15 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x3;S4x7;Fill;, P4x8;S7x3;Fill;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.WilsonsMazeGenerator)
OAAAP(WilsonsMazeGenerator, Fill)WilsonsMazeGenerator: Generating maze 15x15 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x3;S4x7;Fill;, P4x8;S7x3;Fill;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.WilsonsMazeGenerator)
OAAAP(WilsonsMazeGenerator, Fill)WilsonsMazeGenerator: Generating maze 15x15 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x3;S4x7;Fill;, P4x8;S7x3;Fill;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.WilsonsMazeGenerator)
OAAAP(WilsonsMazeGenerator, Fill)WilsonsMazeGenerator: Generating maze 15x15 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x3;S4x7;Fill;, P4x8;S7x3;Fill;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.WilsonsMazeGenerator)
OAAAP(WilsonsMazeGenerator, Fill)WilsonsMazeGenerator: Generating maze 15x15 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x3;S4x7;Fill;, P4x8;S7x3;Fill;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.WilsonsMazeGenerator)
OAAAP(WilsonsMazeGenerator, Fill)WilsonsMazeGenerator: Generating maze 15x15 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x3;S4x7;Fill;, P4x8;S7x3;Fill;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.WilsonsMazeGenerator)
OAAAP(WilsonsMazeGenerator, Fill)WilsonsMazeGenerator: Generating maze 15x15 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x3;S4x7;Fill;, P4x8;S7x3;Fill;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.WilsonsMazeGenerator)
]]></output>
                </test-case>
              </test-suite>
              <test-suite type="ParameterizedMethod" id="1-1360" name="ScatteredAreas" fullname="PlayersWorlds.Maps.Maze.MazeGeneratorAreasTest.ScatteredAreas" classname="PlayersWorlds.Maps.Maze.MazeGeneratorAreasTest" runstate="Runnable" testcasecount="126" result="Skipped" label="Ignored" site="Child" start-time="2024-02-20T15:16:49.8513760Z" end-time="2024-02-20T15:16:52.7006540Z" duration="2.849278" total="126" passed="24" failed="0" warnings="0" inconclusive="0" skipped="102" asserts="480">
                <properties>
                  <property name="Repeat" value="10" />
                </properties>
                <reason>
                  <message><![CDATA[One or more child tests were ignored]]></message>
                </reason>
                <test-case id="1-1234" name="ScatteredAreas(PlayersWorlds.Maps.Maze.AldousBroderMazeGenerator,Cave,Quarter)" fullname="PlayersWorlds.Maps.Maze.MazeGeneratorAreasTest.ScatteredAreas(PlayersWorlds.Maps.Maze.AldousBroderMazeGenerator,Cave,Quarter)" methodname="ScatteredAreas" classname="PlayersWorlds.Maps.Maze.MazeGeneratorAreasTest" runstate="Runnable" seed="1513060525" result="Skipped" label="Ignored" start-time="2024-02-20T15:16:49.8513990Z" end-time="2024-02-20T15:16:49.8568810Z" duration="0.005482" asserts="0" />
                <test-case id="1-1235" name="ScatteredAreas(PlayersWorlds.Maps.Maze.AldousBroderMazeGenerator,Cave,Half)" fullname="PlayersWorlds.Maps.Maze.MazeGeneratorAreasTest.ScatteredAreas(PlayersWorlds.Maps.Maze.AldousBroderMazeGenerator,Cave,Half)" methodname="ScatteredAreas" classname="PlayersWorlds.Maps.Maze.MazeGeneratorAreasTest" runstate="Runnable" seed="923132973" result="Skipped" label="Ignored" start-time="2024-02-20T15:16:49.8569700Z" end-time="2024-02-20T15:16:49.8570570Z" duration="0.000087" asserts="0" />
                <test-case id="1-1236" name="ScatteredAreas(PlayersWorlds.Maps.Maze.AldousBroderMazeGenerator,Cave,ThreeQuarters)" fullname="PlayersWorlds.Maps.Maze.MazeGeneratorAreasTest.ScatteredAreas(PlayersWorlds.Maps.Maze.AldousBroderMazeGenerator,Cave,ThreeQuarters)" methodname="ScatteredAreas" classname="PlayersWorlds.Maps.Maze.MazeGeneratorAreasTest" runstate="Runnable" seed="1441009639" result="Skipped" label="Ignored" start-time="2024-02-20T15:16:49.8570630Z" end-time="2024-02-20T15:16:49.8571200Z" duration="0.000057" asserts="0" />
                <test-case id="1-1237" name="ScatteredAreas(PlayersWorlds.Maps.Maze.AldousBroderMazeGenerator,Cave,NinetyPercent)" fullname="PlayersWorlds.Maps.Maze.MazeGeneratorAreasTest.ScatteredAreas(PlayersWorlds.Maps.Maze.AldousBroderMazeGenerator,Cave,NinetyPercent)" methodname="ScatteredAreas" classname="PlayersWorlds.Maps.Maze.MazeGeneratorAreasTest" runstate="Runnable" seed="1754881049" result="Skipped" label="Ignored" start-time="2024-02-20T15:16:49.8571250Z" end-time="2024-02-20T15:16:49.8571750Z" duration="0.000050" asserts="0" />
                <test-case id="1-1238" name="ScatteredAreas(PlayersWorlds.Maps.Maze.AldousBroderMazeGenerator,Cave,FullWidth)" fullname="PlayersWorlds.Maps.Maze.MazeGeneratorAreasTest.ScatteredAreas(PlayersWorlds.Maps.Maze.AldousBroderMazeGenerator,Cave,FullWidth)" methodname="ScatteredAreas" classname="PlayersWorlds.Maps.Maze.MazeGeneratorAreasTest" runstate="Runnable" seed="1276969325" result="Skipped" label="Ignored" start-time="2024-02-20T15:16:49.8571790Z" end-time="2024-02-20T15:16:49.8572260Z" duration="0.000047" asserts="0" />
                <test-case id="1-1239" name="ScatteredAreas(PlayersWorlds.Maps.Maze.AldousBroderMazeGenerator,Cave,FullHeight)" fullname="PlayersWorlds.Maps.Maze.MazeGeneratorAreasTest.ScatteredAreas(PlayersWorlds.Maps.Maze.AldousBroderMazeGenerator,Cave,FullHeight)" methodname="ScatteredAreas" classname="PlayersWorlds.Maps.Maze.MazeGeneratorAreasTest" runstate="Runnable" seed="1989196105" result="Skipped" label="Ignored" start-time="2024-02-20T15:16:49.8572310Z" end-time="2024-02-20T15:16:49.8572770Z" duration="0.000047" asserts="0" />
                <test-case id="1-1240" name="ScatteredAreas(PlayersWorlds.Maps.Maze.AldousBroderMazeGenerator,Cave,Full)" fullname="PlayersWorlds.Maps.Maze.MazeGeneratorAreasTest.ScatteredAreas(PlayersWorlds.Maps.Maze.AldousBroderMazeGenerator,Cave,Full)" methodname="ScatteredAreas" classname="PlayersWorlds.Maps.Maze.MazeGeneratorAreasTest" runstate="Runnable" seed="575187818" result="Passed" start-time="2024-02-20T15:16:49.8572820Z" end-time="2024-02-20T15:16:50.0991930Z" duration="0.241912" asserts="20">
                  <output><![CDATA[AldousBroderMazeGenerator: Generating maze 30x30 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x2;S2x2;Cave;, P24x24;S2x2;Cave;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.AldousBroderMazeGenerator)
AldousBroderMazeGenerator: Generating maze 30x30 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x2;S2x2;Cave;, P24x24;S2x2;Cave;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.AldousBroderMazeGenerator)
AldousBroderMazeGenerator: Generating maze 30x30 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x2;S2x2;Cave;, P24x24;S2x2;Cave;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.AldousBroderMazeGenerator)
AldousBroderMazeGenerator: Generating maze 30x30 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x2;S2x2;Cave;, P24x24;S2x2;Cave;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.AldousBroderMazeGenerator)
AldousBroderMazeGenerator: Generating maze 30x30 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x2;S2x2;Cave;, P24x24;S2x2;Cave;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.AldousBroderMazeGenerator)
AldousBroderMazeGenerator: Generating maze 30x30 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x2;S2x2;Cave;, P24x24;S2x2;Cave;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.AldousBroderMazeGenerator)
AldousBroderMazeGenerator: Generating maze 30x30 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x2;S2x2;Cave;, P24x24;S2x2;Cave;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.AldousBroderMazeGenerator)
AldousBroderMazeGenerator: Generating maze 30x30 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x2;S2x2;Cave;, P24x24;S2x2;Cave;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.AldousBroderMazeGenerator)
AldousBroderMazeGenerator: Generating maze 30x30 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x2;S2x2;Cave;, P24x24;S2x2;Cave;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.AldousBroderMazeGenerator)
AldousBroderMazeGenerator: Generating maze 30x30 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x2;S2x2;Cave;, P24x24;S2x2;Cave;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.AldousBroderMazeGenerator)
]]></output>
                </test-case>
                <test-case id="1-1241" name="ScatteredAreas(PlayersWorlds.Maps.Maze.AldousBroderMazeGenerator,Hall,Quarter)" fullname="PlayersWorlds.Maps.Maze.MazeGeneratorAreasTest.ScatteredAreas(PlayersWorlds.Maps.Maze.AldousBroderMazeGenerator,Hall,Quarter)" methodname="ScatteredAreas" classname="PlayersWorlds.Maps.Maze.MazeGeneratorAreasTest" runstate="Runnable" seed="972558963" result="Skipped" label="Ignored" start-time="2024-02-20T15:16:50.0992110Z" end-time="2024-02-20T15:16:50.0993400Z" duration="0.000129" asserts="0" />
                <test-case id="1-1242" name="ScatteredAreas(PlayersWorlds.Maps.Maze.AldousBroderMazeGenerator,Hall,Half)" fullname="PlayersWorlds.Maps.Maze.MazeGeneratorAreasTest.ScatteredAreas(PlayersWorlds.Maps.Maze.AldousBroderMazeGenerator,Hall,Half)" methodname="ScatteredAreas" classname="PlayersWorlds.Maps.Maze.MazeGeneratorAreasTest" runstate="Runnable" seed="251822887" result="Skipped" label="Ignored" start-time="2024-02-20T15:16:50.0993460Z" end-time="2024-02-20T15:16:50.0994070Z" duration="0.000061" asserts="0" />
                <test-case id="1-1243" name="ScatteredAreas(PlayersWorlds.Maps.Maze.AldousBroderMazeGenerator,Hall,ThreeQuarters)" fullname="PlayersWorlds.Maps.Maze.MazeGeneratorAreasTest.ScatteredAreas(PlayersWorlds.Maps.Maze.AldousBroderMazeGenerator,Hall,ThreeQuarters)" methodname="ScatteredAreas" classname="PlayersWorlds.Maps.Maze.MazeGeneratorAreasTest" runstate="Runnable" seed="924661291" result="Skipped" label="Ignored" start-time="2024-02-20T15:16:50.0994120Z" end-time="2024-02-20T15:16:50.0994660Z" duration="0.000054" asserts="0" />
                <test-case id="1-1244" name="ScatteredAreas(PlayersWorlds.Maps.Maze.AldousBroderMazeGenerator,Hall,NinetyPercent)" fullname="PlayersWorlds.Maps.Maze.MazeGeneratorAreasTest.ScatteredAreas(PlayersWorlds.Maps.Maze.AldousBroderMazeGenerator,Hall,NinetyPercent)" methodname="ScatteredAreas" classname="PlayersWorlds.Maps.Maze.MazeGeneratorAreasTest" runstate="Runnable" seed="1753518797" result="Skipped" label="Ignored" start-time="2024-02-20T15:16:50.0994700Z" end-time="2024-02-20T15:16:50.0995210Z" duration="0.000050" asserts="0" />
                <test-case id="1-1245" name="ScatteredAreas(PlayersWorlds.Maps.Maze.AldousBroderMazeGenerator,Hall,FullWidth)" fullname="PlayersWorlds.Maps.Maze.MazeGeneratorAreasTest.ScatteredAreas(PlayersWorlds.Maps.Maze.AldousBroderMazeGenerator,Hall,FullWidth)" methodname="ScatteredAreas" classname="PlayersWorlds.Maps.Maze.MazeGeneratorAreasTest" runstate="Runnable" seed="1081036365" result="Skipped" label="Ignored" start-time="2024-02-20T15:16:50.0995250Z" end-time="2024-02-20T15:16:50.0995720Z" duration="0.000047" asserts="0" />
                <test-case id="1-1246" name="ScatteredAreas(PlayersWorlds.Maps.Maze.AldousBroderMazeGenerator,Hall,FullHeight)" fullname="PlayersWorlds.Maps.Maze.MazeGeneratorAreasTest.ScatteredAreas(PlayersWorlds.Maps.Maze.AldousBroderMazeGenerator,Hall,FullHeight)" methodname="ScatteredAreas" classname="PlayersWorlds.Maps.Maze.MazeGeneratorAreasTest" runstate="Runnable" seed="1216857525" result="Skipped" label="Ignored" start-time="2024-02-20T15:16:50.0995760Z" end-time="2024-02-20T15:16:50.0996210Z" duration="0.000045" asserts="0" />
                <test-case id="1-1247" name="ScatteredAreas(PlayersWorlds.Maps.Maze.AldousBroderMazeGenerator,Hall,Full)" fullname="PlayersWorlds.Maps.Maze.MazeGeneratorAreasTest.ScatteredAreas(PlayersWorlds.Maps.Maze.AldousBroderMazeGenerator,Hall,Full)" methodname="ScatteredAreas" classname="PlayersWorlds.Maps.Maze.MazeGeneratorAreasTest" runstate="Runnable" seed="260515438" result="Passed" start-time="2024-02-20T15:16:50.0996260Z" end-time="2024-02-20T15:16:50.3148490Z" duration="0.215224" asserts="20">
                  <output><![CDATA[AldousBroderMazeGenerator: Generating maze 30x30 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x2;S2x2;Hall;, P24x24;S2x2;Hall;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.AldousBroderMazeGenerator)
AldousBroderMazeGenerator: Generating maze 30x30 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x2;S2x2;Hall;, P24x24;S2x2;Hall;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.AldousBroderMazeGenerator)
AldousBroderMazeGenerator: Generating maze 30x30 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x2;S2x2;Hall;, P24x24;S2x2;Hall;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.AldousBroderMazeGenerator)
AldousBroderMazeGenerator: Generating maze 30x30 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x2;S2x2;Hall;, P24x24;S2x2;Hall;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.AldousBroderMazeGenerator)
AldousBroderMazeGenerator: Generating maze 30x30 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x2;S2x2;Hall;, P24x24;S2x2;Hall;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.AldousBroderMazeGenerator)
AldousBroderMazeGenerator: Generating maze 30x30 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x2;S2x2;Hall;, P24x24;S2x2;Hall;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.AldousBroderMazeGenerator)
AldousBroderMazeGenerator: Generating maze 30x30 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x2;S2x2;Hall;, P24x24;S2x2;Hall;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.AldousBroderMazeGenerator)
AldousBroderMazeGenerator: Generating maze 30x30 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x2;S2x2;Hall;, P24x24;S2x2;Hall;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.AldousBroderMazeGenerator)
AldousBroderMazeGenerator: Generating maze 30x30 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x2;S2x2;Hall;, P24x24;S2x2;Hall;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.AldousBroderMazeGenerator)
AldousBroderMazeGenerator: Generating maze 30x30 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x2;S2x2;Hall;, P24x24;S2x2;Hall;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.AldousBroderMazeGenerator)
]]></output>
                </test-case>
                <test-case id="1-1248" name="ScatteredAreas(PlayersWorlds.Maps.Maze.AldousBroderMazeGenerator,Fill,Quarter)" fullname="PlayersWorlds.Maps.Maze.MazeGeneratorAreasTest.ScatteredAreas(PlayersWorlds.Maps.Maze.AldousBroderMazeGenerator,Fill,Quarter)" methodname="ScatteredAreas" classname="PlayersWorlds.Maps.Maze.MazeGeneratorAreasTest" runstate="Runnable" seed="200878575" result="Skipped" label="Ignored" start-time="2024-02-20T15:16:50.3148670Z" end-time="2024-02-20T15:16:50.3149850Z" duration="0.000118" asserts="0" />
                <test-case id="1-1249" name="ScatteredAreas(PlayersWorlds.Maps.Maze.AldousBroderMazeGenerator,Fill,Half)" fullname="PlayersWorlds.Maps.Maze.MazeGeneratorAreasTest.ScatteredAreas(PlayersWorlds.Maps.Maze.AldousBroderMazeGenerator,Fill,Half)" methodname="ScatteredAreas" classname="PlayersWorlds.Maps.Maze.MazeGeneratorAreasTest" runstate="Runnable" seed="1146448436" result="Skipped" label="Ignored" start-time="2024-02-20T15:16:50.3149910Z" end-time="2024-02-20T15:16:50.3150520Z" duration="0.000061" asserts="0" />
                <test-case id="1-1250" name="ScatteredAreas(PlayersWorlds.Maps.Maze.AldousBroderMazeGenerator,Fill,ThreeQuarters)" fullname="PlayersWorlds.Maps.Maze.MazeGeneratorAreasTest.ScatteredAreas(PlayersWorlds.Maps.Maze.AldousBroderMazeGenerator,Fill,ThreeQuarters)" methodname="ScatteredAreas" classname="PlayersWorlds.Maps.Maze.MazeGeneratorAreasTest" runstate="Runnable" seed="1109860942" result="Skipped" label="Ignored" start-time="2024-02-20T15:16:50.3150570Z" end-time="2024-02-20T15:16:50.3151100Z" duration="0.000054" asserts="0" />
                <test-case id="1-1251" name="ScatteredAreas(PlayersWorlds.Maps.Maze.AldousBroderMazeGenerator,Fill,NinetyPercent)" fullname="PlayersWorlds.Maps.Maze.MazeGeneratorAreasTest.ScatteredAreas(PlayersWorlds.Maps.Maze.AldousBroderMazeGenerator,Fill,NinetyPercent)" methodname="ScatteredAreas" classname="PlayersWorlds.Maps.Maze.MazeGeneratorAreasTest" runstate="Runnable" seed="1152686974" result="Skipped" label="Ignored" start-time="2024-02-20T15:16:50.3151150Z" end-time="2024-02-20T15:16:50.3151650Z" duration="0.000051" asserts="0" />
                <test-case id="1-1252" name="ScatteredAreas(PlayersWorlds.Maps.Maze.AldousBroderMazeGenerator,Fill,FullWidth)" fullname="PlayersWorlds.Maps.Maze.MazeGeneratorAreasTest.ScatteredAreas(PlayersWorlds.Maps.Maze.AldousBroderMazeGenerator,Fill,FullWidth)" methodname="ScatteredAreas" classname="PlayersWorlds.Maps.Maze.MazeGeneratorAreasTest" runstate="Runnable" seed="1154689117" result="Skipped" label="Ignored" start-time="2024-02-20T15:16:50.3151700Z" end-time="2024-02-20T15:16:50.3152180Z" duration="0.000048" asserts="0" />
                <test-case id="1-1253" name="ScatteredAreas(PlayersWorlds.Maps.Maze.AldousBroderMazeGenerator,Fill,FullHeight)" fullname="PlayersWorlds.Maps.Maze.MazeGeneratorAreasTest.ScatteredAreas(PlayersWorlds.Maps.Maze.AldousBroderMazeGenerator,Fill,FullHeight)" methodname="ScatteredAreas" classname="PlayersWorlds.Maps.Maze.MazeGeneratorAreasTest" runstate="Runnable" seed="178477692" result="Skipped" label="Ignored" start-time="2024-02-20T15:16:50.3152230Z" end-time="2024-02-20T15:16:50.3152680Z" duration="0.000046" asserts="0" />
                <test-case id="1-1254" name="ScatteredAreas(PlayersWorlds.Maps.Maze.AldousBroderMazeGenerator,Fill,Full)" fullname="PlayersWorlds.Maps.Maze.MazeGeneratorAreasTest.ScatteredAreas(PlayersWorlds.Maps.Maze.AldousBroderMazeGenerator,Fill,Full)" methodname="ScatteredAreas" classname="PlayersWorlds.Maps.Maze.MazeGeneratorAreasTest" runstate="Runnable" seed="1780216445" result="Skipped" label="Ignored" start-time="2024-02-20T15:16:50.3152720Z" end-time="2024-02-20T15:16:50.3153180Z" duration="0.000046" asserts="0" />
                <test-case id="1-1255" name="ScatteredAreas(PlayersWorlds.Maps.Maze.BinaryTreeMazeGenerator,Cave,Quarter)" fullname="PlayersWorlds.Maps.Maze.MazeGeneratorAreasTest.ScatteredAreas(PlayersWorlds.Maps.Maze.BinaryTreeMazeGenerator,Cave,Quarter)" methodname="ScatteredAreas" classname="PlayersWorlds.Maps.Maze.MazeGeneratorAreasTest" runstate="Runnable" seed="1004958744" result="Skipped" label="Ignored" start-time="2024-02-20T15:16:50.3153220Z" end-time="2024-02-20T15:16:50.3153680Z" duration="0.000046" asserts="0" />
                <test-case id="1-1256" name="ScatteredAreas(PlayersWorlds.Maps.Maze.BinaryTreeMazeGenerator,Cave,Half)" fullname="PlayersWorlds.Maps.Maze.MazeGeneratorAreasTest.ScatteredAreas(PlayersWorlds.Maps.Maze.BinaryTreeMazeGenerator,Cave,Half)" methodname="ScatteredAreas" classname="PlayersWorlds.Maps.Maze.MazeGeneratorAreasTest" runstate="Runnable" seed="112777162" result="Skipped" label="Ignored" start-time="2024-02-20T15:16:50.3153720Z" end-time="2024-02-20T15:16:50.3154170Z" duration="0.000045" asserts="0" />
                <test-case id="1-1257" name="ScatteredAreas(PlayersWorlds.Maps.Maze.BinaryTreeMazeGenerator,Cave,ThreeQuarters)" fullname="PlayersWorlds.Maps.Maze.MazeGeneratorAreasTest.ScatteredAreas(PlayersWorlds.Maps.Maze.BinaryTreeMazeGenerator,Cave,ThreeQuarters)" methodname="ScatteredAreas" classname="PlayersWorlds.Maps.Maze.MazeGeneratorAreasTest" runstate="Runnable" seed="1398560888" result="Skipped" label="Ignored" start-time="2024-02-20T15:16:50.3154210Z" end-time="2024-02-20T15:16:50.3154660Z" duration="0.000045" asserts="0" />
                <test-case id="1-1258" name="ScatteredAreas(PlayersWorlds.Maps.Maze.BinaryTreeMazeGenerator,Cave,NinetyPercent)" fullname="PlayersWorlds.Maps.Maze.MazeGeneratorAreasTest.ScatteredAreas(PlayersWorlds.Maps.Maze.BinaryTreeMazeGenerator,Cave,NinetyPercent)" methodname="ScatteredAreas" classname="PlayersWorlds.Maps.Maze.MazeGeneratorAreasTest" runstate="Runnable" seed="537634116" result="Skipped" label="Ignored" start-time="2024-02-20T15:16:50.3154700Z" end-time="2024-02-20T15:16:50.3155140Z" duration="0.000044" asserts="0" />
                <test-case id="1-1259" name="ScatteredAreas(PlayersWorlds.Maps.Maze.BinaryTreeMazeGenerator,Cave,FullWidth)" fullname="PlayersWorlds.Maps.Maze.MazeGeneratorAreasTest.ScatteredAreas(PlayersWorlds.Maps.Maze.BinaryTreeMazeGenerator,Cave,FullWidth)" methodname="ScatteredAreas" classname="PlayersWorlds.Maps.Maze.MazeGeneratorAreasTest" runstate="Runnable" seed="989797926" result="Skipped" label="Ignored" start-time="2024-02-20T15:16:50.3155180Z" end-time="2024-02-20T15:16:50.3155630Z" duration="0.000044" asserts="0" />
                <test-case id="1-1260" name="ScatteredAreas(PlayersWorlds.Maps.Maze.BinaryTreeMazeGenerator,Cave,FullHeight)" fullname="PlayersWorlds.Maps.Maze.MazeGeneratorAreasTest.ScatteredAreas(PlayersWorlds.Maps.Maze.BinaryTreeMazeGenerator,Cave,FullHeight)" methodname="ScatteredAreas" classname="PlayersWorlds.Maps.Maze.MazeGeneratorAreasTest" runstate="Runnable" seed="1881465712" result="Skipped" label="Ignored" start-time="2024-02-20T15:16:50.3155670Z" end-time="2024-02-20T15:16:50.3156120Z" duration="0.000045" asserts="0" />
                <test-case id="1-1261" name="ScatteredAreas(PlayersWorlds.Maps.Maze.BinaryTreeMazeGenerator,Cave,Full)" fullname="PlayersWorlds.Maps.Maze.MazeGeneratorAreasTest.ScatteredAreas(PlayersWorlds.Maps.Maze.BinaryTreeMazeGenerator,Cave,Full)" methodname="ScatteredAreas" classname="PlayersWorlds.Maps.Maze.MazeGeneratorAreasTest" runstate="Runnable" seed="2026509982" result="Passed" start-time="2024-02-20T15:16:50.3156160Z" end-time="2024-02-20T15:16:50.4475880Z" duration="0.131973" asserts="20">
                  <output><![CDATA[BinaryTreeMazeGenerator: Generating maze 30x30 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x2;S2x2;Cave;, P24x24;S2x2;Cave;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.BinaryTreeMazeGenerator)
BinaryTreeMazeGenerator: Generating maze 30x30 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x2;S2x2;Cave;, P24x24;S2x2;Cave;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.BinaryTreeMazeGenerator)
BinaryTreeMazeGenerator: Generating maze 30x30 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x2;S2x2;Cave;, P24x24;S2x2;Cave;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.BinaryTreeMazeGenerator)
BinaryTreeMazeGenerator: Generating maze 30x30 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x2;S2x2;Cave;, P24x24;S2x2;Cave;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.BinaryTreeMazeGenerator)
BinaryTreeMazeGenerator: Generating maze 30x30 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x2;S2x2;Cave;, P24x24;S2x2;Cave;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.BinaryTreeMazeGenerator)
BinaryTreeMazeGenerator: Generating maze 30x30 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x2;S2x2;Cave;, P24x24;S2x2;Cave;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.BinaryTreeMazeGenerator)
BinaryTreeMazeGenerator: Generating maze 30x30 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x2;S2x2;Cave;, P24x24;S2x2;Cave;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.BinaryTreeMazeGenerator)
BinaryTreeMazeGenerator: Generating maze 30x30 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x2;S2x2;Cave;, P24x24;S2x2;Cave;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.BinaryTreeMazeGenerator)
BinaryTreeMazeGenerator: Generating maze 30x30 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x2;S2x2;Cave;, P24x24;S2x2;Cave;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.BinaryTreeMazeGenerator)
BinaryTreeMazeGenerator: Generating maze 30x30 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x2;S2x2;Cave;, P24x24;S2x2;Cave;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.BinaryTreeMazeGenerator)
]]></output>
                </test-case>
                <test-case id="1-1262" name="ScatteredAreas(PlayersWorlds.Maps.Maze.BinaryTreeMazeGenerator,Hall,Quarter)" fullname="PlayersWorlds.Maps.Maze.MazeGeneratorAreasTest.ScatteredAreas(PlayersWorlds.Maps.Maze.BinaryTreeMazeGenerator,Hall,Quarter)" methodname="ScatteredAreas" classname="PlayersWorlds.Maps.Maze.MazeGeneratorAreasTest" runstate="Runnable" seed="693225612" result="Skipped" label="Ignored" start-time="2024-02-20T15:16:50.4476070Z" end-time="2024-02-20T15:16:50.4482320Z" duration="0.000625" asserts="0" />
                <test-case id="1-1263" name="ScatteredAreas(PlayersWorlds.Maps.Maze.BinaryTreeMazeGenerator,Hall,Half)" fullname="PlayersWorlds.Maps.Maze.MazeGeneratorAreasTest.ScatteredAreas(PlayersWorlds.Maps.Maze.BinaryTreeMazeGenerator,Hall,Half)" methodname="ScatteredAreas" classname="PlayersWorlds.Maps.Maze.MazeGeneratorAreasTest" runstate="Runnable" seed="1987991930" result="Skipped" label="Ignored" start-time="2024-02-20T15:16:50.4482390Z" end-time="2024-02-20T15:16:50.4483010Z" duration="0.000061" asserts="0" />
                <test-case id="1-1264" name="ScatteredAreas(PlayersWorlds.Maps.Maze.BinaryTreeMazeGenerator,Hall,ThreeQuarters)" fullname="PlayersWorlds.Maps.Maze.MazeGeneratorAreasTest.ScatteredAreas(PlayersWorlds.Maps.Maze.BinaryTreeMazeGenerator,Hall,ThreeQuarters)" methodname="ScatteredAreas" classname="PlayersWorlds.Maps.Maze.MazeGeneratorAreasTest" runstate="Runnable" seed="1421566524" result="Skipped" label="Ignored" start-time="2024-02-20T15:16:50.4483050Z" end-time="2024-02-20T15:16:50.4483560Z" duration="0.000051" asserts="0" />
                <test-case id="1-1265" name="ScatteredAreas(PlayersWorlds.Maps.Maze.BinaryTreeMazeGenerator,Hall,NinetyPercent)" fullname="PlayersWorlds.Maps.Maze.MazeGeneratorAreasTest.ScatteredAreas(PlayersWorlds.Maps.Maze.BinaryTreeMazeGenerator,Hall,NinetyPercent)" methodname="ScatteredAreas" classname="PlayersWorlds.Maps.Maze.MazeGeneratorAreasTest" runstate="Runnable" seed="1438112696" result="Skipped" label="Ignored" start-time="2024-02-20T15:16:50.4483600Z" end-time="2024-02-20T15:16:50.4484090Z" duration="0.000049" asserts="0" />
                <test-case id="1-1266" name="ScatteredAreas(PlayersWorlds.Maps.Maze.BinaryTreeMazeGenerator,Hall,FullWidth)" fullname="PlayersWorlds.Maps.Maze.MazeGeneratorAreasTest.ScatteredAreas(PlayersWorlds.Maps.Maze.BinaryTreeMazeGenerator,Hall,FullWidth)" methodname="ScatteredAreas" classname="PlayersWorlds.Maps.Maze.MazeGeneratorAreasTest" runstate="Runnable" seed="1247781967" result="Skipped" label="Ignored" start-time="2024-02-20T15:16:50.4484140Z" end-time="2024-02-20T15:16:50.4484610Z" duration="0.000047" asserts="0" />
                <test-case id="1-1267" name="ScatteredAreas(PlayersWorlds.Maps.Maze.BinaryTreeMazeGenerator,Hall,FullHeight)" fullname="PlayersWorlds.Maps.Maze.MazeGeneratorAreasTest.ScatteredAreas(PlayersWorlds.Maps.Maze.BinaryTreeMazeGenerator,Hall,FullHeight)" methodname="ScatteredAreas" classname="PlayersWorlds.Maps.Maze.MazeGeneratorAreasTest" runstate="Runnable" seed="2027694662" result="Skipped" label="Ignored" start-time="2024-02-20T15:16:50.4484660Z" end-time="2024-02-20T15:16:50.4485110Z" duration="0.000045" asserts="0" />
                <test-case id="1-1268" name="ScatteredAreas(PlayersWorlds.Maps.Maze.BinaryTreeMazeGenerator,Hall,Full)" fullname="PlayersWorlds.Maps.Maze.MazeGeneratorAreasTest.ScatteredAreas(PlayersWorlds.Maps.Maze.BinaryTreeMazeGenerator,Hall,Full)" methodname="ScatteredAreas" classname="PlayersWorlds.Maps.Maze.MazeGeneratorAreasTest" runstate="Runnable" seed="886515692" result="Passed" start-time="2024-02-20T15:16:50.4485160Z" end-time="2024-02-20T15:16:50.5776540Z" duration="0.129139" asserts="20">
                  <output><![CDATA[BinaryTreeMazeGenerator: Generating maze 30x30 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x2;S2x2;Hall;, P24x24;S2x2;Hall;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.BinaryTreeMazeGenerator)
BinaryTreeMazeGenerator: Generating maze 30x30 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x2;S2x2;Hall;, P24x24;S2x2;Hall;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.BinaryTreeMazeGenerator)
BinaryTreeMazeGenerator: Generating maze 30x30 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x2;S2x2;Hall;, P24x24;S2x2;Hall;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.BinaryTreeMazeGenerator)
BinaryTreeMazeGenerator: Generating maze 30x30 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x2;S2x2;Hall;, P24x24;S2x2;Hall;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.BinaryTreeMazeGenerator)
BinaryTreeMazeGenerator: Generating maze 30x30 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x2;S2x2;Hall;, P24x24;S2x2;Hall;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.BinaryTreeMazeGenerator)
BinaryTreeMazeGenerator: Generating maze 30x30 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x2;S2x2;Hall;, P24x24;S2x2;Hall;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.BinaryTreeMazeGenerator)
BinaryTreeMazeGenerator: Generating maze 30x30 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x2;S2x2;Hall;, P24x24;S2x2;Hall;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.BinaryTreeMazeGenerator)
BinaryTreeMazeGenerator: Generating maze 30x30 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x2;S2x2;Hall;, P24x24;S2x2;Hall;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.BinaryTreeMazeGenerator)
BinaryTreeMazeGenerator: Generating maze 30x30 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x2;S2x2;Hall;, P24x24;S2x2;Hall;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.BinaryTreeMazeGenerator)
BinaryTreeMazeGenerator: Generating maze 30x30 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x2;S2x2;Hall;, P24x24;S2x2;Hall;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.BinaryTreeMazeGenerator)
]]></output>
                </test-case>
                <test-case id="1-1269" name="ScatteredAreas(PlayersWorlds.Maps.Maze.BinaryTreeMazeGenerator,Fill,Quarter)" fullname="PlayersWorlds.Maps.Maze.MazeGeneratorAreasTest.ScatteredAreas(PlayersWorlds.Maps.Maze.BinaryTreeMazeGenerator,Fill,Quarter)" methodname="ScatteredAreas" classname="PlayersWorlds.Maps.Maze.MazeGeneratorAreasTest" runstate="Runnable" seed="1962354938" result="Skipped" label="Ignored" start-time="2024-02-20T15:16:50.5776730Z" end-time="2024-02-20T15:16:50.5777890Z" duration="0.000116" asserts="0" />
                <test-case id="1-1270" name="ScatteredAreas(PlayersWorlds.Maps.Maze.BinaryTreeMazeGenerator,Fill,Half)" fullname="PlayersWorlds.Maps.Maze.MazeGeneratorAreasTest.ScatteredAreas(PlayersWorlds.Maps.Maze.BinaryTreeMazeGenerator,Fill,Half)" methodname="ScatteredAreas" classname="PlayersWorlds.Maps.Maze.MazeGeneratorAreasTest" runstate="Runnable" seed="1954771759" result="Skipped" label="Ignored" start-time="2024-02-20T15:16:50.5777950Z" end-time="2024-02-20T15:16:50.5778560Z" duration="0.000062" asserts="0" />
                <test-case id="1-1271" name="ScatteredAreas(PlayersWorlds.Maps.Maze.BinaryTreeMazeGenerator,Fill,ThreeQuarters)" fullname="PlayersWorlds.Maps.Maze.MazeGeneratorAreasTest.ScatteredAreas(PlayersWorlds.Maps.Maze.BinaryTreeMazeGenerator,Fill,ThreeQuarters)" methodname="ScatteredAreas" classname="PlayersWorlds.Maps.Maze.MazeGeneratorAreasTest" runstate="Runnable" seed="1881231481" result="Skipped" label="Ignored" start-time="2024-02-20T15:16:50.5778610Z" end-time="2024-02-20T15:16:50.5779110Z" duration="0.000051" asserts="0" />
                <test-case id="1-1272" name="ScatteredAreas(PlayersWorlds.Maps.Maze.BinaryTreeMazeGenerator,Fill,NinetyPercent)" fullname="PlayersWorlds.Maps.Maze.MazeGeneratorAreasTest.ScatteredAreas(PlayersWorlds.Maps.Maze.BinaryTreeMazeGenerator,Fill,NinetyPercent)" methodname="ScatteredAreas" classname="PlayersWorlds.Maps.Maze.MazeGeneratorAreasTest" runstate="Runnable" seed="546543189" result="Skipped" label="Ignored" start-time="2024-02-20T15:16:50.5779160Z" end-time="2024-02-20T15:16:50.5779630Z" duration="0.000047" asserts="0" />
                <test-case id="1-1273" name="ScatteredAreas(PlayersWorlds.Maps.Maze.BinaryTreeMazeGenerator,Fill,FullWidth)" fullname="PlayersWorlds.Maps.Maze.MazeGeneratorAreasTest.ScatteredAreas(PlayersWorlds.Maps.Maze.BinaryTreeMazeGenerator,Fill,FullWidth)" methodname="ScatteredAreas" classname="PlayersWorlds.Maps.Maze.MazeGeneratorAreasTest" runstate="Runnable" seed="641951513" result="Skipped" label="Ignored" start-time="2024-02-20T15:16:50.5779670Z" end-time="2024-02-20T15:16:50.5780130Z" duration="0.000046" asserts="0" />
                <test-case id="1-1274" name="ScatteredAreas(PlayersWorlds.Maps.Maze.BinaryTreeMazeGenerator,Fill,FullHeight)" fullname="PlayersWorlds.Maps.Maze.MazeGeneratorAreasTest.ScatteredAreas(PlayersWorlds.Maps.Maze.BinaryTreeMazeGenerator,Fill,FullHeight)" methodname="ScatteredAreas" classname="PlayersWorlds.Maps.Maze.MazeGeneratorAreasTest" runstate="Runnable" seed="763057889" result="Skipped" label="Ignored" start-time="2024-02-20T15:16:50.5780180Z" end-time="2024-02-20T15:16:50.5780630Z" duration="0.000046" asserts="0" />
                <test-case id="1-1275" name="ScatteredAreas(PlayersWorlds.Maps.Maze.BinaryTreeMazeGenerator,Fill,Full)" fullname="PlayersWorlds.Maps.Maze.MazeGeneratorAreasTest.ScatteredAreas(PlayersWorlds.Maps.Maze.BinaryTreeMazeGenerator,Fill,Full)" methodname="ScatteredAreas" classname="PlayersWorlds.Maps.Maze.MazeGeneratorAreasTest" runstate="Runnable" seed="1649566695" result="Skipped" label="Ignored" start-time="2024-02-20T15:16:50.5780670Z" end-time="2024-02-20T15:16:50.5781120Z" duration="0.000045" asserts="0" />
                <test-case id="1-1276" name="ScatteredAreas(PlayersWorlds.Maps.Maze.HuntAndKillMazeGenerator,Cave,Quarter)" fullname="PlayersWorlds.Maps.Maze.MazeGeneratorAreasTest.ScatteredAreas(PlayersWorlds.Maps.Maze.HuntAndKillMazeGenerator,Cave,Quarter)" methodname="ScatteredAreas" classname="PlayersWorlds.Maps.Maze.MazeGeneratorAreasTest" runstate="Runnable" seed="684620292" result="Skipped" label="Ignored" start-time="2024-02-20T15:16:50.5781160Z" end-time="2024-02-20T15:16:50.5781620Z" duration="0.000046" asserts="0" />
                <test-case id="1-1277" name="ScatteredAreas(PlayersWorlds.Maps.Maze.HuntAndKillMazeGenerator,Cave,Half)" fullname="PlayersWorlds.Maps.Maze.MazeGeneratorAreasTest.ScatteredAreas(PlayersWorlds.Maps.Maze.HuntAndKillMazeGenerator,Cave,Half)" methodname="ScatteredAreas" classname="PlayersWorlds.Maps.Maze.MazeGeneratorAreasTest" runstate="Runnable" seed="115625143" result="Skipped" label="Ignored" start-time="2024-02-20T15:16:50.5781660Z" end-time="2024-02-20T15:16:50.5782110Z" duration="0.000045" asserts="0" />
                <test-case id="1-1278" name="ScatteredAreas(PlayersWorlds.Maps.Maze.HuntAndKillMazeGenerator,Cave,ThreeQuarters)" fullname="PlayersWorlds.Maps.Maze.MazeGeneratorAreasTest.ScatteredAreas(PlayersWorlds.Maps.Maze.HuntAndKillMazeGenerator,Cave,ThreeQuarters)" methodname="ScatteredAreas" classname="PlayersWorlds.Maps.Maze.MazeGeneratorAreasTest" runstate="Runnable" seed="1278394495" result="Skipped" label="Ignored" start-time="2024-02-20T15:16:50.5782150Z" end-time="2024-02-20T15:16:50.5782620Z" duration="0.000047" asserts="0" />
                <test-case id="1-1279" name="ScatteredAreas(PlayersWorlds.Maps.Maze.HuntAndKillMazeGenerator,Cave,NinetyPercent)" fullname="PlayersWorlds.Maps.Maze.MazeGeneratorAreasTest.ScatteredAreas(PlayersWorlds.Maps.Maze.HuntAndKillMazeGenerator,Cave,NinetyPercent)" methodname="ScatteredAreas" classname="PlayersWorlds.Maps.Maze.MazeGeneratorAreasTest" runstate="Runnable" seed="2130242683" result="Skipped" label="Ignored" start-time="2024-02-20T15:16:50.5782660Z" end-time="2024-02-20T15:16:50.5783140Z" duration="0.000048" asserts="0" />
                <test-case id="1-1280" name="ScatteredAreas(PlayersWorlds.Maps.Maze.HuntAndKillMazeGenerator,Cave,FullWidth)" fullname="PlayersWorlds.Maps.Maze.MazeGeneratorAreasTest.ScatteredAreas(PlayersWorlds.Maps.Maze.HuntAndKillMazeGenerator,Cave,FullWidth)" methodname="ScatteredAreas" classname="PlayersWorlds.Maps.Maze.MazeGeneratorAreasTest" runstate="Runnable" seed="1009721178" result="Skipped" label="Ignored" start-time="2024-02-20T15:16:50.5783180Z" end-time="2024-02-20T15:16:50.5783680Z" duration="0.000050" asserts="0" />
                <test-case id="1-1281" name="ScatteredAreas(PlayersWorlds.Maps.Maze.HuntAndKillMazeGenerator,Cave,FullHeight)" fullname="PlayersWorlds.Maps.Maze.MazeGeneratorAreasTest.ScatteredAreas(PlayersWorlds.Maps.Maze.HuntAndKillMazeGenerator,Cave,FullHeight)" methodname="ScatteredAreas" classname="PlayersWorlds.Maps.Maze.MazeGeneratorAreasTest" runstate="Runnable" seed="1158924543" result="Skipped" label="Ignored" start-time="2024-02-20T15:16:50.5783720Z" end-time="2024-02-20T15:16:50.5784180Z" duration="0.000046" asserts="0" />
                <test-case id="1-1282" name="ScatteredAreas(PlayersWorlds.Maps.Maze.HuntAndKillMazeGenerator,Cave,Full)" fullname="PlayersWorlds.Maps.Maze.MazeGeneratorAreasTest.ScatteredAreas(PlayersWorlds.Maps.Maze.HuntAndKillMazeGenerator,Cave,Full)" methodname="ScatteredAreas" classname="PlayersWorlds.Maps.Maze.MazeGeneratorAreasTest" runstate="Runnable" seed="1622264487" result="Passed" start-time="2024-02-20T15:16:50.5784220Z" end-time="2024-02-20T15:16:50.6831730Z" duration="0.104752" asserts="20">
                  <output><![CDATA[HuntAndKillMazeGenerator: Generating maze 30x30 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x2;S2x2;Cave;, P24x24;S2x2;Cave;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.HuntAndKillMazeGenerator)
HuntAndKillMazeGenerator: Generating maze 30x30 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x2;S2x2;Cave;, P24x24;S2x2;Cave;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.HuntAndKillMazeGenerator)
HuntAndKillMazeGenerator: Generating maze 30x30 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x2;S2x2;Cave;, P24x24;S2x2;Cave;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.HuntAndKillMazeGenerator)
HuntAndKillMazeGenerator: Generating maze 30x30 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x2;S2x2;Cave;, P24x24;S2x2;Cave;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.HuntAndKillMazeGenerator)
HuntAndKillMazeGenerator: Generating maze 30x30 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x2;S2x2;Cave;, P24x24;S2x2;Cave;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.HuntAndKillMazeGenerator)
HuntAndKillMazeGenerator: Generating maze 30x30 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x2;S2x2;Cave;, P24x24;S2x2;Cave;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.HuntAndKillMazeGenerator)
HuntAndKillMazeGenerator: Generating maze 30x30 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x2;S2x2;Cave;, P24x24;S2x2;Cave;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.HuntAndKillMazeGenerator)
HuntAndKillMazeGenerator: Generating maze 30x30 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x2;S2x2;Cave;, P24x24;S2x2;Cave;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.HuntAndKillMazeGenerator)
HuntAndKillMazeGenerator: Generating maze 30x30 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x2;S2x2;Cave;, P24x24;S2x2;Cave;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.HuntAndKillMazeGenerator)
HuntAndKillMazeGenerator: Generating maze 30x30 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x2;S2x2;Cave;, P24x24;S2x2;Cave;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.HuntAndKillMazeGenerator)
]]></output>
                </test-case>
                <test-case id="1-1283" name="ScatteredAreas(PlayersWorlds.Maps.Maze.HuntAndKillMazeGenerator,Hall,Quarter)" fullname="PlayersWorlds.Maps.Maze.MazeGeneratorAreasTest.ScatteredAreas(PlayersWorlds.Maps.Maze.HuntAndKillMazeGenerator,Hall,Quarter)" methodname="ScatteredAreas" classname="PlayersWorlds.Maps.Maze.MazeGeneratorAreasTest" runstate="Runnable" seed="1717180591" result="Skipped" label="Ignored" start-time="2024-02-20T15:16:50.6831920Z" end-time="2024-02-20T15:16:50.6833060Z" duration="0.000114" asserts="0" />
                <test-case id="1-1284" name="ScatteredAreas(PlayersWorlds.Maps.Maze.HuntAndKillMazeGenerator,Hall,Half)" fullname="PlayersWorlds.Maps.Maze.MazeGeneratorAreasTest.ScatteredAreas(PlayersWorlds.Maps.Maze.HuntAndKillMazeGenerator,Hall,Half)" methodname="ScatteredAreas" classname="PlayersWorlds.Maps.Maze.MazeGeneratorAreasTest" runstate="Runnable" seed="1441799014" result="Skipped" label="Ignored" start-time="2024-02-20T15:16:50.6833120Z" end-time="2024-02-20T15:16:50.6833720Z" duration="0.000060" asserts="0" />
                <test-case id="1-1285" name="ScatteredAreas(PlayersWorlds.Maps.Maze.HuntAndKillMazeGenerator,Hall,ThreeQuarters)" fullname="PlayersWorlds.Maps.Maze.MazeGeneratorAreasTest.ScatteredAreas(PlayersWorlds.Maps.Maze.HuntAndKillMazeGenerator,Hall,ThreeQuarters)" methodname="ScatteredAreas" classname="PlayersWorlds.Maps.Maze.MazeGeneratorAreasTest" runstate="Runnable" seed="1706500237" result="Skipped" label="Ignored" start-time="2024-02-20T15:16:50.6833770Z" end-time="2024-02-20T15:16:50.6834280Z" duration="0.000051" asserts="0" />
                <test-case id="1-1286" name="ScatteredAreas(PlayersWorlds.Maps.Maze.HuntAndKillMazeGenerator,Hall,NinetyPercent)" fullname="PlayersWorlds.Maps.Maze.MazeGeneratorAreasTest.ScatteredAreas(PlayersWorlds.Maps.Maze.HuntAndKillMazeGenerator,Hall,NinetyPercent)" methodname="ScatteredAreas" classname="PlayersWorlds.Maps.Maze.MazeGeneratorAreasTest" runstate="Runnable" seed="619768804" result="Skipped" label="Ignored" start-time="2024-02-20T15:16:50.6834320Z" end-time="2024-02-20T15:16:50.6834810Z" duration="0.000049" asserts="0" />
                <test-case id="1-1287" name="ScatteredAreas(PlayersWorlds.Maps.Maze.HuntAndKillMazeGenerator,Hall,FullWidth)" fullname="PlayersWorlds.Maps.Maze.MazeGeneratorAreasTest.ScatteredAreas(PlayersWorlds.Maps.Maze.HuntAndKillMazeGenerator,Hall,FullWidth)" methodname="ScatteredAreas" classname="PlayersWorlds.Maps.Maze.MazeGeneratorAreasTest" runstate="Runnable" seed="2056299357" result="Skipped" label="Ignored" start-time="2024-02-20T15:16:50.6834850Z" end-time="2024-02-20T15:16:50.6835320Z" duration="0.000047" asserts="0" />
                <test-case id="1-1288" name="ScatteredAreas(PlayersWorlds.Maps.Maze.HuntAndKillMazeGenerator,Hall,FullHeight)" fullname="PlayersWorlds.Maps.Maze.MazeGeneratorAreasTest.ScatteredAreas(PlayersWorlds.Maps.Maze.HuntAndKillMazeGenerator,Hall,FullHeight)" methodname="ScatteredAreas" classname="PlayersWorlds.Maps.Maze.MazeGeneratorAreasTest" runstate="Runnable" seed="795318794" result="Skipped" label="Ignored" start-time="2024-02-20T15:16:50.6835360Z" end-time="2024-02-20T15:16:50.6835820Z" duration="0.000046" asserts="0" />
                <test-case id="1-1289" name="ScatteredAreas(PlayersWorlds.Maps.Maze.HuntAndKillMazeGenerator,Hall,Full)" fullname="PlayersWorlds.Maps.Maze.MazeGeneratorAreasTest.ScatteredAreas(PlayersWorlds.Maps.Maze.HuntAndKillMazeGenerator,Hall,Full)" methodname="ScatteredAreas" classname="PlayersWorlds.Maps.Maze.MazeGeneratorAreasTest" runstate="Runnable" seed="508101781" result="Passed" start-time="2024-02-20T15:16:50.6835860Z" end-time="2024-02-20T15:16:50.7822290Z" duration="0.098644" asserts="20">
                  <output><![CDATA[HuntAndKillMazeGenerator: Generating maze 30x30 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x2;S2x2;Hall;, P24x24;S2x2;Hall;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.HuntAndKillMazeGenerator)
HuntAndKillMazeGenerator: Generating maze 30x30 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x2;S2x2;Hall;, P24x24;S2x2;Hall;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.HuntAndKillMazeGenerator)
HuntAndKillMazeGenerator: Generating maze 30x30 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x2;S2x2;Hall;, P24x24;S2x2;Hall;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.HuntAndKillMazeGenerator)
HuntAndKillMazeGenerator: Generating maze 30x30 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x2;S2x2;Hall;, P24x24;S2x2;Hall;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.HuntAndKillMazeGenerator)
HuntAndKillMazeGenerator: Generating maze 30x30 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x2;S2x2;Hall;, P24x24;S2x2;Hall;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.HuntAndKillMazeGenerator)
HuntAndKillMazeGenerator: Generating maze 30x30 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x2;S2x2;Hall;, P24x24;S2x2;Hall;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.HuntAndKillMazeGenerator)
HuntAndKillMazeGenerator: Generating maze 30x30 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x2;S2x2;Hall;, P24x24;S2x2;Hall;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.HuntAndKillMazeGenerator)
HuntAndKillMazeGenerator: Generating maze 30x30 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x2;S2x2;Hall;, P24x24;S2x2;Hall;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.HuntAndKillMazeGenerator)
HuntAndKillMazeGenerator: Generating maze 30x30 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x2;S2x2;Hall;, P24x24;S2x2;Hall;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.HuntAndKillMazeGenerator)
HuntAndKillMazeGenerator: Generating maze 30x30 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x2;S2x2;Hall;, P24x24;S2x2;Hall;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.HuntAndKillMazeGenerator)
]]></output>
                </test-case>
                <test-case id="1-1290" name="ScatteredAreas(PlayersWorlds.Maps.Maze.HuntAndKillMazeGenerator,Fill,Quarter)" fullname="PlayersWorlds.Maps.Maze.MazeGeneratorAreasTest.ScatteredAreas(PlayersWorlds.Maps.Maze.HuntAndKillMazeGenerator,Fill,Quarter)" methodname="ScatteredAreas" classname="PlayersWorlds.Maps.Maze.MazeGeneratorAreasTest" runstate="Runnable" seed="810355811" result="Skipped" label="Ignored" start-time="2024-02-20T15:16:50.7822470Z" end-time="2024-02-20T15:16:50.7823580Z" duration="0.000111" asserts="0" />
                <test-case id="1-1291" name="ScatteredAreas(PlayersWorlds.Maps.Maze.HuntAndKillMazeGenerator,Fill,Half)" fullname="PlayersWorlds.Maps.Maze.MazeGeneratorAreasTest.ScatteredAreas(PlayersWorlds.Maps.Maze.HuntAndKillMazeGenerator,Fill,Half)" methodname="ScatteredAreas" classname="PlayersWorlds.Maps.Maze.MazeGeneratorAreasTest" runstate="Runnable" seed="42448751" result="Skipped" label="Ignored" start-time="2024-02-20T15:16:50.7823630Z" end-time="2024-02-20T15:16:50.7824240Z" duration="0.000061" asserts="0" />
                <test-case id="1-1292" name="ScatteredAreas(PlayersWorlds.Maps.Maze.HuntAndKillMazeGenerator,Fill,ThreeQuarters)" fullname="PlayersWorlds.Maps.Maze.MazeGeneratorAreasTest.ScatteredAreas(PlayersWorlds.Maps.Maze.HuntAndKillMazeGenerator,Fill,ThreeQuarters)" methodname="ScatteredAreas" classname="PlayersWorlds.Maps.Maze.MazeGeneratorAreasTest" runstate="Runnable" seed="1217246933" result="Skipped" label="Ignored" start-time="2024-02-20T15:16:50.7824290Z" end-time="2024-02-20T15:16:50.7824800Z" duration="0.000051" asserts="0" />
                <test-case id="1-1293" name="ScatteredAreas(PlayersWorlds.Maps.Maze.HuntAndKillMazeGenerator,Fill,NinetyPercent)" fullname="PlayersWorlds.Maps.Maze.MazeGeneratorAreasTest.ScatteredAreas(PlayersWorlds.Maps.Maze.HuntAndKillMazeGenerator,Fill,NinetyPercent)" methodname="ScatteredAreas" classname="PlayersWorlds.Maps.Maze.MazeGeneratorAreasTest" runstate="Runnable" seed="287171399" result="Skipped" label="Ignored" start-time="2024-02-20T15:16:50.7824840Z" end-time="2024-02-20T15:16:50.7825320Z" duration="0.000048" asserts="0" />
                <test-case id="1-1294" name="ScatteredAreas(PlayersWorlds.Maps.Maze.HuntAndKillMazeGenerator,Fill,FullWidth)" fullname="PlayersWorlds.Maps.Maze.MazeGeneratorAreasTest.ScatteredAreas(PlayersWorlds.Maps.Maze.HuntAndKillMazeGenerator,Fill,FullWidth)" methodname="ScatteredAreas" classname="PlayersWorlds.Maps.Maze.MazeGeneratorAreasTest" runstate="Runnable" seed="107730393" result="Skipped" label="Ignored" start-time="2024-02-20T15:16:50.7825360Z" end-time="2024-02-20T15:16:50.7825820Z" duration="0.000046" asserts="0" />
                <test-case id="1-1295" name="ScatteredAreas(PlayersWorlds.Maps.Maze.HuntAndKillMazeGenerator,Fill,FullHeight)" fullname="PlayersWorlds.Maps.Maze.MazeGeneratorAreasTest.ScatteredAreas(PlayersWorlds.Maps.Maze.HuntAndKillMazeGenerator,Fill,FullHeight)" methodname="ScatteredAreas" classname="PlayersWorlds.Maps.Maze.MazeGeneratorAreasTest" runstate="Runnable" seed="696161483" result="Skipped" label="Ignored" start-time="2024-02-20T15:16:50.7825860Z" end-time="2024-02-20T15:16:50.7826320Z" duration="0.000046" asserts="0" />
                <test-case id="1-1296" name="ScatteredAreas(PlayersWorlds.Maps.Maze.HuntAndKillMazeGenerator,Fill,Full)" fullname="PlayersWorlds.Maps.Maze.MazeGeneratorAreasTest.ScatteredAreas(PlayersWorlds.Maps.Maze.HuntAndKillMazeGenerator,Fill,Full)" methodname="ScatteredAreas" classname="PlayersWorlds.Maps.Maze.MazeGeneratorAreasTest" runstate="Runnable" seed="279333351" result="Skipped" label="Ignored" start-time="2024-02-20T15:16:50.7826360Z" end-time="2024-02-20T15:16:50.7826810Z" duration="0.000045" asserts="0" />
                <test-case id="1-1297" name="ScatteredAreas(PlayersWorlds.Maps.Maze.RecursiveBacktrackerMazeGenerator,Cave,Quarter)" fullname="PlayersWorlds.Maps.Maze.MazeGeneratorAreasTest.ScatteredAreas(PlayersWorlds.Maps.Maze.RecursiveBacktrackerMazeGenerator,Cave,Quarter)" methodname="ScatteredAreas" classname="PlayersWorlds.Maps.Maze.MazeGeneratorAreasTest" runstate="Runnable" seed="411314604" result="Skipped" label="Ignored" start-time="2024-02-20T15:16:50.7826860Z" end-time="2024-02-20T15:16:50.7827310Z" duration="0.000045" asserts="0" />
                <test-case id="1-1298" name="ScatteredAreas(PlayersWorlds.Maps.Maze.RecursiveBacktrackerMazeGenerator,Cave,Half)" fullname="PlayersWorlds.Maps.Maze.MazeGeneratorAreasTest.ScatteredAreas(PlayersWorlds.Maps.Maze.RecursiveBacktrackerMazeGenerator,Cave,Half)" methodname="ScatteredAreas" classname="PlayersWorlds.Maps.Maze.MazeGeneratorAreasTest" runstate="Runnable" seed="1650578414" result="Skipped" label="Ignored" start-time="2024-02-20T15:16:50.7827350Z" end-time="2024-02-20T15:16:50.7827800Z" duration="0.000045" asserts="0" />
                <test-case id="1-1299" name="ScatteredAreas(PlayersWorlds.Maps.Maze.RecursiveBacktrackerMazeGenerator,Cave,ThreeQuarters)" fullname="PlayersWorlds.Maps.Maze.MazeGeneratorAreasTest.ScatteredAreas(PlayersWorlds.Maps.Maze.RecursiveBacktrackerMazeGenerator,Cave,ThreeQuarters)" methodname="ScatteredAreas" classname="PlayersWorlds.Maps.Maze.MazeGeneratorAreasTest" runstate="Runnable" seed="315406101" result="Skipped" label="Ignored" start-time="2024-02-20T15:16:50.7827840Z" end-time="2024-02-20T15:16:50.7828320Z" duration="0.000048" asserts="0" />
                <test-case id="1-1300" name="ScatteredAreas(PlayersWorlds.Maps.Maze.RecursiveBacktrackerMazeGenerator,Cave,NinetyPercent)" fullname="PlayersWorlds.Maps.Maze.MazeGeneratorAreasTest.ScatteredAreas(PlayersWorlds.Maps.Maze.RecursiveBacktrackerMazeGenerator,Cave,NinetyPercent)" methodname="ScatteredAreas" classname="PlayersWorlds.Maps.Maze.MazeGeneratorAreasTest" runstate="Runnable" seed="1980738045" result="Skipped" label="Ignored" start-time="2024-02-20T15:16:50.7828360Z" end-time="2024-02-20T15:16:50.7828830Z" duration="0.000047" asserts="0" />
                <test-case id="1-1301" name="ScatteredAreas(PlayersWorlds.Maps.Maze.RecursiveBacktrackerMazeGenerator,Cave,FullWidth)" fullname="PlayersWorlds.Maps.Maze.MazeGeneratorAreasTest.ScatteredAreas(PlayersWorlds.Maps.Maze.RecursiveBacktrackerMazeGenerator,Cave,FullWidth)" methodname="ScatteredAreas" classname="PlayersWorlds.Maps.Maze.MazeGeneratorAreasTest" runstate="Runnable" seed="1336646510" result="Skipped" label="Ignored" start-time="2024-02-20T15:16:50.7828880Z" end-time="2024-02-20T15:16:50.7829360Z" duration="0.000048" asserts="0" />
                <test-case id="1-1302" name="ScatteredAreas(PlayersWorlds.Maps.Maze.RecursiveBacktrackerMazeGenerator,Cave,FullHeight)" fullname="PlayersWorlds.Maps.Maze.MazeGeneratorAreasTest.ScatteredAreas(PlayersWorlds.Maps.Maze.RecursiveBacktrackerMazeGenerator,Cave,FullHeight)" methodname="ScatteredAreas" classname="PlayersWorlds.Maps.Maze.MazeGeneratorAreasTest" runstate="Runnable" seed="1521483393" result="Skipped" label="Ignored" start-time="2024-02-20T15:16:50.7829400Z" end-time="2024-02-20T15:16:50.7829870Z" duration="0.000047" asserts="0" />
                <test-case id="1-1303" name="ScatteredAreas(PlayersWorlds.Maps.Maze.RecursiveBacktrackerMazeGenerator,Cave,Full)" fullname="PlayersWorlds.Maps.Maze.MazeGeneratorAreasTest.ScatteredAreas(PlayersWorlds.Maps.Maze.RecursiveBacktrackerMazeGenerator,Cave,Full)" methodname="ScatteredAreas" classname="PlayersWorlds.Maps.Maze.MazeGeneratorAreasTest" runstate="Runnable" seed="386007284" result="Passed" start-time="2024-02-20T15:16:50.7829910Z" end-time="2024-02-20T15:16:50.8926570Z" duration="0.109667" asserts="20">
                  <output><![CDATA[RecursiveBacktrackerMazeGenerator: Generating maze 30x30 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x2;S2x2;Cave;, P24x24;S2x2;Cave;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.RecursiveBacktrackerMazeGenerator)
RecursiveBacktrackerMazeGenerator: Generating maze 30x30 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x2;S2x2;Cave;, P24x24;S2x2;Cave;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.RecursiveBacktrackerMazeGenerator)
RecursiveBacktrackerMazeGenerator: Generating maze 30x30 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x2;S2x2;Cave;, P24x24;S2x2;Cave;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.RecursiveBacktrackerMazeGenerator)
RecursiveBacktrackerMazeGenerator: Generating maze 30x30 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x2;S2x2;Cave;, P24x24;S2x2;Cave;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.RecursiveBacktrackerMazeGenerator)
RecursiveBacktrackerMazeGenerator: Generating maze 30x30 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x2;S2x2;Cave;, P24x24;S2x2;Cave;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.RecursiveBacktrackerMazeGenerator)
RecursiveBacktrackerMazeGenerator: Generating maze 30x30 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x2;S2x2;Cave;, P24x24;S2x2;Cave;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.RecursiveBacktrackerMazeGenerator)
RecursiveBacktrackerMazeGenerator: Generating maze 30x30 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x2;S2x2;Cave;, P24x24;S2x2;Cave;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.RecursiveBacktrackerMazeGenerator)
RecursiveBacktrackerMazeGenerator: Generating maze 30x30 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x2;S2x2;Cave;, P24x24;S2x2;Cave;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.RecursiveBacktrackerMazeGenerator)
RecursiveBacktrackerMazeGenerator: Generating maze 30x30 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x2;S2x2;Cave;, P24x24;S2x2;Cave;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.RecursiveBacktrackerMazeGenerator)
RecursiveBacktrackerMazeGenerator: Generating maze 30x30 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x2;S2x2;Cave;, P24x24;S2x2;Cave;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.RecursiveBacktrackerMazeGenerator)
]]></output>
                </test-case>
                <test-case id="1-1304" name="ScatteredAreas(PlayersWorlds.Maps.Maze.RecursiveBacktrackerMazeGenerator,Hall,Quarter)" fullname="PlayersWorlds.Maps.Maze.MazeGeneratorAreasTest.ScatteredAreas(PlayersWorlds.Maps.Maze.RecursiveBacktrackerMazeGenerator,Hall,Quarter)" methodname="ScatteredAreas" classname="PlayersWorlds.Maps.Maze.MazeGeneratorAreasTest" runstate="Runnable" seed="1339160324" result="Skipped" label="Ignored" start-time="2024-02-20T15:16:50.8926770Z" end-time="2024-02-20T15:16:50.8928050Z" duration="0.000128" asserts="0" />
                <test-case id="1-1305" name="ScatteredAreas(PlayersWorlds.Maps.Maze.RecursiveBacktrackerMazeGenerator,Hall,Half)" fullname="PlayersWorlds.Maps.Maze.MazeGeneratorAreasTest.ScatteredAreas(PlayersWorlds.Maps.Maze.RecursiveBacktrackerMazeGenerator,Hall,Half)" methodname="ScatteredAreas" classname="PlayersWorlds.Maps.Maze.MazeGeneratorAreasTest" runstate="Runnable" seed="1376113108" result="Skipped" label="Ignored" start-time="2024-02-20T15:16:50.8928110Z" end-time="2024-02-20T15:16:50.8928720Z" duration="0.000061" asserts="0" />
                <test-case id="1-1306" name="ScatteredAreas(PlayersWorlds.Maps.Maze.RecursiveBacktrackerMazeGenerator,Hall,ThreeQuarters)" fullname="PlayersWorlds.Maps.Maze.MazeGeneratorAreasTest.ScatteredAreas(PlayersWorlds.Maps.Maze.RecursiveBacktrackerMazeGenerator,Hall,ThreeQuarters)" methodname="ScatteredAreas" classname="PlayersWorlds.Maps.Maze.MazeGeneratorAreasTest" runstate="Runnable" seed="606143785" result="Skipped" label="Ignored" start-time="2024-02-20T15:16:50.8928760Z" end-time="2024-02-20T15:16:50.8929270Z" duration="0.000051" asserts="0" />
                <test-case id="1-1307" name="ScatteredAreas(PlayersWorlds.Maps.Maze.RecursiveBacktrackerMazeGenerator,Hall,NinetyPercent)" fullname="PlayersWorlds.Maps.Maze.MazeGeneratorAreasTest.ScatteredAreas(PlayersWorlds.Maps.Maze.RecursiveBacktrackerMazeGenerator,Hall,NinetyPercent)" methodname="ScatteredAreas" classname="PlayersWorlds.Maps.Maze.MazeGeneratorAreasTest" runstate="Runnable" seed="512737604" result="Skipped" label="Ignored" start-time="2024-02-20T15:16:50.8929320Z" end-time="2024-02-20T15:16:50.8929800Z" duration="0.000048" asserts="0" />
                <test-case id="1-1308" name="ScatteredAreas(PlayersWorlds.Maps.Maze.RecursiveBacktrackerMazeGenerator,Hall,FullWidth)" fullname="PlayersWorlds.Maps.Maze.MazeGeneratorAreasTest.ScatteredAreas(PlayersWorlds.Maps.Maze.RecursiveBacktrackerMazeGenerator,Hall,FullWidth)" methodname="ScatteredAreas" classname="PlayersWorlds.Maps.Maze.MazeGeneratorAreasTest" runstate="Runnable" seed="1562903450" result="Skipped" label="Ignored" start-time="2024-02-20T15:16:50.8929840Z" end-time="2024-02-20T15:16:50.8930310Z" duration="0.000047" asserts="0" />
                <test-case id="1-1309" name="ScatteredAreas(PlayersWorlds.Maps.Maze.RecursiveBacktrackerMazeGenerator,Hall,FullHeight)" fullname="PlayersWorlds.Maps.Maze.MazeGeneratorAreasTest.ScatteredAreas(PlayersWorlds.Maps.Maze.RecursiveBacktrackerMazeGenerator,Hall,FullHeight)" methodname="ScatteredAreas" classname="PlayersWorlds.Maps.Maze.MazeGeneratorAreasTest" runstate="Runnable" seed="130649750" result="Skipped" label="Ignored" start-time="2024-02-20T15:16:50.8930350Z" end-time="2024-02-20T15:16:50.8930800Z" duration="0.000046" asserts="0" />
                <test-case id="1-1310" name="ScatteredAreas(PlayersWorlds.Maps.Maze.RecursiveBacktrackerMazeGenerator,Hall,Full)" fullname="PlayersWorlds.Maps.Maze.MazeGeneratorAreasTest.ScatteredAreas(PlayersWorlds.Maps.Maze.RecursiveBacktrackerMazeGenerator,Hall,Full)" methodname="ScatteredAreas" classname="PlayersWorlds.Maps.Maze.MazeGeneratorAreasTest" runstate="Runnable" seed="320338452" result="Passed" start-time="2024-02-20T15:16:50.8930850Z" end-time="2024-02-20T15:16:50.9945040Z" duration="0.101420" asserts="20">
                  <output><![CDATA[RecursiveBacktrackerMazeGenerator: Generating maze 30x30 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x2;S2x2;Hall;, P24x24;S2x2;Hall;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.RecursiveBacktrackerMazeGenerator)
RecursiveBacktrackerMazeGenerator: Generating maze 30x30 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x2;S2x2;Hall;, P24x24;S2x2;Hall;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.RecursiveBacktrackerMazeGenerator)
RecursiveBacktrackerMazeGenerator: Generating maze 30x30 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x2;S2x2;Hall;, P24x24;S2x2;Hall;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.RecursiveBacktrackerMazeGenerator)
RecursiveBacktrackerMazeGenerator: Generating maze 30x30 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x2;S2x2;Hall;, P24x24;S2x2;Hall;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.RecursiveBacktrackerMazeGenerator)
RecursiveBacktrackerMazeGenerator: Generating maze 30x30 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x2;S2x2;Hall;, P24x24;S2x2;Hall;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.RecursiveBacktrackerMazeGenerator)
RecursiveBacktrackerMazeGenerator: Generating maze 30x30 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x2;S2x2;Hall;, P24x24;S2x2;Hall;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.RecursiveBacktrackerMazeGenerator)
RecursiveBacktrackerMazeGenerator: Generating maze 30x30 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x2;S2x2;Hall;, P24x24;S2x2;Hall;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.RecursiveBacktrackerMazeGenerator)
RecursiveBacktrackerMazeGenerator: Generating maze 30x30 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x2;S2x2;Hall;, P24x24;S2x2;Hall;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.RecursiveBacktrackerMazeGenerator)
RecursiveBacktrackerMazeGenerator: Generating maze 30x30 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x2;S2x2;Hall;, P24x24;S2x2;Hall;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.RecursiveBacktrackerMazeGenerator)
RecursiveBacktrackerMazeGenerator: Generating maze 30x30 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x2;S2x2;Hall;, P24x24;S2x2;Hall;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.RecursiveBacktrackerMazeGenerator)
]]></output>
                </test-case>
                <test-case id="1-1311" name="ScatteredAreas(PlayersWorlds.Maps.Maze.RecursiveBacktrackerMazeGenerator,Fill,Quarter)" fullname="PlayersWorlds.Maps.Maze.MazeGeneratorAreasTest.ScatteredAreas(PlayersWorlds.Maps.Maze.RecursiveBacktrackerMazeGenerator,Fill,Quarter)" methodname="ScatteredAreas" classname="PlayersWorlds.Maps.Maze.MazeGeneratorAreasTest" runstate="Runnable" seed="2144635666" result="Skipped" label="Ignored" start-time="2024-02-20T15:16:50.9945220Z" end-time="2024-02-20T15:16:50.9946330Z" duration="0.000111" asserts="0" />
                <test-case id="1-1312" name="ScatteredAreas(PlayersWorlds.Maps.Maze.RecursiveBacktrackerMazeGenerator,Fill,Half)" fullname="PlayersWorlds.Maps.Maze.MazeGeneratorAreasTest.ScatteredAreas(PlayersWorlds.Maps.Maze.RecursiveBacktrackerMazeGenerator,Fill,Half)" methodname="ScatteredAreas" classname="PlayersWorlds.Maps.Maze.MazeGeneratorAreasTest" runstate="Runnable" seed="120166393" result="Skipped" label="Ignored" start-time="2024-02-20T15:16:50.9946390Z" end-time="2024-02-20T15:16:50.9946990Z" duration="0.000060" asserts="0" />
                <test-case id="1-1313" name="ScatteredAreas(PlayersWorlds.Maps.Maze.RecursiveBacktrackerMazeGenerator,Fill,ThreeQuarters)" fullname="PlayersWorlds.Maps.Maze.MazeGeneratorAreasTest.ScatteredAreas(PlayersWorlds.Maps.Maze.RecursiveBacktrackerMazeGenerator,Fill,ThreeQuarters)" methodname="ScatteredAreas" classname="PlayersWorlds.Maps.Maze.MazeGeneratorAreasTest" runstate="Runnable" seed="554875080" result="Skipped" label="Ignored" start-time="2024-02-20T15:16:50.9947030Z" end-time="2024-02-20T15:16:50.9947550Z" duration="0.000052" asserts="0" />
                <test-case id="1-1314" name="ScatteredAreas(PlayersWorlds.Maps.Maze.RecursiveBacktrackerMazeGenerator,Fill,NinetyPercent)" fullname="PlayersWorlds.Maps.Maze.MazeGeneratorAreasTest.ScatteredAreas(PlayersWorlds.Maps.Maze.RecursiveBacktrackerMazeGenerator,Fill,NinetyPercent)" methodname="ScatteredAreas" classname="PlayersWorlds.Maps.Maze.MazeGeneratorAreasTest" runstate="Runnable" seed="2127560395" result="Skipped" label="Ignored" start-time="2024-02-20T15:16:50.9947600Z" end-time="2024-02-20T15:16:50.9948080Z" duration="0.000048" asserts="0" />
                <test-case id="1-1315" name="ScatteredAreas(PlayersWorlds.Maps.Maze.RecursiveBacktrackerMazeGenerator,Fill,FullWidth)" fullname="PlayersWorlds.Maps.Maze.MazeGeneratorAreasTest.ScatteredAreas(PlayersWorlds.Maps.Maze.RecursiveBacktrackerMazeGenerator,Fill,FullWidth)" methodname="ScatteredAreas" classname="PlayersWorlds.Maps.Maze.MazeGeneratorAreasTest" runstate="Runnable" seed="722541169" result="Skipped" label="Ignored" start-time="2024-02-20T15:16:50.9948120Z" end-time="2024-02-20T15:16:50.9948580Z" duration="0.000046" asserts="0" />
                <test-case id="1-1316" name="ScatteredAreas(PlayersWorlds.Maps.Maze.RecursiveBacktrackerMazeGenerator,Fill,FullHeight)" fullname="PlayersWorlds.Maps.Maze.MazeGeneratorAreasTest.ScatteredAreas(PlayersWorlds.Maps.Maze.RecursiveBacktrackerMazeGenerator,Fill,FullHeight)" methodname="ScatteredAreas" classname="PlayersWorlds.Maps.Maze.MazeGeneratorAreasTest" runstate="Runnable" seed="404245495" result="Skipped" label="Ignored" start-time="2024-02-20T15:16:50.9948620Z" end-time="2024-02-20T15:16:50.9949080Z" duration="0.000046" asserts="0" />
                <test-case id="1-1317" name="ScatteredAreas(PlayersWorlds.Maps.Maze.RecursiveBacktrackerMazeGenerator,Fill,Full)" fullname="PlayersWorlds.Maps.Maze.MazeGeneratorAreasTest.ScatteredAreas(PlayersWorlds.Maps.Maze.RecursiveBacktrackerMazeGenerator,Fill,Full)" methodname="ScatteredAreas" classname="PlayersWorlds.Maps.Maze.MazeGeneratorAreasTest" runstate="Runnable" seed="1123528668" result="Skipped" label="Ignored" start-time="2024-02-20T15:16:50.9949120Z" end-time="2024-02-20T15:16:50.9949560Z" duration="0.000044" asserts="0" />
                <test-case id="1-1318" name="ScatteredAreas(PlayersWorlds.Maps.Maze.SidewinderMazeGenerator,Cave,Quarter)" fullname="PlayersWorlds.Maps.Maze.MazeGeneratorAreasTest.ScatteredAreas(PlayersWorlds.Maps.Maze.SidewinderMazeGenerator,Cave,Quarter)" methodname="ScatteredAreas" classname="PlayersWorlds.Maps.Maze.MazeGeneratorAreasTest" runstate="Runnable" seed="546192916" result="Skipped" label="Ignored" start-time="2024-02-20T15:16:50.9949600Z" end-time="2024-02-20T15:16:50.9950050Z" duration="0.000045" asserts="0" />
                <test-case id="1-1319" name="ScatteredAreas(PlayersWorlds.Maps.Maze.SidewinderMazeGenerator,Cave,Half)" fullname="PlayersWorlds.Maps.Maze.MazeGeneratorAreasTest.ScatteredAreas(PlayersWorlds.Maps.Maze.SidewinderMazeGenerator,Cave,Half)" methodname="ScatteredAreas" classname="PlayersWorlds.Maps.Maze.MazeGeneratorAreasTest" runstate="Runnable" seed="1862549934" result="Skipped" label="Ignored" start-time="2024-02-20T15:16:50.9950090Z" end-time="2024-02-20T15:16:50.9950540Z" duration="0.000046" asserts="0" />
                <test-case id="1-1320" name="ScatteredAreas(PlayersWorlds.Maps.Maze.SidewinderMazeGenerator,Cave,ThreeQuarters)" fullname="PlayersWorlds.Maps.Maze.MazeGeneratorAreasTest.ScatteredAreas(PlayersWorlds.Maps.Maze.SidewinderMazeGenerator,Cave,ThreeQuarters)" methodname="ScatteredAreas" classname="PlayersWorlds.Maps.Maze.MazeGeneratorAreasTest" runstate="Runnable" seed="818343892" result="Skipped" label="Ignored" start-time="2024-02-20T15:16:50.9950580Z" end-time="2024-02-20T15:16:50.9951030Z" duration="0.000045" asserts="0" />
                <test-case id="1-1321" name="ScatteredAreas(PlayersWorlds.Maps.Maze.SidewinderMazeGenerator,Cave,NinetyPercent)" fullname="PlayersWorlds.Maps.Maze.MazeGeneratorAreasTest.ScatteredAreas(PlayersWorlds.Maps.Maze.SidewinderMazeGenerator,Cave,NinetyPercent)" methodname="ScatteredAreas" classname="PlayersWorlds.Maps.Maze.MazeGeneratorAreasTest" runstate="Runnable" seed="1338966257" result="Skipped" label="Ignored" start-time="2024-02-20T15:16:50.9951070Z" end-time="2024-02-20T15:16:50.9951550Z" duration="0.000048" asserts="0" />
                <test-case id="1-1322" name="ScatteredAreas(PlayersWorlds.Maps.Maze.SidewinderMazeGenerator,Cave,FullWidth)" fullname="PlayersWorlds.Maps.Maze.MazeGeneratorAreasTest.ScatteredAreas(PlayersWorlds.Maps.Maze.SidewinderMazeGenerator,Cave,FullWidth)" methodname="ScatteredAreas" classname="PlayersWorlds.Maps.Maze.MazeGeneratorAreasTest" runstate="Runnable" seed="1232375868" result="Skipped" label="Ignored" start-time="2024-02-20T15:16:50.9951590Z" end-time="2024-02-20T15:16:50.9952070Z" duration="0.000048" asserts="0" />
                <test-case id="1-1323" name="ScatteredAreas(PlayersWorlds.Maps.Maze.SidewinderMazeGenerator,Cave,FullHeight)" fullname="PlayersWorlds.Maps.Maze.MazeGeneratorAreasTest.ScatteredAreas(PlayersWorlds.Maps.Maze.SidewinderMazeGenerator,Cave,FullHeight)" methodname="ScatteredAreas" classname="PlayersWorlds.Maps.Maze.MazeGeneratorAreasTest" runstate="Runnable" seed="378413911" result="Skipped" label="Ignored" start-time="2024-02-20T15:16:50.9952120Z" end-time="2024-02-20T15:16:50.9952600Z" duration="0.000048" asserts="0" />
                <test-case id="1-1324" name="ScatteredAreas(PlayersWorlds.Maps.Maze.SidewinderMazeGenerator,Cave,Full)" fullname="PlayersWorlds.Maps.Maze.MazeGeneratorAreasTest.ScatteredAreas(PlayersWorlds.Maps.Maze.SidewinderMazeGenerator,Cave,Full)" methodname="ScatteredAreas" classname="PlayersWorlds.Maps.Maze.MazeGeneratorAreasTest" runstate="Runnable" seed="1151999127" result="Passed" start-time="2024-02-20T15:16:50.9952640Z" end-time="2024-02-20T15:16:51.1420040Z" duration="0.146740" asserts="20">
                  <output><![CDATA[SidewinderMazeGenerator: Generating maze 30x30 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x2;S2x2;Cave;, P24x24;S2x2;Cave;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.SidewinderMazeGenerator)
SidewinderMazeGenerator: Generating maze 30x30 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x2;S2x2;Cave;, P24x24;S2x2;Cave;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.SidewinderMazeGenerator)
SidewinderMazeGenerator: Generating maze 30x30 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x2;S2x2;Cave;, P24x24;S2x2;Cave;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.SidewinderMazeGenerator)
SidewinderMazeGenerator: Generating maze 30x30 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x2;S2x2;Cave;, P24x24;S2x2;Cave;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.SidewinderMazeGenerator)
SidewinderMazeGenerator: Generating maze 30x30 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x2;S2x2;Cave;, P24x24;S2x2;Cave;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.SidewinderMazeGenerator)
SidewinderMazeGenerator: Generating maze 30x30 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x2;S2x2;Cave;, P24x24;S2x2;Cave;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.SidewinderMazeGenerator)
SidewinderMazeGenerator: Generating maze 30x30 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x2;S2x2;Cave;, P24x24;S2x2;Cave;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.SidewinderMazeGenerator)
SidewinderMazeGenerator: Generating maze 30x30 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x2;S2x2;Cave;, P24x24;S2x2;Cave;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.SidewinderMazeGenerator)
SidewinderMazeGenerator: Generating maze 30x30 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x2;S2x2;Cave;, P24x24;S2x2;Cave;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.SidewinderMazeGenerator)
SidewinderMazeGenerator: Generating maze 30x30 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x2;S2x2;Cave;, P24x24;S2x2;Cave;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.SidewinderMazeGenerator)
]]></output>
                </test-case>
                <test-case id="1-1325" name="ScatteredAreas(PlayersWorlds.Maps.Maze.SidewinderMazeGenerator,Hall,Quarter)" fullname="PlayersWorlds.Maps.Maze.MazeGeneratorAreasTest.ScatteredAreas(PlayersWorlds.Maps.Maze.SidewinderMazeGenerator,Hall,Quarter)" methodname="ScatteredAreas" classname="PlayersWorlds.Maps.Maze.MazeGeneratorAreasTest" runstate="Runnable" seed="1912323008" result="Skipped" label="Ignored" start-time="2024-02-20T15:16:51.1420210Z" end-time="2024-02-20T15:16:51.1421240Z" duration="0.000104" asserts="0" />
                <test-case id="1-1326" name="ScatteredAreas(PlayersWorlds.Maps.Maze.SidewinderMazeGenerator,Hall,Half)" fullname="PlayersWorlds.Maps.Maze.MazeGeneratorAreasTest.ScatteredAreas(PlayersWorlds.Maps.Maze.SidewinderMazeGenerator,Hall,Half)" methodname="ScatteredAreas" classname="PlayersWorlds.Maps.Maze.MazeGeneratorAreasTest" runstate="Runnable" seed="663984548" result="Skipped" label="Ignored" start-time="2024-02-20T15:16:51.1421300Z" end-time="2024-02-20T15:16:51.1421890Z" duration="0.000059" asserts="0" />
                <test-case id="1-1327" name="ScatteredAreas(PlayersWorlds.Maps.Maze.SidewinderMazeGenerator,Hall,ThreeQuarters)" fullname="PlayersWorlds.Maps.Maze.MazeGeneratorAreasTest.ScatteredAreas(PlayersWorlds.Maps.Maze.SidewinderMazeGenerator,Hall,ThreeQuarters)" methodname="ScatteredAreas" classname="PlayersWorlds.Maps.Maze.MazeGeneratorAreasTest" runstate="Runnable" seed="259371790" result="Skipped" label="Ignored" start-time="2024-02-20T15:16:51.1421940Z" end-time="2024-02-20T15:16:51.1422450Z" duration="0.000051" asserts="0" />
                <test-case id="1-1328" name="ScatteredAreas(PlayersWorlds.Maps.Maze.SidewinderMazeGenerator,Hall,NinetyPercent)" fullname="PlayersWorlds.Maps.Maze.MazeGeneratorAreasTest.ScatteredAreas(PlayersWorlds.Maps.Maze.SidewinderMazeGenerator,Hall,NinetyPercent)" methodname="ScatteredAreas" classname="PlayersWorlds.Maps.Maze.MazeGeneratorAreasTest" runstate="Runnable" seed="534221120" result="Skipped" label="Ignored" start-time="2024-02-20T15:16:51.1422490Z" end-time="2024-02-20T15:16:51.1422970Z" duration="0.000048" asserts="0" />
                <test-case id="1-1329" name="ScatteredAreas(PlayersWorlds.Maps.Maze.SidewinderMazeGenerator,Hall,FullWidth)" fullname="PlayersWorlds.Maps.Maze.MazeGeneratorAreasTest.ScatteredAreas(PlayersWorlds.Maps.Maze.SidewinderMazeGenerator,Hall,FullWidth)" methodname="ScatteredAreas" classname="PlayersWorlds.Maps.Maze.MazeGeneratorAreasTest" runstate="Runnable" seed="66896406" result="Skipped" label="Ignored" start-time="2024-02-20T15:16:51.1423020Z" end-time="2024-02-20T15:16:51.1423480Z" duration="0.000046" asserts="0" />
                <test-case id="1-1330" name="ScatteredAreas(PlayersWorlds.Maps.Maze.SidewinderMazeGenerator,Hall,FullHeight)" fullname="PlayersWorlds.Maps.Maze.MazeGeneratorAreasTest.ScatteredAreas(PlayersWorlds.Maps.Maze.SidewinderMazeGenerator,Hall,FullHeight)" methodname="ScatteredAreas" classname="PlayersWorlds.Maps.Maze.MazeGeneratorAreasTest" runstate="Runnable" seed="1370233344" result="Skipped" label="Ignored" start-time="2024-02-20T15:16:51.1423520Z" end-time="2024-02-20T15:16:51.1423980Z" duration="0.000045" asserts="0" />
                <test-case id="1-1331" name="ScatteredAreas(PlayersWorlds.Maps.Maze.SidewinderMazeGenerator,Hall,Full)" fullname="PlayersWorlds.Maps.Maze.MazeGeneratorAreasTest.ScatteredAreas(PlayersWorlds.Maps.Maze.SidewinderMazeGenerator,Hall,Full)" methodname="ScatteredAreas" classname="PlayersWorlds.Maps.Maze.MazeGeneratorAreasTest" runstate="Runnable" seed="273305688" result="Passed" start-time="2024-02-20T15:16:51.1424030Z" end-time="2024-02-20T15:16:51.2828390Z" duration="0.140437" asserts="20">
                  <output><![CDATA[SidewinderMazeGenerator: Generating maze 30x30 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x2;S2x2;Hall;, P24x24;S2x2;Hall;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.SidewinderMazeGenerator)
SidewinderMazeGenerator: Generating maze 30x30 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x2;S2x2;Hall;, P24x24;S2x2;Hall;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.SidewinderMazeGenerator)
SidewinderMazeGenerator: Generating maze 30x30 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x2;S2x2;Hall;, P24x24;S2x2;Hall;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.SidewinderMazeGenerator)
SidewinderMazeGenerator: Generating maze 30x30 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x2;S2x2;Hall;, P24x24;S2x2;Hall;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.SidewinderMazeGenerator)
SidewinderMazeGenerator: Generating maze 30x30 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x2;S2x2;Hall;, P24x24;S2x2;Hall;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.SidewinderMazeGenerator)
SidewinderMazeGenerator: Generating maze 30x30 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x2;S2x2;Hall;, P24x24;S2x2;Hall;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.SidewinderMazeGenerator)
SidewinderMazeGenerator: Generating maze 30x30 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x2;S2x2;Hall;, P24x24;S2x2;Hall;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.SidewinderMazeGenerator)
SidewinderMazeGenerator: Generating maze 30x30 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x2;S2x2;Hall;, P24x24;S2x2;Hall;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.SidewinderMazeGenerator)
SidewinderMazeGenerator: Generating maze 30x30 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x2;S2x2;Hall;, P24x24;S2x2;Hall;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.SidewinderMazeGenerator)
SidewinderMazeGenerator: Generating maze 30x30 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x2;S2x2;Hall;, P24x24;S2x2;Hall;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.SidewinderMazeGenerator)
]]></output>
                </test-case>
                <test-case id="1-1332" name="ScatteredAreas(PlayersWorlds.Maps.Maze.SidewinderMazeGenerator,Fill,Quarter)" fullname="PlayersWorlds.Maps.Maze.MazeGeneratorAreasTest.ScatteredAreas(PlayersWorlds.Maps.Maze.SidewinderMazeGenerator,Fill,Quarter)" methodname="ScatteredAreas" classname="PlayersWorlds.Maps.Maze.MazeGeneratorAreasTest" runstate="Runnable" seed="612530376" result="Skipped" label="Ignored" start-time="2024-02-20T15:16:51.2828580Z" end-time="2024-02-20T15:16:51.2829690Z" duration="0.000111" asserts="0" />
                <test-case id="1-1333" name="ScatteredAreas(PlayersWorlds.Maps.Maze.SidewinderMazeGenerator,Fill,Half)" fullname="PlayersWorlds.Maps.Maze.MazeGeneratorAreasTest.ScatteredAreas(PlayersWorlds.Maps.Maze.SidewinderMazeGenerator,Fill,Half)" methodname="ScatteredAreas" classname="PlayersWorlds.Maps.Maze.MazeGeneratorAreasTest" runstate="Runnable" seed="962988394" result="Skipped" label="Ignored" start-time="2024-02-20T15:16:51.2829750Z" end-time="2024-02-20T15:16:51.2830340Z" duration="0.000059" asserts="0" />
                <test-case id="1-1334" name="ScatteredAreas(PlayersWorlds.Maps.Maze.SidewinderMazeGenerator,Fill,ThreeQuarters)" fullname="PlayersWorlds.Maps.Maze.MazeGeneratorAreasTest.ScatteredAreas(PlayersWorlds.Maps.Maze.SidewinderMazeGenerator,Fill,ThreeQuarters)" methodname="ScatteredAreas" classname="PlayersWorlds.Maps.Maze.MazeGeneratorAreasTest" runstate="Runnable" seed="149504638" result="Skipped" label="Ignored" start-time="2024-02-20T15:16:51.2830390Z" end-time="2024-02-20T15:16:51.2830910Z" duration="0.000052" asserts="0" />
                <test-case id="1-1335" name="ScatteredAreas(PlayersWorlds.Maps.Maze.SidewinderMazeGenerator,Fill,NinetyPercent)" fullname="PlayersWorlds.Maps.Maze.MazeGeneratorAreasTest.ScatteredAreas(PlayersWorlds.Maps.Maze.SidewinderMazeGenerator,Fill,NinetyPercent)" methodname="ScatteredAreas" classname="PlayersWorlds.Maps.Maze.MazeGeneratorAreasTest" runstate="Runnable" seed="1820558315" result="Skipped" label="Ignored" start-time="2024-02-20T15:16:51.2830950Z" end-time="2024-02-20T15:16:51.2831440Z" duration="0.000050" asserts="0" />
                <test-case id="1-1336" name="ScatteredAreas(PlayersWorlds.Maps.Maze.SidewinderMazeGenerator,Fill,FullWidth)" fullname="PlayersWorlds.Maps.Maze.MazeGeneratorAreasTest.ScatteredAreas(PlayersWorlds.Maps.Maze.SidewinderMazeGenerator,Fill,FullWidth)" methodname="ScatteredAreas" classname="PlayersWorlds.Maps.Maze.MazeGeneratorAreasTest" runstate="Runnable" seed="1784924797" result="Skipped" label="Ignored" start-time="2024-02-20T15:16:51.2831480Z" end-time="2024-02-20T15:16:51.2831950Z" duration="0.000047" asserts="0" />
                <test-case id="1-1337" name="ScatteredAreas(PlayersWorlds.Maps.Maze.SidewinderMazeGenerator,Fill,FullHeight)" fullname="PlayersWorlds.Maps.Maze.MazeGeneratorAreasTest.ScatteredAreas(PlayersWorlds.Maps.Maze.SidewinderMazeGenerator,Fill,FullHeight)" methodname="ScatteredAreas" classname="PlayersWorlds.Maps.Maze.MazeGeneratorAreasTest" runstate="Runnable" seed="1236257203" result="Skipped" label="Ignored" start-time="2024-02-20T15:16:51.2831990Z" end-time="2024-02-20T15:16:51.2832450Z" duration="0.000046" asserts="0" />
                <test-case id="1-1338" name="ScatteredAreas(PlayersWorlds.Maps.Maze.SidewinderMazeGenerator,Fill,Full)" fullname="PlayersWorlds.Maps.Maze.MazeGeneratorAreasTest.ScatteredAreas(PlayersWorlds.Maps.Maze.SidewinderMazeGenerator,Fill,Full)" methodname="ScatteredAreas" classname="PlayersWorlds.Maps.Maze.MazeGeneratorAreasTest" runstate="Runnable" seed="378020267" result="Skipped" label="Ignored" start-time="2024-02-20T15:16:51.2832490Z" end-time="2024-02-20T15:16:51.2832950Z" duration="0.000046" asserts="0" />
                <test-case id="1-1339" name="ScatteredAreas(PlayersWorlds.Maps.Maze.WilsonsMazeGenerator,Cave,Quarter)" fullname="PlayersWorlds.Maps.Maze.MazeGeneratorAreasTest.ScatteredAreas(PlayersWorlds.Maps.Maze.WilsonsMazeGenerator,Cave,Quarter)" methodname="ScatteredAreas" classname="PlayersWorlds.Maps.Maze.MazeGeneratorAreasTest" runstate="Runnable" seed="65685906" result="Passed" start-time="2024-02-20T15:16:51.2832990Z" end-time="2024-02-20T15:16:51.3595960Z" duration="0.076297" asserts="20">
                  <output><![CDATA[WilsonsMazeGenerator: Generating maze 30x30 with PlayersWorlds.Maps.Maze.GeneratorOptions(Quarter, Manual, List`1<MapArea>(P2x2;S2x2;Cave;, P24x24;S2x2;Cave;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.WilsonsMazeGenerator)
WilsonsMazeGenerator: Generating maze 30x30 with PlayersWorlds.Maps.Maze.GeneratorOptions(Quarter, Manual, List`1<MapArea>(P2x2;S2x2;Cave;, P24x24;S2x2;Cave;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.WilsonsMazeGenerator)
WilsonsMazeGenerator: Generating maze 30x30 with PlayersWorlds.Maps.Maze.GeneratorOptions(Quarter, Manual, List`1<MapArea>(P2x2;S2x2;Cave;, P24x24;S2x2;Cave;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.WilsonsMazeGenerator)
WilsonsMazeGenerator: Generating maze 30x30 with PlayersWorlds.Maps.Maze.GeneratorOptions(Quarter, Manual, List`1<MapArea>(P2x2;S2x2;Cave;, P24x24;S2x2;Cave;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.WilsonsMazeGenerator)
WilsonsMazeGenerator: Generating maze 30x30 with PlayersWorlds.Maps.Maze.GeneratorOptions(Quarter, Manual, List`1<MapArea>(P2x2;S2x2;Cave;, P24x24;S2x2;Cave;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.WilsonsMazeGenerator)
WilsonsMazeGenerator: Generating maze 30x30 with PlayersWorlds.Maps.Maze.GeneratorOptions(Quarter, Manual, List`1<MapArea>(P2x2;S2x2;Cave;, P24x24;S2x2;Cave;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.WilsonsMazeGenerator)
WilsonsMazeGenerator: Generating maze 30x30 with PlayersWorlds.Maps.Maze.GeneratorOptions(Quarter, Manual, List`1<MapArea>(P2x2;S2x2;Cave;, P24x24;S2x2;Cave;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.WilsonsMazeGenerator)
WilsonsMazeGenerator: Generating maze 30x30 with PlayersWorlds.Maps.Maze.GeneratorOptions(Quarter, Manual, List`1<MapArea>(P2x2;S2x2;Cave;, P24x24;S2x2;Cave;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.WilsonsMazeGenerator)
WilsonsMazeGenerator: Generating maze 30x30 with PlayersWorlds.Maps.Maze.GeneratorOptions(Quarter, Manual, List`1<MapArea>(P2x2;S2x2;Cave;, P24x24;S2x2;Cave;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.WilsonsMazeGenerator)
WilsonsMazeGenerator: Generating maze 30x30 with PlayersWorlds.Maps.Maze.GeneratorOptions(Quarter, Manual, List`1<MapArea>(P2x2;S2x2;Cave;, P24x24;S2x2;Cave;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.WilsonsMazeGenerator)
]]></output>
                </test-case>
                <test-case id="1-1340" name="ScatteredAreas(PlayersWorlds.Maps.Maze.WilsonsMazeGenerator,Cave,Half)" fullname="PlayersWorlds.Maps.Maze.MazeGeneratorAreasTest.ScatteredAreas(PlayersWorlds.Maps.Maze.WilsonsMazeGenerator,Cave,Half)" methodname="ScatteredAreas" classname="PlayersWorlds.Maps.Maze.MazeGeneratorAreasTest" runstate="Runnable" seed="1100356452" result="Passed" start-time="2024-02-20T15:16:51.3596140Z" end-time="2024-02-20T15:16:51.4495040Z" duration="0.089890" asserts="20">
                  <output><![CDATA[WilsonsMazeGenerator: Generating maze 30x30 with PlayersWorlds.Maps.Maze.GeneratorOptions(Half, Manual, List`1<MapArea>(P2x2;S2x2;Cave;, P24x24;S2x2;Cave;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.WilsonsMazeGenerator)
WilsonsMazeGenerator: Generating maze 30x30 with PlayersWorlds.Maps.Maze.GeneratorOptions(Half, Manual, List`1<MapArea>(P2x2;S2x2;Cave;, P24x24;S2x2;Cave;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.WilsonsMazeGenerator)
WilsonsMazeGenerator: Generating maze 30x30 with PlayersWorlds.Maps.Maze.GeneratorOptions(Half, Manual, List`1<MapArea>(P2x2;S2x2;Cave;, P24x24;S2x2;Cave;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.WilsonsMazeGenerator)
WilsonsMazeGenerator: Generating maze 30x30 with PlayersWorlds.Maps.Maze.GeneratorOptions(Half, Manual, List`1<MapArea>(P2x2;S2x2;Cave;, P24x24;S2x2;Cave;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.WilsonsMazeGenerator)
WilsonsMazeGenerator: Generating maze 30x30 with PlayersWorlds.Maps.Maze.GeneratorOptions(Half, Manual, List`1<MapArea>(P2x2;S2x2;Cave;, P24x24;S2x2;Cave;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.WilsonsMazeGenerator)
WilsonsMazeGenerator: Generating maze 30x30 with PlayersWorlds.Maps.Maze.GeneratorOptions(Half, Manual, List`1<MapArea>(P2x2;S2x2;Cave;, P24x24;S2x2;Cave;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.WilsonsMazeGenerator)
WilsonsMazeGenerator: Generating maze 30x30 with PlayersWorlds.Maps.Maze.GeneratorOptions(Half, Manual, List`1<MapArea>(P2x2;S2x2;Cave;, P24x24;S2x2;Cave;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.WilsonsMazeGenerator)
WilsonsMazeGenerator: Generating maze 30x30 with PlayersWorlds.Maps.Maze.GeneratorOptions(Half, Manual, List`1<MapArea>(P2x2;S2x2;Cave;, P24x24;S2x2;Cave;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.WilsonsMazeGenerator)
WilsonsMazeGenerator: Generating maze 30x30 with PlayersWorlds.Maps.Maze.GeneratorOptions(Half, Manual, List`1<MapArea>(P2x2;S2x2;Cave;, P24x24;S2x2;Cave;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.WilsonsMazeGenerator)
WilsonsMazeGenerator: Generating maze 30x30 with PlayersWorlds.Maps.Maze.GeneratorOptions(Half, Manual, List`1<MapArea>(P2x2;S2x2;Cave;, P24x24;S2x2;Cave;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.WilsonsMazeGenerator)
]]></output>
                </test-case>
                <test-case id="1-1341" name="ScatteredAreas(PlayersWorlds.Maps.Maze.WilsonsMazeGenerator,Cave,ThreeQuarters)" fullname="PlayersWorlds.Maps.Maze.MazeGeneratorAreasTest.ScatteredAreas(PlayersWorlds.Maps.Maze.WilsonsMazeGenerator,Cave,ThreeQuarters)" methodname="ScatteredAreas" classname="PlayersWorlds.Maps.Maze.MazeGeneratorAreasTest" runstate="Runnable" seed="107031200" result="Passed" start-time="2024-02-20T15:16:51.4495220Z" end-time="2024-02-20T15:16:51.5618550Z" duration="0.112333" asserts="20">
                  <output><![CDATA[WilsonsMazeGenerator: Generating maze 30x30 with PlayersWorlds.Maps.Maze.GeneratorOptions(ThreeQuarters, Manual, List`1<MapArea>(P2x2;S2x2;Cave;, P24x24;S2x2;Cave;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.WilsonsMazeGenerator)
WilsonsMazeGenerator: Generating maze 30x30 with PlayersWorlds.Maps.Maze.GeneratorOptions(ThreeQuarters, Manual, List`1<MapArea>(P2x2;S2x2;Cave;, P24x24;S2x2;Cave;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.WilsonsMazeGenerator)
WilsonsMazeGenerator: Generating maze 30x30 with PlayersWorlds.Maps.Maze.GeneratorOptions(ThreeQuarters, Manual, List`1<MapArea>(P2x2;S2x2;Cave;, P24x24;S2x2;Cave;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.WilsonsMazeGenerator)
WilsonsMazeGenerator: Generating maze 30x30 with PlayersWorlds.Maps.Maze.GeneratorOptions(ThreeQuarters, Manual, List`1<MapArea>(P2x2;S2x2;Cave;, P24x24;S2x2;Cave;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.WilsonsMazeGenerator)
WilsonsMazeGenerator: Generating maze 30x30 with PlayersWorlds.Maps.Maze.GeneratorOptions(ThreeQuarters, Manual, List`1<MapArea>(P2x2;S2x2;Cave;, P24x24;S2x2;Cave;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.WilsonsMazeGenerator)
WilsonsMazeGenerator: Generating maze 30x30 with PlayersWorlds.Maps.Maze.GeneratorOptions(ThreeQuarters, Manual, List`1<MapArea>(P2x2;S2x2;Cave;, P24x24;S2x2;Cave;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.WilsonsMazeGenerator)
WilsonsMazeGenerator: Generating maze 30x30 with PlayersWorlds.Maps.Maze.GeneratorOptions(ThreeQuarters, Manual, List`1<MapArea>(P2x2;S2x2;Cave;, P24x24;S2x2;Cave;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.WilsonsMazeGenerator)
WilsonsMazeGenerator: Generating maze 30x30 with PlayersWorlds.Maps.Maze.GeneratorOptions(ThreeQuarters, Manual, List`1<MapArea>(P2x2;S2x2;Cave;, P24x24;S2x2;Cave;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.WilsonsMazeGenerator)
WilsonsMazeGenerator: Generating maze 30x30 with PlayersWorlds.Maps.Maze.GeneratorOptions(ThreeQuarters, Manual, List`1<MapArea>(P2x2;S2x2;Cave;, P24x24;S2x2;Cave;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.WilsonsMazeGenerator)
WilsonsMazeGenerator: Generating maze 30x30 with PlayersWorlds.Maps.Maze.GeneratorOptions(ThreeQuarters, Manual, List`1<MapArea>(P2x2;S2x2;Cave;, P24x24;S2x2;Cave;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.WilsonsMazeGenerator)
]]></output>
                </test-case>
                <test-case id="1-1342" name="ScatteredAreas(PlayersWorlds.Maps.Maze.WilsonsMazeGenerator,Cave,NinetyPercent)" fullname="PlayersWorlds.Maps.Maze.MazeGeneratorAreasTest.ScatteredAreas(PlayersWorlds.Maps.Maze.WilsonsMazeGenerator,Cave,NinetyPercent)" methodname="ScatteredAreas" classname="PlayersWorlds.Maps.Maze.MazeGeneratorAreasTest" runstate="Runnable" seed="493395907" result="Passed" start-time="2024-02-20T15:16:51.5618730Z" end-time="2024-02-20T15:16:51.6844830Z" duration="0.122610" asserts="20">
                  <output><![CDATA[WilsonsMazeGenerator: Generating maze 30x30 with PlayersWorlds.Maps.Maze.GeneratorOptions(NinetyPercent, Manual, List`1<MapArea>(P2x2;S2x2;Cave;, P24x24;S2x2;Cave;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.WilsonsMazeGenerator)
WilsonsMazeGenerator: Generating maze 30x30 with PlayersWorlds.Maps.Maze.GeneratorOptions(NinetyPercent, Manual, List`1<MapArea>(P2x2;S2x2;Cave;, P24x24;S2x2;Cave;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.WilsonsMazeGenerator)
WilsonsMazeGenerator: Generating maze 30x30 with PlayersWorlds.Maps.Maze.GeneratorOptions(NinetyPercent, Manual, List`1<MapArea>(P2x2;S2x2;Cave;, P24x24;S2x2;Cave;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.WilsonsMazeGenerator)
WilsonsMazeGenerator: Generating maze 30x30 with PlayersWorlds.Maps.Maze.GeneratorOptions(NinetyPercent, Manual, List`1<MapArea>(P2x2;S2x2;Cave;, P24x24;S2x2;Cave;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.WilsonsMazeGenerator)
WilsonsMazeGenerator: Generating maze 30x30 with PlayersWorlds.Maps.Maze.GeneratorOptions(NinetyPercent, Manual, List`1<MapArea>(P2x2;S2x2;Cave;, P24x24;S2x2;Cave;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.WilsonsMazeGenerator)
WilsonsMazeGenerator: Generating maze 30x30 with PlayersWorlds.Maps.Maze.GeneratorOptions(NinetyPercent, Manual, List`1<MapArea>(P2x2;S2x2;Cave;, P24x24;S2x2;Cave;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.WilsonsMazeGenerator)
WilsonsMazeGenerator: Generating maze 30x30 with PlayersWorlds.Maps.Maze.GeneratorOptions(NinetyPercent, Manual, List`1<MapArea>(P2x2;S2x2;Cave;, P24x24;S2x2;Cave;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.WilsonsMazeGenerator)
WilsonsMazeGenerator: Generating maze 30x30 with PlayersWorlds.Maps.Maze.GeneratorOptions(NinetyPercent, Manual, List`1<MapArea>(P2x2;S2x2;Cave;, P24x24;S2x2;Cave;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.WilsonsMazeGenerator)
WilsonsMazeGenerator: Generating maze 30x30 with PlayersWorlds.Maps.Maze.GeneratorOptions(NinetyPercent, Manual, List`1<MapArea>(P2x2;S2x2;Cave;, P24x24;S2x2;Cave;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.WilsonsMazeGenerator)
WilsonsMazeGenerator: Generating maze 30x30 with PlayersWorlds.Maps.Maze.GeneratorOptions(NinetyPercent, Manual, List`1<MapArea>(P2x2;S2x2;Cave;, P24x24;S2x2;Cave;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.WilsonsMazeGenerator)
]]></output>
                </test-case>
                <test-case id="1-1343" name="ScatteredAreas(PlayersWorlds.Maps.Maze.WilsonsMazeGenerator,Cave,FullWidth)" fullname="PlayersWorlds.Maps.Maze.MazeGeneratorAreasTest.ScatteredAreas(PlayersWorlds.Maps.Maze.WilsonsMazeGenerator,Cave,FullWidth)" methodname="ScatteredAreas" classname="PlayersWorlds.Maps.Maze.MazeGeneratorAreasTest" runstate="Runnable" seed="664669044" result="Passed" start-time="2024-02-20T15:16:51.6845010Z" end-time="2024-02-20T15:16:51.7646230Z" duration="0.080123" asserts="20">
                  <output><![CDATA[WilsonsMazeGenerator: Generating maze 30x30 with PlayersWorlds.Maps.Maze.GeneratorOptions(FullWidth, Manual, List`1<MapArea>(P2x2;S2x2;Cave;, P24x24;S2x2;Cave;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.WilsonsMazeGenerator)
WilsonsMazeGenerator: Generating maze 30x30 with PlayersWorlds.Maps.Maze.GeneratorOptions(FullWidth, Manual, List`1<MapArea>(P2x2;S2x2;Cave;, P24x24;S2x2;Cave;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.WilsonsMazeGenerator)
WilsonsMazeGenerator: Generating maze 30x30 with PlayersWorlds.Maps.Maze.GeneratorOptions(FullWidth, Manual, List`1<MapArea>(P2x2;S2x2;Cave;, P24x24;S2x2;Cave;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.WilsonsMazeGenerator)
WilsonsMazeGenerator: Generating maze 30x30 with PlayersWorlds.Maps.Maze.GeneratorOptions(FullWidth, Manual, List`1<MapArea>(P2x2;S2x2;Cave;, P24x24;S2x2;Cave;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.WilsonsMazeGenerator)
WilsonsMazeGenerator: Generating maze 30x30 with PlayersWorlds.Maps.Maze.GeneratorOptions(FullWidth, Manual, List`1<MapArea>(P2x2;S2x2;Cave;, P24x24;S2x2;Cave;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.WilsonsMazeGenerator)
WilsonsMazeGenerator: Generating maze 30x30 with PlayersWorlds.Maps.Maze.GeneratorOptions(FullWidth, Manual, List`1<MapArea>(P2x2;S2x2;Cave;, P24x24;S2x2;Cave;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.WilsonsMazeGenerator)
WilsonsMazeGenerator: Generating maze 30x30 with PlayersWorlds.Maps.Maze.GeneratorOptions(FullWidth, Manual, List`1<MapArea>(P2x2;S2x2;Cave;, P24x24;S2x2;Cave;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.WilsonsMazeGenerator)
WilsonsMazeGenerator: Generating maze 30x30 with PlayersWorlds.Maps.Maze.GeneratorOptions(FullWidth, Manual, List`1<MapArea>(P2x2;S2x2;Cave;, P24x24;S2x2;Cave;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.WilsonsMazeGenerator)
WilsonsMazeGenerator: Generating maze 30x30 with PlayersWorlds.Maps.Maze.GeneratorOptions(FullWidth, Manual, List`1<MapArea>(P2x2;S2x2;Cave;, P24x24;S2x2;Cave;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.WilsonsMazeGenerator)
WilsonsMazeGenerator: Generating maze 30x30 with PlayersWorlds.Maps.Maze.GeneratorOptions(FullWidth, Manual, List`1<MapArea>(P2x2;S2x2;Cave;, P24x24;S2x2;Cave;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.WilsonsMazeGenerator)
]]></output>
                </test-case>
                <test-case id="1-1344" name="ScatteredAreas(PlayersWorlds.Maps.Maze.WilsonsMazeGenerator,Cave,FullHeight)" fullname="PlayersWorlds.Maps.Maze.MazeGeneratorAreasTest.ScatteredAreas(PlayersWorlds.Maps.Maze.WilsonsMazeGenerator,Cave,FullHeight)" methodname="ScatteredAreas" classname="PlayersWorlds.Maps.Maze.MazeGeneratorAreasTest" runstate="Runnable" seed="187763329" result="Passed" start-time="2024-02-20T15:16:51.7646410Z" end-time="2024-02-20T15:16:51.8329220Z" duration="0.068282" asserts="20">
                  <output><![CDATA[WilsonsMazeGenerator: Generating maze 30x30 with PlayersWorlds.Maps.Maze.GeneratorOptions(FullHeight, Manual, List`1<MapArea>(P2x2;S2x2;Cave;, P24x24;S2x2;Cave;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.WilsonsMazeGenerator)
WilsonsMazeGenerator: Generating maze 30x30 with PlayersWorlds.Maps.Maze.GeneratorOptions(FullHeight, Manual, List`1<MapArea>(P2x2;S2x2;Cave;, P24x24;S2x2;Cave;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.WilsonsMazeGenerator)
WilsonsMazeGenerator: Generating maze 30x30 with PlayersWorlds.Maps.Maze.GeneratorOptions(FullHeight, Manual, List`1<MapArea>(P2x2;S2x2;Cave;, P24x24;S2x2;Cave;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.WilsonsMazeGenerator)
WilsonsMazeGenerator: Generating maze 30x30 with PlayersWorlds.Maps.Maze.GeneratorOptions(FullHeight, Manual, List`1<MapArea>(P2x2;S2x2;Cave;, P24x24;S2x2;Cave;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.WilsonsMazeGenerator)
WilsonsMazeGenerator: Generating maze 30x30 with PlayersWorlds.Maps.Maze.GeneratorOptions(FullHeight, Manual, List`1<MapArea>(P2x2;S2x2;Cave;, P24x24;S2x2;Cave;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.WilsonsMazeGenerator)
WilsonsMazeGenerator: Generating maze 30x30 with PlayersWorlds.Maps.Maze.GeneratorOptions(FullHeight, Manual, List`1<MapArea>(P2x2;S2x2;Cave;, P24x24;S2x2;Cave;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.WilsonsMazeGenerator)
WilsonsMazeGenerator: Generating maze 30x30 with PlayersWorlds.Maps.Maze.GeneratorOptions(FullHeight, Manual, List`1<MapArea>(P2x2;S2x2;Cave;, P24x24;S2x2;Cave;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.WilsonsMazeGenerator)
WilsonsMazeGenerator: Generating maze 30x30 with PlayersWorlds.Maps.Maze.GeneratorOptions(FullHeight, Manual, List`1<MapArea>(P2x2;S2x2;Cave;, P24x24;S2x2;Cave;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.WilsonsMazeGenerator)
WilsonsMazeGenerator: Generating maze 30x30 with PlayersWorlds.Maps.Maze.GeneratorOptions(FullHeight, Manual, List`1<MapArea>(P2x2;S2x2;Cave;, P24x24;S2x2;Cave;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.WilsonsMazeGenerator)
WilsonsMazeGenerator: Generating maze 30x30 with PlayersWorlds.Maps.Maze.GeneratorOptions(FullHeight, Manual, List`1<MapArea>(P2x2;S2x2;Cave;, P24x24;S2x2;Cave;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.WilsonsMazeGenerator)
]]></output>
                </test-case>
                <test-case id="1-1345" name="ScatteredAreas(PlayersWorlds.Maps.Maze.WilsonsMazeGenerator,Cave,Full)" fullname="PlayersWorlds.Maps.Maze.MazeGeneratorAreasTest.ScatteredAreas(PlayersWorlds.Maps.Maze.WilsonsMazeGenerator,Cave,Full)" methodname="ScatteredAreas" classname="PlayersWorlds.Maps.Maze.MazeGeneratorAreasTest" runstate="Runnable" seed="813203792" result="Passed" start-time="2024-02-20T15:16:51.8329410Z" end-time="2024-02-20T15:16:51.9844410Z" duration="0.151501" asserts="20">
                  <output><![CDATA[WilsonsMazeGenerator: Generating maze 30x30 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x2;S2x2;Cave;, P24x24;S2x2;Cave;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.WilsonsMazeGenerator)
WilsonsMazeGenerator: Generating maze 30x30 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x2;S2x2;Cave;, P24x24;S2x2;Cave;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.WilsonsMazeGenerator)
WilsonsMazeGenerator: Generating maze 30x30 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x2;S2x2;Cave;, P24x24;S2x2;Cave;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.WilsonsMazeGenerator)
WilsonsMazeGenerator: Generating maze 30x30 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x2;S2x2;Cave;, P24x24;S2x2;Cave;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.WilsonsMazeGenerator)
WilsonsMazeGenerator: Generating maze 30x30 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x2;S2x2;Cave;, P24x24;S2x2;Cave;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.WilsonsMazeGenerator)
WilsonsMazeGenerator: Generating maze 30x30 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x2;S2x2;Cave;, P24x24;S2x2;Cave;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.WilsonsMazeGenerator)
WilsonsMazeGenerator: Generating maze 30x30 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x2;S2x2;Cave;, P24x24;S2x2;Cave;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.WilsonsMazeGenerator)
WilsonsMazeGenerator: Generating maze 30x30 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x2;S2x2;Cave;, P24x24;S2x2;Cave;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.WilsonsMazeGenerator)
WilsonsMazeGenerator: Generating maze 30x30 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x2;S2x2;Cave;, P24x24;S2x2;Cave;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.WilsonsMazeGenerator)
WilsonsMazeGenerator: Generating maze 30x30 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x2;S2x2;Cave;, P24x24;S2x2;Cave;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.WilsonsMazeGenerator)
]]></output>
                </test-case>
                <test-case id="1-1346" name="ScatteredAreas(PlayersWorlds.Maps.Maze.WilsonsMazeGenerator,Hall,Quarter)" fullname="PlayersWorlds.Maps.Maze.MazeGeneratorAreasTest.ScatteredAreas(PlayersWorlds.Maps.Maze.WilsonsMazeGenerator,Hall,Quarter)" methodname="ScatteredAreas" classname="PlayersWorlds.Maps.Maze.MazeGeneratorAreasTest" runstate="Runnable" seed="2069766005" result="Passed" start-time="2024-02-20T15:16:51.9844600Z" end-time="2024-02-20T15:16:52.0617300Z" duration="0.077271" asserts="20">
                  <output><![CDATA[WilsonsMazeGenerator: Generating maze 30x30 with PlayersWorlds.Maps.Maze.GeneratorOptions(Quarter, Manual, List`1<MapArea>(P2x2;S2x2;Hall;, P24x24;S2x2;Hall;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.WilsonsMazeGenerator)
WilsonsMazeGenerator: Generating maze 30x30 with PlayersWorlds.Maps.Maze.GeneratorOptions(Quarter, Manual, List`1<MapArea>(P2x2;S2x2;Hall;, P24x24;S2x2;Hall;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.WilsonsMazeGenerator)
WilsonsMazeGenerator: Generating maze 30x30 with PlayersWorlds.Maps.Maze.GeneratorOptions(Quarter, Manual, List`1<MapArea>(P2x2;S2x2;Hall;, P24x24;S2x2;Hall;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.WilsonsMazeGenerator)
WilsonsMazeGenerator: Generating maze 30x30 with PlayersWorlds.Maps.Maze.GeneratorOptions(Quarter, Manual, List`1<MapArea>(P2x2;S2x2;Hall;, P24x24;S2x2;Hall;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.WilsonsMazeGenerator)
WilsonsMazeGenerator: Generating maze 30x30 with PlayersWorlds.Maps.Maze.GeneratorOptions(Quarter, Manual, List`1<MapArea>(P2x2;S2x2;Hall;, P24x24;S2x2;Hall;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.WilsonsMazeGenerator)
WilsonsMazeGenerator: Generating maze 30x30 with PlayersWorlds.Maps.Maze.GeneratorOptions(Quarter, Manual, List`1<MapArea>(P2x2;S2x2;Hall;, P24x24;S2x2;Hall;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.WilsonsMazeGenerator)
WilsonsMazeGenerator: Generating maze 30x30 with PlayersWorlds.Maps.Maze.GeneratorOptions(Quarter, Manual, List`1<MapArea>(P2x2;S2x2;Hall;, P24x24;S2x2;Hall;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.WilsonsMazeGenerator)
WilsonsMazeGenerator: Generating maze 30x30 with PlayersWorlds.Maps.Maze.GeneratorOptions(Quarter, Manual, List`1<MapArea>(P2x2;S2x2;Hall;, P24x24;S2x2;Hall;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.WilsonsMazeGenerator)
WilsonsMazeGenerator: Generating maze 30x30 with PlayersWorlds.Maps.Maze.GeneratorOptions(Quarter, Manual, List`1<MapArea>(P2x2;S2x2;Hall;, P24x24;S2x2;Hall;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.WilsonsMazeGenerator)
WilsonsMazeGenerator: Generating maze 30x30 with PlayersWorlds.Maps.Maze.GeneratorOptions(Quarter, Manual, List`1<MapArea>(P2x2;S2x2;Hall;, P24x24;S2x2;Hall;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.WilsonsMazeGenerator)
]]></output>
                </test-case>
                <test-case id="1-1347" name="ScatteredAreas(PlayersWorlds.Maps.Maze.WilsonsMazeGenerator,Hall,Half)" fullname="PlayersWorlds.Maps.Maze.MazeGeneratorAreasTest.ScatteredAreas(PlayersWorlds.Maps.Maze.WilsonsMazeGenerator,Hall,Half)" methodname="ScatteredAreas" classname="PlayersWorlds.Maps.Maze.MazeGeneratorAreasTest" runstate="Runnable" seed="662371853" result="Passed" start-time="2024-02-20T15:16:52.0617520Z" end-time="2024-02-20T15:16:52.1552780Z" duration="0.093527" asserts="20">
                  <output><![CDATA[WilsonsMazeGenerator: Generating maze 30x30 with PlayersWorlds.Maps.Maze.GeneratorOptions(Half, Manual, List`1<MapArea>(P2x2;S2x2;Hall;, P24x24;S2x2;Hall;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.WilsonsMazeGenerator)
WilsonsMazeGenerator: Generating maze 30x30 with PlayersWorlds.Maps.Maze.GeneratorOptions(Half, Manual, List`1<MapArea>(P2x2;S2x2;Hall;, P24x24;S2x2;Hall;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.WilsonsMazeGenerator)
WilsonsMazeGenerator: Generating maze 30x30 with PlayersWorlds.Maps.Maze.GeneratorOptions(Half, Manual, List`1<MapArea>(P2x2;S2x2;Hall;, P24x24;S2x2;Hall;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.WilsonsMazeGenerator)
WilsonsMazeGenerator: Generating maze 30x30 with PlayersWorlds.Maps.Maze.GeneratorOptions(Half, Manual, List`1<MapArea>(P2x2;S2x2;Hall;, P24x24;S2x2;Hall;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.WilsonsMazeGenerator)
WilsonsMazeGenerator: Generating maze 30x30 with PlayersWorlds.Maps.Maze.GeneratorOptions(Half, Manual, List`1<MapArea>(P2x2;S2x2;Hall;, P24x24;S2x2;Hall;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.WilsonsMazeGenerator)
WilsonsMazeGenerator: Generating maze 30x30 with PlayersWorlds.Maps.Maze.GeneratorOptions(Half, Manual, List`1<MapArea>(P2x2;S2x2;Hall;, P24x24;S2x2;Hall;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.WilsonsMazeGenerator)
WilsonsMazeGenerator: Generating maze 30x30 with PlayersWorlds.Maps.Maze.GeneratorOptions(Half, Manual, List`1<MapArea>(P2x2;S2x2;Hall;, P24x24;S2x2;Hall;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.WilsonsMazeGenerator)
WilsonsMazeGenerator: Generating maze 30x30 with PlayersWorlds.Maps.Maze.GeneratorOptions(Half, Manual, List`1<MapArea>(P2x2;S2x2;Hall;, P24x24;S2x2;Hall;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.WilsonsMazeGenerator)
WilsonsMazeGenerator: Generating maze 30x30 with PlayersWorlds.Maps.Maze.GeneratorOptions(Half, Manual, List`1<MapArea>(P2x2;S2x2;Hall;, P24x24;S2x2;Hall;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.WilsonsMazeGenerator)
WilsonsMazeGenerator: Generating maze 30x30 with PlayersWorlds.Maps.Maze.GeneratorOptions(Half, Manual, List`1<MapArea>(P2x2;S2x2;Hall;, P24x24;S2x2;Hall;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.WilsonsMazeGenerator)
]]></output>
                </test-case>
                <test-case id="1-1348" name="ScatteredAreas(PlayersWorlds.Maps.Maze.WilsonsMazeGenerator,Hall,ThreeQuarters)" fullname="PlayersWorlds.Maps.Maze.MazeGeneratorAreasTest.ScatteredAreas(PlayersWorlds.Maps.Maze.WilsonsMazeGenerator,Hall,ThreeQuarters)" methodname="ScatteredAreas" classname="PlayersWorlds.Maps.Maze.MazeGeneratorAreasTest" runstate="Runnable" seed="307094651" result="Passed" start-time="2024-02-20T15:16:52.1552970Z" end-time="2024-02-20T15:16:52.2811100Z" duration="0.125815" asserts="20">
                  <output><![CDATA[WilsonsMazeGenerator: Generating maze 30x30 with PlayersWorlds.Maps.Maze.GeneratorOptions(ThreeQuarters, Manual, List`1<MapArea>(P2x2;S2x2;Hall;, P24x24;S2x2;Hall;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.WilsonsMazeGenerator)
WilsonsMazeGenerator: Generating maze 30x30 with PlayersWorlds.Maps.Maze.GeneratorOptions(ThreeQuarters, Manual, List`1<MapArea>(P2x2;S2x2;Hall;, P24x24;S2x2;Hall;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.WilsonsMazeGenerator)
WilsonsMazeGenerator: Generating maze 30x30 with PlayersWorlds.Maps.Maze.GeneratorOptions(ThreeQuarters, Manual, List`1<MapArea>(P2x2;S2x2;Hall;, P24x24;S2x2;Hall;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.WilsonsMazeGenerator)
WilsonsMazeGenerator: Generating maze 30x30 with PlayersWorlds.Maps.Maze.GeneratorOptions(ThreeQuarters, Manual, List`1<MapArea>(P2x2;S2x2;Hall;, P24x24;S2x2;Hall;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.WilsonsMazeGenerator)
WilsonsMazeGenerator: Generating maze 30x30 with PlayersWorlds.Maps.Maze.GeneratorOptions(ThreeQuarters, Manual, List`1<MapArea>(P2x2;S2x2;Hall;, P24x24;S2x2;Hall;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.WilsonsMazeGenerator)
WilsonsMazeGenerator: Generating maze 30x30 with PlayersWorlds.Maps.Maze.GeneratorOptions(ThreeQuarters, Manual, List`1<MapArea>(P2x2;S2x2;Hall;, P24x24;S2x2;Hall;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.WilsonsMazeGenerator)
WilsonsMazeGenerator: Generating maze 30x30 with PlayersWorlds.Maps.Maze.GeneratorOptions(ThreeQuarters, Manual, List`1<MapArea>(P2x2;S2x2;Hall;, P24x24;S2x2;Hall;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.WilsonsMazeGenerator)
WilsonsMazeGenerator: Generating maze 30x30 with PlayersWorlds.Maps.Maze.GeneratorOptions(ThreeQuarters, Manual, List`1<MapArea>(P2x2;S2x2;Hall;, P24x24;S2x2;Hall;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.WilsonsMazeGenerator)
WilsonsMazeGenerator: Generating maze 30x30 with PlayersWorlds.Maps.Maze.GeneratorOptions(ThreeQuarters, Manual, List`1<MapArea>(P2x2;S2x2;Hall;, P24x24;S2x2;Hall;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.WilsonsMazeGenerator)
WilsonsMazeGenerator: Generating maze 30x30 with PlayersWorlds.Maps.Maze.GeneratorOptions(ThreeQuarters, Manual, List`1<MapArea>(P2x2;S2x2;Hall;, P24x24;S2x2;Hall;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.WilsonsMazeGenerator)
]]></output>
                </test-case>
                <test-case id="1-1349" name="ScatteredAreas(PlayersWorlds.Maps.Maze.WilsonsMazeGenerator,Hall,NinetyPercent)" fullname="PlayersWorlds.Maps.Maze.MazeGeneratorAreasTest.ScatteredAreas(PlayersWorlds.Maps.Maze.WilsonsMazeGenerator,Hall,NinetyPercent)" methodname="ScatteredAreas" classname="PlayersWorlds.Maps.Maze.MazeGeneratorAreasTest" runstate="Runnable" seed="1532672871" result="Passed" start-time="2024-02-20T15:16:52.2811450Z" end-time="2024-02-20T15:16:52.4014460Z" duration="0.120302" asserts="20">
                  <output><![CDATA[WilsonsMazeGenerator: Generating maze 30x30 with PlayersWorlds.Maps.Maze.GeneratorOptions(NinetyPercent, Manual, List`1<MapArea>(P2x2;S2x2;Hall;, P24x24;S2x2;Hall;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.WilsonsMazeGenerator)
WilsonsMazeGenerator: Generating maze 30x30 with PlayersWorlds.Maps.Maze.GeneratorOptions(NinetyPercent, Manual, List`1<MapArea>(P2x2;S2x2;Hall;, P24x24;S2x2;Hall;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.WilsonsMazeGenerator)
WilsonsMazeGenerator: Generating maze 30x30 with PlayersWorlds.Maps.Maze.GeneratorOptions(NinetyPercent, Manual, List`1<MapArea>(P2x2;S2x2;Hall;, P24x24;S2x2;Hall;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.WilsonsMazeGenerator)
WilsonsMazeGenerator: Generating maze 30x30 with PlayersWorlds.Maps.Maze.GeneratorOptions(NinetyPercent, Manual, List`1<MapArea>(P2x2;S2x2;Hall;, P24x24;S2x2;Hall;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.WilsonsMazeGenerator)
WilsonsMazeGenerator: Generating maze 30x30 with PlayersWorlds.Maps.Maze.GeneratorOptions(NinetyPercent, Manual, List`1<MapArea>(P2x2;S2x2;Hall;, P24x24;S2x2;Hall;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.WilsonsMazeGenerator)
WilsonsMazeGenerator: Generating maze 30x30 with PlayersWorlds.Maps.Maze.GeneratorOptions(NinetyPercent, Manual, List`1<MapArea>(P2x2;S2x2;Hall;, P24x24;S2x2;Hall;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.WilsonsMazeGenerator)
WilsonsMazeGenerator: Generating maze 30x30 with PlayersWorlds.Maps.Maze.GeneratorOptions(NinetyPercent, Manual, List`1<MapArea>(P2x2;S2x2;Hall;, P24x24;S2x2;Hall;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.WilsonsMazeGenerator)
WilsonsMazeGenerator: Generating maze 30x30 with PlayersWorlds.Maps.Maze.GeneratorOptions(NinetyPercent, Manual, List`1<MapArea>(P2x2;S2x2;Hall;, P24x24;S2x2;Hall;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.WilsonsMazeGenerator)
WilsonsMazeGenerator: Generating maze 30x30 with PlayersWorlds.Maps.Maze.GeneratorOptions(NinetyPercent, Manual, List`1<MapArea>(P2x2;S2x2;Hall;, P24x24;S2x2;Hall;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.WilsonsMazeGenerator)
WilsonsMazeGenerator: Generating maze 30x30 with PlayersWorlds.Maps.Maze.GeneratorOptions(NinetyPercent, Manual, List`1<MapArea>(P2x2;S2x2;Hall;, P24x24;S2x2;Hall;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.WilsonsMazeGenerator)
]]></output>
                </test-case>
                <test-case id="1-1350" name="ScatteredAreas(PlayersWorlds.Maps.Maze.WilsonsMazeGenerator,Hall,FullWidth)" fullname="PlayersWorlds.Maps.Maze.MazeGeneratorAreasTest.ScatteredAreas(PlayersWorlds.Maps.Maze.WilsonsMazeGenerator,Hall,FullWidth)" methodname="ScatteredAreas" classname="PlayersWorlds.Maps.Maze.MazeGeneratorAreasTest" runstate="Runnable" seed="291915988" result="Passed" start-time="2024-02-20T15:16:52.4014630Z" end-time="2024-02-20T15:16:52.4881670Z" duration="0.086704" asserts="20">
                  <output><![CDATA[WilsonsMazeGenerator: Generating maze 30x30 with PlayersWorlds.Maps.Maze.GeneratorOptions(FullWidth, Manual, List`1<MapArea>(P2x2;S2x2;Hall;, P24x24;S2x2;Hall;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.WilsonsMazeGenerator)
WilsonsMazeGenerator: Generating maze 30x30 with PlayersWorlds.Maps.Maze.GeneratorOptions(FullWidth, Manual, List`1<MapArea>(P2x2;S2x2;Hall;, P24x24;S2x2;Hall;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.WilsonsMazeGenerator)
WilsonsMazeGenerator: Generating maze 30x30 with PlayersWorlds.Maps.Maze.GeneratorOptions(FullWidth, Manual, List`1<MapArea>(P2x2;S2x2;Hall;, P24x24;S2x2;Hall;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.WilsonsMazeGenerator)
WilsonsMazeGenerator: Generating maze 30x30 with PlayersWorlds.Maps.Maze.GeneratorOptions(FullWidth, Manual, List`1<MapArea>(P2x2;S2x2;Hall;, P24x24;S2x2;Hall;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.WilsonsMazeGenerator)
WilsonsMazeGenerator: Generating maze 30x30 with PlayersWorlds.Maps.Maze.GeneratorOptions(FullWidth, Manual, List`1<MapArea>(P2x2;S2x2;Hall;, P24x24;S2x2;Hall;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.WilsonsMazeGenerator)
WilsonsMazeGenerator: Generating maze 30x30 with PlayersWorlds.Maps.Maze.GeneratorOptions(FullWidth, Manual, List`1<MapArea>(P2x2;S2x2;Hall;, P24x24;S2x2;Hall;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.WilsonsMazeGenerator)
WilsonsMazeGenerator: Generating maze 30x30 with PlayersWorlds.Maps.Maze.GeneratorOptions(FullWidth, Manual, List`1<MapArea>(P2x2;S2x2;Hall;, P24x24;S2x2;Hall;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.WilsonsMazeGenerator)
WilsonsMazeGenerator: Generating maze 30x30 with PlayersWorlds.Maps.Maze.GeneratorOptions(FullWidth, Manual, List`1<MapArea>(P2x2;S2x2;Hall;, P24x24;S2x2;Hall;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.WilsonsMazeGenerator)
WilsonsMazeGenerator: Generating maze 30x30 with PlayersWorlds.Maps.Maze.GeneratorOptions(FullWidth, Manual, List`1<MapArea>(P2x2;S2x2;Hall;, P24x24;S2x2;Hall;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.WilsonsMazeGenerator)
WilsonsMazeGenerator: Generating maze 30x30 with PlayersWorlds.Maps.Maze.GeneratorOptions(FullWidth, Manual, List`1<MapArea>(P2x2;S2x2;Hall;, P24x24;S2x2;Hall;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.WilsonsMazeGenerator)
]]></output>
                </test-case>
                <test-case id="1-1351" name="ScatteredAreas(PlayersWorlds.Maps.Maze.WilsonsMazeGenerator,Hall,FullHeight)" fullname="PlayersWorlds.Maps.Maze.MazeGeneratorAreasTest.ScatteredAreas(PlayersWorlds.Maps.Maze.WilsonsMazeGenerator,Hall,FullHeight)" methodname="ScatteredAreas" classname="PlayersWorlds.Maps.Maze.MazeGeneratorAreasTest" runstate="Runnable" seed="1303288330" result="Passed" start-time="2024-02-20T15:16:52.4881850Z" end-time="2024-02-20T15:16:52.5737670Z" duration="0.085582" asserts="20">
                  <output><![CDATA[WilsonsMazeGenerator: Generating maze 30x30 with PlayersWorlds.Maps.Maze.GeneratorOptions(FullHeight, Manual, List`1<MapArea>(P2x2;S2x2;Hall;, P24x24;S2x2;Hall;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.WilsonsMazeGenerator)
WilsonsMazeGenerator: Generating maze 30x30 with PlayersWorlds.Maps.Maze.GeneratorOptions(FullHeight, Manual, List`1<MapArea>(P2x2;S2x2;Hall;, P24x24;S2x2;Hall;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.WilsonsMazeGenerator)
WilsonsMazeGenerator: Generating maze 30x30 with PlayersWorlds.Maps.Maze.GeneratorOptions(FullHeight, Manual, List`1<MapArea>(P2x2;S2x2;Hall;, P24x24;S2x2;Hall;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.WilsonsMazeGenerator)
WilsonsMazeGenerator: Generating maze 30x30 with PlayersWorlds.Maps.Maze.GeneratorOptions(FullHeight, Manual, List`1<MapArea>(P2x2;S2x2;Hall;, P24x24;S2x2;Hall;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.WilsonsMazeGenerator)
WilsonsMazeGenerator: Generating maze 30x30 with PlayersWorlds.Maps.Maze.GeneratorOptions(FullHeight, Manual, List`1<MapArea>(P2x2;S2x2;Hall;, P24x24;S2x2;Hall;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.WilsonsMazeGenerator)
WilsonsMazeGenerator: Generating maze 30x30 with PlayersWorlds.Maps.Maze.GeneratorOptions(FullHeight, Manual, List`1<MapArea>(P2x2;S2x2;Hall;, P24x24;S2x2;Hall;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.WilsonsMazeGenerator)
WilsonsMazeGenerator: Generating maze 30x30 with PlayersWorlds.Maps.Maze.GeneratorOptions(FullHeight, Manual, List`1<MapArea>(P2x2;S2x2;Hall;, P24x24;S2x2;Hall;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.WilsonsMazeGenerator)
WilsonsMazeGenerator: Generating maze 30x30 with PlayersWorlds.Maps.Maze.GeneratorOptions(FullHeight, Manual, List`1<MapArea>(P2x2;S2x2;Hall;, P24x24;S2x2;Hall;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.WilsonsMazeGenerator)
WilsonsMazeGenerator: Generating maze 30x30 with PlayersWorlds.Maps.Maze.GeneratorOptions(FullHeight, Manual, List`1<MapArea>(P2x2;S2x2;Hall;, P24x24;S2x2;Hall;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.WilsonsMazeGenerator)
WilsonsMazeGenerator: Generating maze 30x30 with PlayersWorlds.Maps.Maze.GeneratorOptions(FullHeight, Manual, List`1<MapArea>(P2x2;S2x2;Hall;, P24x24;S2x2;Hall;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.WilsonsMazeGenerator)
]]></output>
                </test-case>
                <test-case id="1-1352" name="ScatteredAreas(PlayersWorlds.Maps.Maze.WilsonsMazeGenerator,Hall,Full)" fullname="PlayersWorlds.Maps.Maze.MazeGeneratorAreasTest.ScatteredAreas(PlayersWorlds.Maps.Maze.WilsonsMazeGenerator,Hall,Full)" methodname="ScatteredAreas" classname="PlayersWorlds.Maps.Maze.MazeGeneratorAreasTest" runstate="Runnable" seed="2012605335" result="Passed" start-time="2024-02-20T15:16:52.5737880Z" end-time="2024-02-20T15:16:52.7001850Z" duration="0.126398" asserts="20">
                  <output><![CDATA[WilsonsMazeGenerator: Generating maze 30x30 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x2;S2x2;Hall;, P24x24;S2x2;Hall;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.WilsonsMazeGenerator)
WilsonsMazeGenerator: Generating maze 30x30 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x2;S2x2;Hall;, P24x24;S2x2;Hall;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.WilsonsMazeGenerator)
WilsonsMazeGenerator: Generating maze 30x30 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x2;S2x2;Hall;, P24x24;S2x2;Hall;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.WilsonsMazeGenerator)
WilsonsMazeGenerator: Generating maze 30x30 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x2;S2x2;Hall;, P24x24;S2x2;Hall;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.WilsonsMazeGenerator)
WilsonsMazeGenerator: Generating maze 30x30 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x2;S2x2;Hall;, P24x24;S2x2;Hall;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.WilsonsMazeGenerator)
WilsonsMazeGenerator: Generating maze 30x30 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x2;S2x2;Hall;, P24x24;S2x2;Hall;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.WilsonsMazeGenerator)
WilsonsMazeGenerator: Generating maze 30x30 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x2;S2x2;Hall;, P24x24;S2x2;Hall;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.WilsonsMazeGenerator)
WilsonsMazeGenerator: Generating maze 30x30 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x2;S2x2;Hall;, P24x24;S2x2;Hall;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.WilsonsMazeGenerator)
WilsonsMazeGenerator: Generating maze 30x30 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x2;S2x2;Hall;, P24x24;S2x2;Hall;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.WilsonsMazeGenerator)
WilsonsMazeGenerator: Generating maze 30x30 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x2;S2x2;Hall;, P24x24;S2x2;Hall;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.WilsonsMazeGenerator)
]]></output>
                </test-case>
                <test-case id="1-1353" name="ScatteredAreas(PlayersWorlds.Maps.Maze.WilsonsMazeGenerator,Fill,Quarter)" fullname="PlayersWorlds.Maps.Maze.MazeGeneratorAreasTest.ScatteredAreas(PlayersWorlds.Maps.Maze.WilsonsMazeGenerator,Fill,Quarter)" methodname="ScatteredAreas" classname="PlayersWorlds.Maps.Maze.MazeGeneratorAreasTest" runstate="Runnable" seed="1935512127" result="Skipped" label="Ignored" start-time="2024-02-20T15:16:52.7002020Z" end-time="2024-02-20T15:16:52.7003080Z" duration="0.000106" asserts="0" />
                <test-case id="1-1354" name="ScatteredAreas(PlayersWorlds.Maps.Maze.WilsonsMazeGenerator,Fill,Half)" fullname="PlayersWorlds.Maps.Maze.MazeGeneratorAreasTest.ScatteredAreas(PlayersWorlds.Maps.Maze.WilsonsMazeGenerator,Fill,Half)" methodname="ScatteredAreas" classname="PlayersWorlds.Maps.Maze.MazeGeneratorAreasTest" runstate="Runnable" seed="1644545856" result="Skipped" label="Ignored" start-time="2024-02-20T15:16:52.7003130Z" end-time="2024-02-20T15:16:52.7003720Z" duration="0.000059" asserts="0" />
                <test-case id="1-1355" name="ScatteredAreas(PlayersWorlds.Maps.Maze.WilsonsMazeGenerator,Fill,ThreeQuarters)" fullname="PlayersWorlds.Maps.Maze.MazeGeneratorAreasTest.ScatteredAreas(PlayersWorlds.Maps.Maze.WilsonsMazeGenerator,Fill,ThreeQuarters)" methodname="ScatteredAreas" classname="PlayersWorlds.Maps.Maze.MazeGeneratorAreasTest" runstate="Runnable" seed="641771788" result="Skipped" label="Ignored" start-time="2024-02-20T15:16:52.7003760Z" end-time="2024-02-20T15:16:52.7004250Z" duration="0.000049" asserts="0" />
                <test-case id="1-1356" name="ScatteredAreas(PlayersWorlds.Maps.Maze.WilsonsMazeGenerator,Fill,NinetyPercent)" fullname="PlayersWorlds.Maps.Maze.MazeGeneratorAreasTest.ScatteredAreas(PlayersWorlds.Maps.Maze.WilsonsMazeGenerator,Fill,NinetyPercent)" methodname="ScatteredAreas" classname="PlayersWorlds.Maps.Maze.MazeGeneratorAreasTest" runstate="Runnable" seed="104270642" result="Skipped" label="Ignored" start-time="2024-02-20T15:16:52.7004300Z" end-time="2024-02-20T15:16:52.7004770Z" duration="0.000048" asserts="0" />
                <test-case id="1-1357" name="ScatteredAreas(PlayersWorlds.Maps.Maze.WilsonsMazeGenerator,Fill,FullWidth)" fullname="PlayersWorlds.Maps.Maze.MazeGeneratorAreasTest.ScatteredAreas(PlayersWorlds.Maps.Maze.WilsonsMazeGenerator,Fill,FullWidth)" methodname="ScatteredAreas" classname="PlayersWorlds.Maps.Maze.MazeGeneratorAreasTest" runstate="Runnable" seed="1143069482" result="Skipped" label="Ignored" start-time="2024-02-20T15:16:52.7004810Z" end-time="2024-02-20T15:16:52.7005270Z" duration="0.000046" asserts="0" />
                <test-case id="1-1358" name="ScatteredAreas(PlayersWorlds.Maps.Maze.WilsonsMazeGenerator,Fill,FullHeight)" fullname="PlayersWorlds.Maps.Maze.MazeGeneratorAreasTest.ScatteredAreas(PlayersWorlds.Maps.Maze.WilsonsMazeGenerator,Fill,FullHeight)" methodname="ScatteredAreas" classname="PlayersWorlds.Maps.Maze.MazeGeneratorAreasTest" runstate="Runnable" seed="1381491804" result="Skipped" label="Ignored" start-time="2024-02-20T15:16:52.7005320Z" end-time="2024-02-20T15:16:52.7005780Z" duration="0.000046" asserts="0" />
                <test-case id="1-1359" name="ScatteredAreas(PlayersWorlds.Maps.Maze.WilsonsMazeGenerator,Fill,Full)" fullname="PlayersWorlds.Maps.Maze.MazeGeneratorAreasTest.ScatteredAreas(PlayersWorlds.Maps.Maze.WilsonsMazeGenerator,Fill,Full)" methodname="ScatteredAreas" classname="PlayersWorlds.Maps.Maze.MazeGeneratorAreasTest" runstate="Runnable" seed="1574320963" result="Skipped" label="Ignored" start-time="2024-02-20T15:16:52.7005820Z" end-time="2024-02-20T15:16:52.7006260Z" duration="0.000045" asserts="0" />
              </test-suite>
              <test-suite type="ParameterizedMethod" id="1-1213" name="TwoMatchingAreas" fullname="PlayersWorlds.Maps.Maze.MazeGeneratorAreasTest.TwoMatchingAreas" classname="PlayersWorlds.Maps.Maze.MazeGeneratorAreasTest" runstate="Runnable" testcasecount="18" result="Passed" start-time="2024-02-20T15:16:52.7006660Z" end-time="2024-02-20T15:16:52.8582100Z" duration="0.157545" total="18" passed="18" failed="0" warnings="0" inconclusive="0" skipped="0" asserts="1080">
                <properties>
                  <property name="Repeat" value="10" />
                </properties>
                <test-case id="1-1195" name="TwoMatchingAreas(PlayersWorlds.Maps.Maze.AldousBroderMazeGenerator,Cave)" fullname="PlayersWorlds.Maps.Maze.MazeGeneratorAreasTest.TwoMatchingAreas(PlayersWorlds.Maps.Maze.AldousBroderMazeGenerator,Cave)" methodname="TwoMatchingAreas" classname="PlayersWorlds.Maps.Maze.MazeGeneratorAreasTest" runstate="Runnable" seed="734765739" result="Passed" start-time="2024-02-20T15:16:52.7006840Z" end-time="2024-02-20T15:16:52.7114080Z" duration="0.010724" asserts="60">
                  <output><![CDATA[AldousBroderMazeGenerator: Generating maze 6x6 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x2;S2x2;Cave;, P2x2;S2x2;Cave;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.AldousBroderMazeGenerator)
AldousBroderMazeGenerator: Generating maze 6x6 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x2;S2x2;Cave;, P2x2;S2x2;Cave;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.AldousBroderMazeGenerator)
AldousBroderMazeGenerator: Generating maze 6x6 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x2;S2x2;Cave;, P2x2;S2x2;Cave;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.AldousBroderMazeGenerator)
AldousBroderMazeGenerator: Generating maze 6x6 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x2;S2x2;Cave;, P2x2;S2x2;Cave;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.AldousBroderMazeGenerator)
AldousBroderMazeGenerator: Generating maze 6x6 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x2;S2x2;Cave;, P2x2;S2x2;Cave;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.AldousBroderMazeGenerator)
AldousBroderMazeGenerator: Generating maze 6x6 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x2;S2x2;Cave;, P2x2;S2x2;Cave;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.AldousBroderMazeGenerator)
AldousBroderMazeGenerator: Generating maze 6x6 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x2;S2x2;Cave;, P2x2;S2x2;Cave;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.AldousBroderMazeGenerator)
AldousBroderMazeGenerator: Generating maze 6x6 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x2;S2x2;Cave;, P2x2;S2x2;Cave;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.AldousBroderMazeGenerator)
AldousBroderMazeGenerator: Generating maze 6x6 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x2;S2x2;Cave;, P2x2;S2x2;Cave;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.AldousBroderMazeGenerator)
AldousBroderMazeGenerator: Generating maze 6x6 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x2;S2x2;Cave;, P2x2;S2x2;Cave;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.AldousBroderMazeGenerator)
]]></output>
                </test-case>
                <test-case id="1-1196" name="TwoMatchingAreas(PlayersWorlds.Maps.Maze.AldousBroderMazeGenerator,Hall)" fullname="PlayersWorlds.Maps.Maze.MazeGeneratorAreasTest.TwoMatchingAreas(PlayersWorlds.Maps.Maze.AldousBroderMazeGenerator,Hall)" methodname="TwoMatchingAreas" classname="PlayersWorlds.Maps.Maze.MazeGeneratorAreasTest" runstate="Runnable" seed="111999424" result="Passed" start-time="2024-02-20T15:16:52.7114340Z" end-time="2024-02-20T15:16:52.7212380Z" duration="0.009804" asserts="60">
                  <output><![CDATA[AldousBroderMazeGenerator: Generating maze 6x6 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x2;S2x2;Hall;, P2x2;S2x2;Hall;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.AldousBroderMazeGenerator)
AldousBroderMazeGenerator: Generating maze 6x6 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x2;S2x2;Hall;, P2x2;S2x2;Hall;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.AldousBroderMazeGenerator)
AldousBroderMazeGenerator: Generating maze 6x6 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x2;S2x2;Hall;, P2x2;S2x2;Hall;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.AldousBroderMazeGenerator)
AldousBroderMazeGenerator: Generating maze 6x6 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x2;S2x2;Hall;, P2x2;S2x2;Hall;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.AldousBroderMazeGenerator)
AldousBroderMazeGenerator: Generating maze 6x6 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x2;S2x2;Hall;, P2x2;S2x2;Hall;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.AldousBroderMazeGenerator)
AldousBroderMazeGenerator: Generating maze 6x6 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x2;S2x2;Hall;, P2x2;S2x2;Hall;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.AldousBroderMazeGenerator)
AldousBroderMazeGenerator: Generating maze 6x6 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x2;S2x2;Hall;, P2x2;S2x2;Hall;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.AldousBroderMazeGenerator)
AldousBroderMazeGenerator: Generating maze 6x6 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x2;S2x2;Hall;, P2x2;S2x2;Hall;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.AldousBroderMazeGenerator)
AldousBroderMazeGenerator: Generating maze 6x6 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x2;S2x2;Hall;, P2x2;S2x2;Hall;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.AldousBroderMazeGenerator)
AldousBroderMazeGenerator: Generating maze 6x6 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x2;S2x2;Hall;, P2x2;S2x2;Hall;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.AldousBroderMazeGenerator)
]]></output>
                </test-case>
                <test-case id="1-1197" name="TwoMatchingAreas(PlayersWorlds.Maps.Maze.AldousBroderMazeGenerator,Fill)" fullname="PlayersWorlds.Maps.Maze.MazeGeneratorAreasTest.TwoMatchingAreas(PlayersWorlds.Maps.Maze.AldousBroderMazeGenerator,Fill)" methodname="TwoMatchingAreas" classname="PlayersWorlds.Maps.Maze.MazeGeneratorAreasTest" runstate="Runnable" seed="1935604902" result="Passed" start-time="2024-02-20T15:16:52.7212590Z" end-time="2024-02-20T15:16:52.7300440Z" duration="0.008785" asserts="60">
                  <output><![CDATA[AldousBroderMazeGenerator: Generating maze 6x6 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x2;S2x2;Fill;, P2x2;S2x2;Fill;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.AldousBroderMazeGenerator)
AldousBroderMazeGenerator: Generating maze 6x6 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x2;S2x2;Fill;, P2x2;S2x2;Fill;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.AldousBroderMazeGenerator)
AldousBroderMazeGenerator: Generating maze 6x6 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x2;S2x2;Fill;, P2x2;S2x2;Fill;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.AldousBroderMazeGenerator)
AldousBroderMazeGenerator: Generating maze 6x6 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x2;S2x2;Fill;, P2x2;S2x2;Fill;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.AldousBroderMazeGenerator)
AldousBroderMazeGenerator: Generating maze 6x6 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x2;S2x2;Fill;, P2x2;S2x2;Fill;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.AldousBroderMazeGenerator)
AldousBroderMazeGenerator: Generating maze 6x6 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x2;S2x2;Fill;, P2x2;S2x2;Fill;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.AldousBroderMazeGenerator)
AldousBroderMazeGenerator: Generating maze 6x6 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x2;S2x2;Fill;, P2x2;S2x2;Fill;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.AldousBroderMazeGenerator)
AldousBroderMazeGenerator: Generating maze 6x6 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x2;S2x2;Fill;, P2x2;S2x2;Fill;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.AldousBroderMazeGenerator)
AldousBroderMazeGenerator: Generating maze 6x6 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x2;S2x2;Fill;, P2x2;S2x2;Fill;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.AldousBroderMazeGenerator)
AldousBroderMazeGenerator: Generating maze 6x6 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x2;S2x2;Fill;, P2x2;S2x2;Fill;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.AldousBroderMazeGenerator)
]]></output>
                </test-case>
                <test-case id="1-1198" name="TwoMatchingAreas(PlayersWorlds.Maps.Maze.BinaryTreeMazeGenerator,Cave)" fullname="PlayersWorlds.Maps.Maze.MazeGeneratorAreasTest.TwoMatchingAreas(PlayersWorlds.Maps.Maze.BinaryTreeMazeGenerator,Cave)" methodname="TwoMatchingAreas" classname="PlayersWorlds.Maps.Maze.MazeGeneratorAreasTest" runstate="Runnable" seed="727403160" result="Passed" start-time="2024-02-20T15:16:52.7300590Z" end-time="2024-02-20T15:16:52.7391400Z" duration="0.009081" asserts="60">
                  <output><![CDATA[BinaryTreeMazeGenerator: Generating maze 6x6 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x2;S2x2;Cave;, P2x2;S2x2;Cave;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.BinaryTreeMazeGenerator)
BinaryTreeMazeGenerator: Generating maze 6x6 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x2;S2x2;Cave;, P2x2;S2x2;Cave;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.BinaryTreeMazeGenerator)
BinaryTreeMazeGenerator: Generating maze 6x6 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x2;S2x2;Cave;, P2x2;S2x2;Cave;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.BinaryTreeMazeGenerator)
BinaryTreeMazeGenerator: Generating maze 6x6 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x2;S2x2;Cave;, P2x2;S2x2;Cave;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.BinaryTreeMazeGenerator)
BinaryTreeMazeGenerator: Generating maze 6x6 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x2;S2x2;Cave;, P2x2;S2x2;Cave;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.BinaryTreeMazeGenerator)
BinaryTreeMazeGenerator: Generating maze 6x6 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x2;S2x2;Cave;, P2x2;S2x2;Cave;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.BinaryTreeMazeGenerator)
BinaryTreeMazeGenerator: Generating maze 6x6 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x2;S2x2;Cave;, P2x2;S2x2;Cave;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.BinaryTreeMazeGenerator)
BinaryTreeMazeGenerator: Generating maze 6x6 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x2;S2x2;Cave;, P2x2;S2x2;Cave;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.BinaryTreeMazeGenerator)
BinaryTreeMazeGenerator: Generating maze 6x6 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x2;S2x2;Cave;, P2x2;S2x2;Cave;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.BinaryTreeMazeGenerator)
BinaryTreeMazeGenerator: Generating maze 6x6 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x2;S2x2;Cave;, P2x2;S2x2;Cave;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.BinaryTreeMazeGenerator)
]]></output>
                </test-case>
                <test-case id="1-1199" name="TwoMatchingAreas(PlayersWorlds.Maps.Maze.BinaryTreeMazeGenerator,Hall)" fullname="PlayersWorlds.Maps.Maze.MazeGeneratorAreasTest.TwoMatchingAreas(PlayersWorlds.Maps.Maze.BinaryTreeMazeGenerator,Hall)" methodname="TwoMatchingAreas" classname="PlayersWorlds.Maps.Maze.MazeGeneratorAreasTest" runstate="Runnable" seed="2042170434" result="Passed" start-time="2024-02-20T15:16:52.7391610Z" end-time="2024-02-20T15:16:52.7484430Z" duration="0.009282" asserts="60">
                  <output><![CDATA[BinaryTreeMazeGenerator: Generating maze 6x6 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x2;S2x2;Hall;, P2x2;S2x2;Hall;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.BinaryTreeMazeGenerator)
BinaryTreeMazeGenerator: Generating maze 6x6 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x2;S2x2;Hall;, P2x2;S2x2;Hall;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.BinaryTreeMazeGenerator)
BinaryTreeMazeGenerator: Generating maze 6x6 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x2;S2x2;Hall;, P2x2;S2x2;Hall;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.BinaryTreeMazeGenerator)
BinaryTreeMazeGenerator: Generating maze 6x6 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x2;S2x2;Hall;, P2x2;S2x2;Hall;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.BinaryTreeMazeGenerator)
BinaryTreeMazeGenerator: Generating maze 6x6 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x2;S2x2;Hall;, P2x2;S2x2;Hall;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.BinaryTreeMazeGenerator)
BinaryTreeMazeGenerator: Generating maze 6x6 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x2;S2x2;Hall;, P2x2;S2x2;Hall;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.BinaryTreeMazeGenerator)
BinaryTreeMazeGenerator: Generating maze 6x6 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x2;S2x2;Hall;, P2x2;S2x2;Hall;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.BinaryTreeMazeGenerator)
BinaryTreeMazeGenerator: Generating maze 6x6 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x2;S2x2;Hall;, P2x2;S2x2;Hall;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.BinaryTreeMazeGenerator)
BinaryTreeMazeGenerator: Generating maze 6x6 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x2;S2x2;Hall;, P2x2;S2x2;Hall;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.BinaryTreeMazeGenerator)
BinaryTreeMazeGenerator: Generating maze 6x6 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x2;S2x2;Hall;, P2x2;S2x2;Hall;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.BinaryTreeMazeGenerator)
]]></output>
                </test-case>
                <test-case id="1-1200" name="TwoMatchingAreas(PlayersWorlds.Maps.Maze.BinaryTreeMazeGenerator,Fill)" fullname="PlayersWorlds.Maps.Maze.MazeGeneratorAreasTest.TwoMatchingAreas(PlayersWorlds.Maps.Maze.BinaryTreeMazeGenerator,Fill)" methodname="TwoMatchingAreas" classname="PlayersWorlds.Maps.Maze.MazeGeneratorAreasTest" runstate="Runnable" seed="255358973" result="Passed" start-time="2024-02-20T15:16:52.7484570Z" end-time="2024-02-20T15:16:52.7573010Z" duration="0.008844" asserts="60">
                  <output><![CDATA[BinaryTreeMazeGenerator: Generating maze 6x6 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x2;S2x2;Fill;, P2x2;S2x2;Fill;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.BinaryTreeMazeGenerator)
BinaryTreeMazeGenerator: Generating maze 6x6 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x2;S2x2;Fill;, P2x2;S2x2;Fill;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.BinaryTreeMazeGenerator)
BinaryTreeMazeGenerator: Generating maze 6x6 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x2;S2x2;Fill;, P2x2;S2x2;Fill;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.BinaryTreeMazeGenerator)
BinaryTreeMazeGenerator: Generating maze 6x6 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x2;S2x2;Fill;, P2x2;S2x2;Fill;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.BinaryTreeMazeGenerator)
BinaryTreeMazeGenerator: Generating maze 6x6 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x2;S2x2;Fill;, P2x2;S2x2;Fill;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.BinaryTreeMazeGenerator)
BinaryTreeMazeGenerator: Generating maze 6x6 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x2;S2x2;Fill;, P2x2;S2x2;Fill;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.BinaryTreeMazeGenerator)
BinaryTreeMazeGenerator: Generating maze 6x6 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x2;S2x2;Fill;, P2x2;S2x2;Fill;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.BinaryTreeMazeGenerator)
BinaryTreeMazeGenerator: Generating maze 6x6 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x2;S2x2;Fill;, P2x2;S2x2;Fill;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.BinaryTreeMazeGenerator)
BinaryTreeMazeGenerator: Generating maze 6x6 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x2;S2x2;Fill;, P2x2;S2x2;Fill;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.BinaryTreeMazeGenerator)
BinaryTreeMazeGenerator: Generating maze 6x6 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x2;S2x2;Fill;, P2x2;S2x2;Fill;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.BinaryTreeMazeGenerator)
]]></output>
                </test-case>
                <test-case id="1-1201" name="TwoMatchingAreas(PlayersWorlds.Maps.Maze.HuntAndKillMazeGenerator,Cave)" fullname="PlayersWorlds.Maps.Maze.MazeGeneratorAreasTest.TwoMatchingAreas(PlayersWorlds.Maps.Maze.HuntAndKillMazeGenerator,Cave)" methodname="TwoMatchingAreas" classname="PlayersWorlds.Maps.Maze.MazeGeneratorAreasTest" runstate="Runnable" seed="1221467612" result="Passed" start-time="2024-02-20T15:16:52.7573150Z" end-time="2024-02-20T15:16:52.7649320Z" duration="0.007618" asserts="60">
                  <output><![CDATA[HuntAndKillMazeGenerator: Generating maze 6x6 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x2;S2x2;Cave;, P2x2;S2x2;Cave;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.HuntAndKillMazeGenerator)
HuntAndKillMazeGenerator: Generating maze 6x6 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x2;S2x2;Cave;, P2x2;S2x2;Cave;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.HuntAndKillMazeGenerator)
HuntAndKillMazeGenerator: Generating maze 6x6 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x2;S2x2;Cave;, P2x2;S2x2;Cave;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.HuntAndKillMazeGenerator)
HuntAndKillMazeGenerator: Generating maze 6x6 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x2;S2x2;Cave;, P2x2;S2x2;Cave;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.HuntAndKillMazeGenerator)
HuntAndKillMazeGenerator: Generating maze 6x6 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x2;S2x2;Cave;, P2x2;S2x2;Cave;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.HuntAndKillMazeGenerator)
HuntAndKillMazeGenerator: Generating maze 6x6 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x2;S2x2;Cave;, P2x2;S2x2;Cave;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.HuntAndKillMazeGenerator)
HuntAndKillMazeGenerator: Generating maze 6x6 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x2;S2x2;Cave;, P2x2;S2x2;Cave;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.HuntAndKillMazeGenerator)
HuntAndKillMazeGenerator: Generating maze 6x6 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x2;S2x2;Cave;, P2x2;S2x2;Cave;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.HuntAndKillMazeGenerator)
HuntAndKillMazeGenerator: Generating maze 6x6 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x2;S2x2;Cave;, P2x2;S2x2;Cave;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.HuntAndKillMazeGenerator)
HuntAndKillMazeGenerator: Generating maze 6x6 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x2;S2x2;Cave;, P2x2;S2x2;Cave;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.HuntAndKillMazeGenerator)
]]></output>
                </test-case>
                <test-case id="1-1202" name="TwoMatchingAreas(PlayersWorlds.Maps.Maze.HuntAndKillMazeGenerator,Hall)" fullname="PlayersWorlds.Maps.Maze.MazeGeneratorAreasTest.TwoMatchingAreas(PlayersWorlds.Maps.Maze.HuntAndKillMazeGenerator,Hall)" methodname="TwoMatchingAreas" classname="PlayersWorlds.Maps.Maze.MazeGeneratorAreasTest" runstate="Runnable" seed="2068869158" result="Passed" start-time="2024-02-20T15:16:52.7649570Z" end-time="2024-02-20T15:16:52.7732370Z" duration="0.008280" asserts="60">
                  <output><![CDATA[HuntAndKillMazeGenerator: Generating maze 6x6 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x2;S2x2;Hall;, P2x2;S2x2;Hall;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.HuntAndKillMazeGenerator)
HuntAndKillMazeGenerator: Generating maze 6x6 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x2;S2x2;Hall;, P2x2;S2x2;Hall;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.HuntAndKillMazeGenerator)
HuntAndKillMazeGenerator: Generating maze 6x6 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x2;S2x2;Hall;, P2x2;S2x2;Hall;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.HuntAndKillMazeGenerator)
HuntAndKillMazeGenerator: Generating maze 6x6 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x2;S2x2;Hall;, P2x2;S2x2;Hall;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.HuntAndKillMazeGenerator)
HuntAndKillMazeGenerator: Generating maze 6x6 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x2;S2x2;Hall;, P2x2;S2x2;Hall;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.HuntAndKillMazeGenerator)
HuntAndKillMazeGenerator: Generating maze 6x6 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x2;S2x2;Hall;, P2x2;S2x2;Hall;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.HuntAndKillMazeGenerator)
HuntAndKillMazeGenerator: Generating maze 6x6 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x2;S2x2;Hall;, P2x2;S2x2;Hall;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.HuntAndKillMazeGenerator)
HuntAndKillMazeGenerator: Generating maze 6x6 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x2;S2x2;Hall;, P2x2;S2x2;Hall;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.HuntAndKillMazeGenerator)
HuntAndKillMazeGenerator: Generating maze 6x6 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x2;S2x2;Hall;, P2x2;S2x2;Hall;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.HuntAndKillMazeGenerator)
HuntAndKillMazeGenerator: Generating maze 6x6 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x2;S2x2;Hall;, P2x2;S2x2;Hall;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.HuntAndKillMazeGenerator)
]]></output>
                </test-case>
                <test-case id="1-1203" name="TwoMatchingAreas(PlayersWorlds.Maps.Maze.HuntAndKillMazeGenerator,Fill)" fullname="PlayersWorlds.Maps.Maze.MazeGeneratorAreasTest.TwoMatchingAreas(PlayersWorlds.Maps.Maze.HuntAndKillMazeGenerator,Fill)" methodname="TwoMatchingAreas" classname="PlayersWorlds.Maps.Maze.MazeGeneratorAreasTest" runstate="Runnable" seed="730382676" result="Passed" start-time="2024-02-20T15:16:52.7732560Z" end-time="2024-02-20T15:16:52.7808150Z" duration="0.007560" asserts="60">
                  <output><![CDATA[HuntAndKillMazeGenerator: Generating maze 6x6 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x2;S2x2;Fill;, P2x2;S2x2;Fill;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.HuntAndKillMazeGenerator)
HuntAndKillMazeGenerator: Generating maze 6x6 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x2;S2x2;Fill;, P2x2;S2x2;Fill;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.HuntAndKillMazeGenerator)
HuntAndKillMazeGenerator: Generating maze 6x6 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x2;S2x2;Fill;, P2x2;S2x2;Fill;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.HuntAndKillMazeGenerator)
HuntAndKillMazeGenerator: Generating maze 6x6 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x2;S2x2;Fill;, P2x2;S2x2;Fill;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.HuntAndKillMazeGenerator)
HuntAndKillMazeGenerator: Generating maze 6x6 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x2;S2x2;Fill;, P2x2;S2x2;Fill;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.HuntAndKillMazeGenerator)
HuntAndKillMazeGenerator: Generating maze 6x6 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x2;S2x2;Fill;, P2x2;S2x2;Fill;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.HuntAndKillMazeGenerator)
HuntAndKillMazeGenerator: Generating maze 6x6 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x2;S2x2;Fill;, P2x2;S2x2;Fill;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.HuntAndKillMazeGenerator)
HuntAndKillMazeGenerator: Generating maze 6x6 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x2;S2x2;Fill;, P2x2;S2x2;Fill;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.HuntAndKillMazeGenerator)
HuntAndKillMazeGenerator: Generating maze 6x6 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x2;S2x2;Fill;, P2x2;S2x2;Fill;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.HuntAndKillMazeGenerator)
HuntAndKillMazeGenerator: Generating maze 6x6 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x2;S2x2;Fill;, P2x2;S2x2;Fill;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.HuntAndKillMazeGenerator)
]]></output>
                </test-case>
                <test-case id="1-1204" name="TwoMatchingAreas(PlayersWorlds.Maps.Maze.RecursiveBacktrackerMazeGenerator,Cave)" fullname="PlayersWorlds.Maps.Maze.MazeGeneratorAreasTest.TwoMatchingAreas(PlayersWorlds.Maps.Maze.RecursiveBacktrackerMazeGenerator,Cave)" methodname="TwoMatchingAreas" classname="PlayersWorlds.Maps.Maze.MazeGeneratorAreasTest" runstate="Runnable" seed="419069794" result="Passed" start-time="2024-02-20T15:16:52.7808290Z" end-time="2024-02-20T15:16:52.7887710Z" duration="0.007942" asserts="60">
                  <output><![CDATA[RecursiveBacktrackerMazeGenerator: Generating maze 6x6 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x2;S2x2;Cave;, P2x2;S2x2;Cave;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.RecursiveBacktrackerMazeGenerator)
RecursiveBacktrackerMazeGenerator: Generating maze 6x6 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x2;S2x2;Cave;, P2x2;S2x2;Cave;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.RecursiveBacktrackerMazeGenerator)
RecursiveBacktrackerMazeGenerator: Generating maze 6x6 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x2;S2x2;Cave;, P2x2;S2x2;Cave;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.RecursiveBacktrackerMazeGenerator)
RecursiveBacktrackerMazeGenerator: Generating maze 6x6 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x2;S2x2;Cave;, P2x2;S2x2;Cave;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.RecursiveBacktrackerMazeGenerator)
RecursiveBacktrackerMazeGenerator: Generating maze 6x6 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x2;S2x2;Cave;, P2x2;S2x2;Cave;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.RecursiveBacktrackerMazeGenerator)
RecursiveBacktrackerMazeGenerator: Generating maze 6x6 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x2;S2x2;Cave;, P2x2;S2x2;Cave;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.RecursiveBacktrackerMazeGenerator)
RecursiveBacktrackerMazeGenerator: Generating maze 6x6 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x2;S2x2;Cave;, P2x2;S2x2;Cave;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.RecursiveBacktrackerMazeGenerator)
RecursiveBacktrackerMazeGenerator: Generating maze 6x6 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x2;S2x2;Cave;, P2x2;S2x2;Cave;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.RecursiveBacktrackerMazeGenerator)
RecursiveBacktrackerMazeGenerator: Generating maze 6x6 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x2;S2x2;Cave;, P2x2;S2x2;Cave;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.RecursiveBacktrackerMazeGenerator)
RecursiveBacktrackerMazeGenerator: Generating maze 6x6 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x2;S2x2;Cave;, P2x2;S2x2;Cave;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.RecursiveBacktrackerMazeGenerator)
]]></output>
                </test-case>
                <test-case id="1-1205" name="TwoMatchingAreas(PlayersWorlds.Maps.Maze.RecursiveBacktrackerMazeGenerator,Hall)" fullname="PlayersWorlds.Maps.Maze.MazeGeneratorAreasTest.TwoMatchingAreas(PlayersWorlds.Maps.Maze.RecursiveBacktrackerMazeGenerator,Hall)" methodname="TwoMatchingAreas" classname="PlayersWorlds.Maps.Maze.MazeGeneratorAreasTest" runstate="Runnable" seed="1807284885" result="Passed" start-time="2024-02-20T15:16:52.7887880Z" end-time="2024-02-20T15:16:52.7972150Z" duration="0.008427" asserts="60">
                  <output><![CDATA[RecursiveBacktrackerMazeGenerator: Generating maze 6x6 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x2;S2x2;Hall;, P2x2;S2x2;Hall;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.RecursiveBacktrackerMazeGenerator)
RecursiveBacktrackerMazeGenerator: Generating maze 6x6 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x2;S2x2;Hall;, P2x2;S2x2;Hall;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.RecursiveBacktrackerMazeGenerator)
RecursiveBacktrackerMazeGenerator: Generating maze 6x6 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x2;S2x2;Hall;, P2x2;S2x2;Hall;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.RecursiveBacktrackerMazeGenerator)
RecursiveBacktrackerMazeGenerator: Generating maze 6x6 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x2;S2x2;Hall;, P2x2;S2x2;Hall;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.RecursiveBacktrackerMazeGenerator)
RecursiveBacktrackerMazeGenerator: Generating maze 6x6 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x2;S2x2;Hall;, P2x2;S2x2;Hall;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.RecursiveBacktrackerMazeGenerator)
RecursiveBacktrackerMazeGenerator: Generating maze 6x6 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x2;S2x2;Hall;, P2x2;S2x2;Hall;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.RecursiveBacktrackerMazeGenerator)
RecursiveBacktrackerMazeGenerator: Generating maze 6x6 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x2;S2x2;Hall;, P2x2;S2x2;Hall;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.RecursiveBacktrackerMazeGenerator)
RecursiveBacktrackerMazeGenerator: Generating maze 6x6 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x2;S2x2;Hall;, P2x2;S2x2;Hall;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.RecursiveBacktrackerMazeGenerator)
RecursiveBacktrackerMazeGenerator: Generating maze 6x6 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x2;S2x2;Hall;, P2x2;S2x2;Hall;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.RecursiveBacktrackerMazeGenerator)
RecursiveBacktrackerMazeGenerator: Generating maze 6x6 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x2;S2x2;Hall;, P2x2;S2x2;Hall;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.RecursiveBacktrackerMazeGenerator)
]]></output>
                </test-case>
                <test-case id="1-1206" name="TwoMatchingAreas(PlayersWorlds.Maps.Maze.RecursiveBacktrackerMazeGenerator,Fill)" fullname="PlayersWorlds.Maps.Maze.MazeGeneratorAreasTest.TwoMatchingAreas(PlayersWorlds.Maps.Maze.RecursiveBacktrackerMazeGenerator,Fill)" methodname="TwoMatchingAreas" classname="PlayersWorlds.Maps.Maze.MazeGeneratorAreasTest" runstate="Runnable" seed="1486906106" result="Passed" start-time="2024-02-20T15:16:52.7972270Z" end-time="2024-02-20T15:16:52.8044660Z" duration="0.007239" asserts="60">
                  <output><![CDATA[RecursiveBacktrackerMazeGenerator: Generating maze 6x6 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x2;S2x2;Fill;, P2x2;S2x2;Fill;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.RecursiveBacktrackerMazeGenerator)
RecursiveBacktrackerMazeGenerator: Generating maze 6x6 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x2;S2x2;Fill;, P2x2;S2x2;Fill;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.RecursiveBacktrackerMazeGenerator)
RecursiveBacktrackerMazeGenerator: Generating maze 6x6 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x2;S2x2;Fill;, P2x2;S2x2;Fill;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.RecursiveBacktrackerMazeGenerator)
RecursiveBacktrackerMazeGenerator: Generating maze 6x6 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x2;S2x2;Fill;, P2x2;S2x2;Fill;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.RecursiveBacktrackerMazeGenerator)
RecursiveBacktrackerMazeGenerator: Generating maze 6x6 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x2;S2x2;Fill;, P2x2;S2x2;Fill;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.RecursiveBacktrackerMazeGenerator)
RecursiveBacktrackerMazeGenerator: Generating maze 6x6 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x2;S2x2;Fill;, P2x2;S2x2;Fill;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.RecursiveBacktrackerMazeGenerator)
RecursiveBacktrackerMazeGenerator: Generating maze 6x6 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x2;S2x2;Fill;, P2x2;S2x2;Fill;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.RecursiveBacktrackerMazeGenerator)
RecursiveBacktrackerMazeGenerator: Generating maze 6x6 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x2;S2x2;Fill;, P2x2;S2x2;Fill;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.RecursiveBacktrackerMazeGenerator)
RecursiveBacktrackerMazeGenerator: Generating maze 6x6 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x2;S2x2;Fill;, P2x2;S2x2;Fill;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.RecursiveBacktrackerMazeGenerator)
RecursiveBacktrackerMazeGenerator: Generating maze 6x6 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x2;S2x2;Fill;, P2x2;S2x2;Fill;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.RecursiveBacktrackerMazeGenerator)
]]></output>
                </test-case>
                <test-case id="1-1207" name="TwoMatchingAreas(PlayersWorlds.Maps.Maze.SidewinderMazeGenerator,Cave)" fullname="PlayersWorlds.Maps.Maze.MazeGeneratorAreasTest.TwoMatchingAreas(PlayersWorlds.Maps.Maze.SidewinderMazeGenerator,Cave)" methodname="TwoMatchingAreas" classname="PlayersWorlds.Maps.Maze.MazeGeneratorAreasTest" runstate="Runnable" seed="2114072768" result="Passed" start-time="2024-02-20T15:16:52.8044810Z" end-time="2024-02-20T15:16:52.8140200Z" duration="0.009539" asserts="60">
                  <output><![CDATA[SidewinderMazeGenerator: Generating maze 6x6 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x2;S2x2;Cave;, P2x2;S2x2;Cave;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.SidewinderMazeGenerator)
SidewinderMazeGenerator: Generating maze 6x6 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x2;S2x2;Cave;, P2x2;S2x2;Cave;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.SidewinderMazeGenerator)
SidewinderMazeGenerator: Generating maze 6x6 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x2;S2x2;Cave;, P2x2;S2x2;Cave;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.SidewinderMazeGenerator)
SidewinderMazeGenerator: Generating maze 6x6 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x2;S2x2;Cave;, P2x2;S2x2;Cave;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.SidewinderMazeGenerator)
SidewinderMazeGenerator: Generating maze 6x6 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x2;S2x2;Cave;, P2x2;S2x2;Cave;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.SidewinderMazeGenerator)
SidewinderMazeGenerator: Generating maze 6x6 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x2;S2x2;Cave;, P2x2;S2x2;Cave;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.SidewinderMazeGenerator)
SidewinderMazeGenerator: Generating maze 6x6 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x2;S2x2;Cave;, P2x2;S2x2;Cave;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.SidewinderMazeGenerator)
SidewinderMazeGenerator: Generating maze 6x6 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x2;S2x2;Cave;, P2x2;S2x2;Cave;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.SidewinderMazeGenerator)
SidewinderMazeGenerator: Generating maze 6x6 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x2;S2x2;Cave;, P2x2;S2x2;Cave;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.SidewinderMazeGenerator)
SidewinderMazeGenerator: Generating maze 6x6 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x2;S2x2;Cave;, P2x2;S2x2;Cave;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.SidewinderMazeGenerator)
]]></output>
                </test-case>
                <test-case id="1-1208" name="TwoMatchingAreas(PlayersWorlds.Maps.Maze.SidewinderMazeGenerator,Hall)" fullname="PlayersWorlds.Maps.Maze.MazeGeneratorAreasTest.TwoMatchingAreas(PlayersWorlds.Maps.Maze.SidewinderMazeGenerator,Hall)" methodname="TwoMatchingAreas" classname="PlayersWorlds.Maps.Maze.MazeGeneratorAreasTest" runstate="Runnable" seed="188123723" result="Passed" start-time="2024-02-20T15:16:52.8140460Z" end-time="2024-02-20T15:16:52.8234870Z" duration="0.009442" asserts="60">
                  <output><![CDATA[SidewinderMazeGenerator: Generating maze 6x6 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x2;S2x2;Hall;, P2x2;S2x2;Hall;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.SidewinderMazeGenerator)
SidewinderMazeGenerator: Generating maze 6x6 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x2;S2x2;Hall;, P2x2;S2x2;Hall;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.SidewinderMazeGenerator)
SidewinderMazeGenerator: Generating maze 6x6 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x2;S2x2;Hall;, P2x2;S2x2;Hall;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.SidewinderMazeGenerator)
SidewinderMazeGenerator: Generating maze 6x6 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x2;S2x2;Hall;, P2x2;S2x2;Hall;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.SidewinderMazeGenerator)
SidewinderMazeGenerator: Generating maze 6x6 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x2;S2x2;Hall;, P2x2;S2x2;Hall;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.SidewinderMazeGenerator)
SidewinderMazeGenerator: Generating maze 6x6 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x2;S2x2;Hall;, P2x2;S2x2;Hall;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.SidewinderMazeGenerator)
SidewinderMazeGenerator: Generating maze 6x6 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x2;S2x2;Hall;, P2x2;S2x2;Hall;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.SidewinderMazeGenerator)
SidewinderMazeGenerator: Generating maze 6x6 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x2;S2x2;Hall;, P2x2;S2x2;Hall;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.SidewinderMazeGenerator)
SidewinderMazeGenerator: Generating maze 6x6 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x2;S2x2;Hall;, P2x2;S2x2;Hall;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.SidewinderMazeGenerator)
SidewinderMazeGenerator: Generating maze 6x6 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x2;S2x2;Hall;, P2x2;S2x2;Hall;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.SidewinderMazeGenerator)
]]></output>
                </test-case>
                <test-case id="1-1209" name="TwoMatchingAreas(PlayersWorlds.Maps.Maze.SidewinderMazeGenerator,Fill)" fullname="PlayersWorlds.Maps.Maze.MazeGeneratorAreasTest.TwoMatchingAreas(PlayersWorlds.Maps.Maze.SidewinderMazeGenerator,Fill)" methodname="TwoMatchingAreas" classname="PlayersWorlds.Maps.Maze.MazeGeneratorAreasTest" runstate="Runnable" seed="605326133" result="Passed" start-time="2024-02-20T15:16:52.8235000Z" end-time="2024-02-20T15:16:52.8319110Z" duration="0.008412" asserts="60">
                  <output><![CDATA[SidewinderMazeGenerator: Generating maze 6x6 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x2;S2x2;Fill;, P2x2;S2x2;Fill;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.SidewinderMazeGenerator)
SidewinderMazeGenerator: Generating maze 6x6 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x2;S2x2;Fill;, P2x2;S2x2;Fill;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.SidewinderMazeGenerator)
SidewinderMazeGenerator: Generating maze 6x6 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x2;S2x2;Fill;, P2x2;S2x2;Fill;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.SidewinderMazeGenerator)
SidewinderMazeGenerator: Generating maze 6x6 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x2;S2x2;Fill;, P2x2;S2x2;Fill;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.SidewinderMazeGenerator)
SidewinderMazeGenerator: Generating maze 6x6 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x2;S2x2;Fill;, P2x2;S2x2;Fill;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.SidewinderMazeGenerator)
SidewinderMazeGenerator: Generating maze 6x6 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x2;S2x2;Fill;, P2x2;S2x2;Fill;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.SidewinderMazeGenerator)
SidewinderMazeGenerator: Generating maze 6x6 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x2;S2x2;Fill;, P2x2;S2x2;Fill;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.SidewinderMazeGenerator)
SidewinderMazeGenerator: Generating maze 6x6 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x2;S2x2;Fill;, P2x2;S2x2;Fill;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.SidewinderMazeGenerator)
SidewinderMazeGenerator: Generating maze 6x6 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x2;S2x2;Fill;, P2x2;S2x2;Fill;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.SidewinderMazeGenerator)
SidewinderMazeGenerator: Generating maze 6x6 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x2;S2x2;Fill;, P2x2;S2x2;Fill;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.SidewinderMazeGenerator)
]]></output>
                </test-case>
                <test-case id="1-1210" name="TwoMatchingAreas(PlayersWorlds.Maps.Maze.WilsonsMazeGenerator,Cave)" fullname="PlayersWorlds.Maps.Maze.MazeGeneratorAreasTest.TwoMatchingAreas(PlayersWorlds.Maps.Maze.WilsonsMazeGenerator,Cave)" methodname="TwoMatchingAreas" classname="PlayersWorlds.Maps.Maze.MazeGeneratorAreasTest" runstate="Runnable" seed="1570211737" result="Passed" start-time="2024-02-20T15:16:52.8319230Z" end-time="2024-02-20T15:16:52.8404630Z" duration="0.008541" asserts="60">
                  <output><![CDATA[WilsonsMazeGenerator: Generating maze 6x6 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x2;S2x2;Cave;, P2x2;S2x2;Cave;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.WilsonsMazeGenerator)
WilsonsMazeGenerator: Generating maze 6x6 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x2;S2x2;Cave;, P2x2;S2x2;Cave;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.WilsonsMazeGenerator)
WilsonsMazeGenerator: Generating maze 6x6 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x2;S2x2;Cave;, P2x2;S2x2;Cave;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.WilsonsMazeGenerator)
WilsonsMazeGenerator: Generating maze 6x6 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x2;S2x2;Cave;, P2x2;S2x2;Cave;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.WilsonsMazeGenerator)
WilsonsMazeGenerator: Generating maze 6x6 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x2;S2x2;Cave;, P2x2;S2x2;Cave;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.WilsonsMazeGenerator)
WilsonsMazeGenerator: Generating maze 6x6 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x2;S2x2;Cave;, P2x2;S2x2;Cave;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.WilsonsMazeGenerator)
WilsonsMazeGenerator: Generating maze 6x6 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x2;S2x2;Cave;, P2x2;S2x2;Cave;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.WilsonsMazeGenerator)
WilsonsMazeGenerator: Generating maze 6x6 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x2;S2x2;Cave;, P2x2;S2x2;Cave;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.WilsonsMazeGenerator)
WilsonsMazeGenerator: Generating maze 6x6 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x2;S2x2;Cave;, P2x2;S2x2;Cave;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.WilsonsMazeGenerator)
WilsonsMazeGenerator: Generating maze 6x6 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x2;S2x2;Cave;, P2x2;S2x2;Cave;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.WilsonsMazeGenerator)
]]></output>
                </test-case>
                <test-case id="1-1211" name="TwoMatchingAreas(PlayersWorlds.Maps.Maze.WilsonsMazeGenerator,Hall)" fullname="PlayersWorlds.Maps.Maze.MazeGeneratorAreasTest.TwoMatchingAreas(PlayersWorlds.Maps.Maze.WilsonsMazeGenerator,Hall)" methodname="TwoMatchingAreas" classname="PlayersWorlds.Maps.Maze.MazeGeneratorAreasTest" runstate="Runnable" seed="1151514663" result="Passed" start-time="2024-02-20T15:16:52.8404860Z" end-time="2024-02-20T15:16:52.8499930Z" duration="0.009507" asserts="60">
                  <output><![CDATA[WilsonsMazeGenerator: Generating maze 6x6 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x2;S2x2;Hall;, P2x2;S2x2;Hall;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.WilsonsMazeGenerator)
WilsonsMazeGenerator: Generating maze 6x6 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x2;S2x2;Hall;, P2x2;S2x2;Hall;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.WilsonsMazeGenerator)
WilsonsMazeGenerator: Generating maze 6x6 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x2;S2x2;Hall;, P2x2;S2x2;Hall;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.WilsonsMazeGenerator)
WilsonsMazeGenerator: Generating maze 6x6 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x2;S2x2;Hall;, P2x2;S2x2;Hall;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.WilsonsMazeGenerator)
WilsonsMazeGenerator: Generating maze 6x6 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x2;S2x2;Hall;, P2x2;S2x2;Hall;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.WilsonsMazeGenerator)
WilsonsMazeGenerator: Generating maze 6x6 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x2;S2x2;Hall;, P2x2;S2x2;Hall;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.WilsonsMazeGenerator)
WilsonsMazeGenerator: Generating maze 6x6 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x2;S2x2;Hall;, P2x2;S2x2;Hall;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.WilsonsMazeGenerator)
WilsonsMazeGenerator: Generating maze 6x6 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x2;S2x2;Hall;, P2x2;S2x2;Hall;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.WilsonsMazeGenerator)
WilsonsMazeGenerator: Generating maze 6x6 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x2;S2x2;Hall;, P2x2;S2x2;Hall;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.WilsonsMazeGenerator)
WilsonsMazeGenerator: Generating maze 6x6 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x2;S2x2;Hall;, P2x2;S2x2;Hall;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.WilsonsMazeGenerator)
]]></output>
                </test-case>
                <test-case id="1-1212" name="TwoMatchingAreas(PlayersWorlds.Maps.Maze.WilsonsMazeGenerator,Fill)" fullname="PlayersWorlds.Maps.Maze.MazeGeneratorAreasTest.TwoMatchingAreas(PlayersWorlds.Maps.Maze.WilsonsMazeGenerator,Fill)" methodname="TwoMatchingAreas" classname="PlayersWorlds.Maps.Maze.MazeGeneratorAreasTest" runstate="Runnable" seed="365025409" result="Passed" start-time="2024-02-20T15:16:52.8500080Z" end-time="2024-02-20T15:16:52.8581910Z" duration="0.008184" asserts="60">
                  <output><![CDATA[WilsonsMazeGenerator: Generating maze 6x6 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x2;S2x2;Fill;, P2x2;S2x2;Fill;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.WilsonsMazeGenerator)
WilsonsMazeGenerator: Generating maze 6x6 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x2;S2x2;Fill;, P2x2;S2x2;Fill;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.WilsonsMazeGenerator)
WilsonsMazeGenerator: Generating maze 6x6 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x2;S2x2;Fill;, P2x2;S2x2;Fill;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.WilsonsMazeGenerator)
WilsonsMazeGenerator: Generating maze 6x6 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x2;S2x2;Fill;, P2x2;S2x2;Fill;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.WilsonsMazeGenerator)
WilsonsMazeGenerator: Generating maze 6x6 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x2;S2x2;Fill;, P2x2;S2x2;Fill;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.WilsonsMazeGenerator)
WilsonsMazeGenerator: Generating maze 6x6 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x2;S2x2;Fill;, P2x2;S2x2;Fill;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.WilsonsMazeGenerator)
WilsonsMazeGenerator: Generating maze 6x6 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x2;S2x2;Fill;, P2x2;S2x2;Fill;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.WilsonsMazeGenerator)
WilsonsMazeGenerator: Generating maze 6x6 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x2;S2x2;Fill;, P2x2;S2x2;Fill;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.WilsonsMazeGenerator)
WilsonsMazeGenerator: Generating maze 6x6 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x2;S2x2;Fill;, P2x2;S2x2;Fill;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.WilsonsMazeGenerator)
WilsonsMazeGenerator: Generating maze 6x6 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x2;S2x2;Fill;, P2x2;S2x2;Fill;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.WilsonsMazeGenerator)
]]></output>
                </test-case>
              </test-suite>
              <test-case id="1-1233" name="WilsonsHalls" fullname="PlayersWorlds.Maps.Maze.MazeGeneratorAreasTest.WilsonsHalls" methodname="WilsonsHalls" classname="PlayersWorlds.Maps.Maze.MazeGeneratorAreasTest" runstate="Runnable" seed="1046734803" result="Passed" start-time="2024-02-20T15:16:52.8582230Z" end-time="2024-02-20T15:16:52.8618450Z" duration="0.003622" asserts="1">
                <properties>
                  <property name="Repeat" value="10" />
                </properties>
                <output><![CDATA[WilsonsMazeGenerator: Generating maze 15x15 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x3;S4x7;Hall;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.WilsonsMazeGenerator)
]]></output>
              </test-case>
            </test-suite>
            <test-suite type="TestFixture" id="1-1361" name="MazeGeneratorTest" fullname="PlayersWorlds.Maps.Maze.MazeGeneratorTest" classname="PlayersWorlds.Maps.Maze.MazeGeneratorTest" runstate="Runnable" testcasecount="532" result="Passed" start-time="2024-02-20T15:16:52.8618830Z" end-time="2024-02-20T15:16:52.9518480Z" duration="0.089964" total="28" passed="28" failed="0" warnings="0" inconclusive="0" skipped="0" asserts="173">
              <test-suite type="ParameterizedMethod" id="1-1897" name="AreasAreAppliedProperly" fullname="PlayersWorlds.Maps.Maze.MazeGeneratorTest.AreasAreAppliedProperly" classname="PlayersWorlds.Maps.Maze.MazeGeneratorTest" runstate="Runnable" testcasecount="6" result="Passed" start-time="2024-02-20T15:16:52.8619320Z" end-time="2024-02-20T15:16:52.8911950Z" duration="0.029263" total="6" passed="6" failed="0" warnings="0" inconclusive="0" skipped="0" asserts="138">
                <test-case id="1-1891" name="AreasAreAppliedProperly(PlayersWorlds.Maps.Maze.AldousBroderMazeGenerator)" fullname="PlayersWorlds.Maps.Maze.MazeGeneratorTest.AreasAreAppliedProperly(PlayersWorlds.Maps.Maze.AldousBroderMazeGenerator)" methodname="AreasAreAppliedProperly" classname="PlayersWorlds.Maps.Maze.MazeGeneratorTest" runstate="Runnable" seed="1543687920" result="Passed" start-time="2024-02-20T15:16:52.8619520Z" end-time="2024-02-20T15:16:52.8691060Z" duration="0.007155" asserts="23">
                  <output><![CDATA[AldousBroderMazeGenerator: Generating maze 10x10 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x1;S2x3;Fill;, P1x5;S3x4;Fill;, P5x6;S3x2;Hall;, P5x1;S4x3;Hall;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.AldousBroderMazeGenerator)
]]></output>
                </test-case>
                <test-case id="1-1892" name="AreasAreAppliedProperly(PlayersWorlds.Maps.Maze.BinaryTreeMazeGenerator)" fullname="PlayersWorlds.Maps.Maze.MazeGeneratorTest.AreasAreAppliedProperly(PlayersWorlds.Maps.Maze.BinaryTreeMazeGenerator)" methodname="AreasAreAppliedProperly" classname="PlayersWorlds.Maps.Maze.MazeGeneratorTest" runstate="Runnable" seed="1045893456" result="Passed" start-time="2024-02-20T15:16:52.8691270Z" end-time="2024-02-20T15:16:52.8737980Z" duration="0.004671" asserts="23">
                  <output><![CDATA[BinaryTreeMazeGenerator: Generating maze 10x10 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x1;S2x3;Fill;, P1x5;S3x4;Fill;, P5x6;S3x2;Hall;, P5x1;S4x3;Hall;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.BinaryTreeMazeGenerator)
]]></output>
                </test-case>
                <test-case id="1-1893" name="AreasAreAppliedProperly(PlayersWorlds.Maps.Maze.HuntAndKillMazeGenerator)" fullname="PlayersWorlds.Maps.Maze.MazeGeneratorTest.AreasAreAppliedProperly(PlayersWorlds.Maps.Maze.HuntAndKillMazeGenerator)" methodname="AreasAreAppliedProperly" classname="PlayersWorlds.Maps.Maze.MazeGeneratorTest" runstate="Runnable" seed="2072861022" result="Passed" start-time="2024-02-20T15:16:52.8738100Z" end-time="2024-02-20T15:16:52.8781170Z" duration="0.004307" asserts="23">
                  <output><![CDATA[HuntAndKillMazeGenerator: Generating maze 10x10 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x1;S2x3;Fill;, P1x5;S3x4;Fill;, P5x6;S3x2;Hall;, P5x1;S4x3;Hall;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.HuntAndKillMazeGenerator)
]]></output>
                </test-case>
                <test-case id="1-1894" name="AreasAreAppliedProperly(PlayersWorlds.Maps.Maze.RecursiveBacktrackerMazeGenerator)" fullname="PlayersWorlds.Maps.Maze.MazeGeneratorTest.AreasAreAppliedProperly(PlayersWorlds.Maps.Maze.RecursiveBacktrackerMazeGenerator)" methodname="AreasAreAppliedProperly" classname="PlayersWorlds.Maps.Maze.MazeGeneratorTest" runstate="Runnable" seed="467650096" result="Passed" start-time="2024-02-20T15:16:52.8781350Z" end-time="2024-02-20T15:16:52.8820790Z" duration="0.003944" asserts="23">
                  <output><![CDATA[RecursiveBacktrackerMazeGenerator: Generating maze 10x10 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x1;S2x3;Fill;, P1x5;S3x4;Fill;, P5x6;S3x2;Hall;, P5x1;S4x3;Hall;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.RecursiveBacktrackerMazeGenerator)
]]></output>
                </test-case>
                <test-case id="1-1895" name="AreasAreAppliedProperly(PlayersWorlds.Maps.Maze.SidewinderMazeGenerator)" fullname="PlayersWorlds.Maps.Maze.MazeGeneratorTest.AreasAreAppliedProperly(PlayersWorlds.Maps.Maze.SidewinderMazeGenerator)" methodname="AreasAreAppliedProperly" classname="PlayersWorlds.Maps.Maze.MazeGeneratorTest" runstate="Runnable" seed="291959250" result="Passed" start-time="2024-02-20T15:16:52.8820910Z" end-time="2024-02-20T15:16:52.8866480Z" duration="0.004558" asserts="23">
                  <output><![CDATA[SidewinderMazeGenerator: Generating maze 10x10 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x1;S2x3;Fill;, P1x5;S3x4;Fill;, P5x6;S3x2;Hall;, P5x1;S4x3;Hall;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.SidewinderMazeGenerator)
]]></output>
                </test-case>
                <test-case id="1-1896" name="AreasAreAppliedProperly(PlayersWorlds.Maps.Maze.WilsonsMazeGenerator)" fullname="PlayersWorlds.Maps.Maze.MazeGeneratorTest.AreasAreAppliedProperly(PlayersWorlds.Maps.Maze.WilsonsMazeGenerator)" methodname="AreasAreAppliedProperly" classname="PlayersWorlds.Maps.Maze.MazeGeneratorTest" runstate="Runnable" seed="1500884343" result="Passed" start-time="2024-02-20T15:16:52.8866620Z" end-time="2024-02-20T15:16:52.8911820Z" duration="0.004520" asserts="23">
                  <output><![CDATA[WilsonsMazeGenerator: Generating maze 10x10 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x1;S2x3;Fill;, P1x5;S3x4;Fill;, P5x6;S3x2;Hall;, P5x1;S4x3;Hall;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.WilsonsMazeGenerator)
]]></output>
                </test-case>
              </test-suite>
              <test-suite type="ParameterizedMethod" id="1-1890" name="CanFindPaths" fullname="PlayersWorlds.Maps.Maze.MazeGeneratorTest.CanFindPaths" classname="PlayersWorlds.Maps.Maze.MazeGeneratorTest" runstate="Runnable" testcasecount="6" result="Passed" start-time="2024-02-20T15:16:52.8912060Z" end-time="2024-02-20T15:16:52.8930660Z" duration="0.001860" total="6" passed="6" failed="0" warnings="0" inconclusive="0" skipped="0" asserts="12">
                <test-case id="1-1884" name="CanFindPaths(PlayersWorlds.Maps.Maze.AldousBroderMazeGenerator)" fullname="PlayersWorlds.Maps.Maze.MazeGeneratorTest.CanFindPaths(PlayersWorlds.Maps.Maze.AldousBroderMazeGenerator)" methodname="CanFindPaths" classname="PlayersWorlds.Maps.Maze.MazeGeneratorTest" runstate="Runnable" seed="420977532" result="Passed" start-time="2024-02-20T15:16:52.8912160Z" end-time="2024-02-20T15:16:52.8922470Z" duration="0.001032" asserts="2" />
                <test-case id="1-1885" name="CanFindPaths(PlayersWorlds.Maps.Maze.BinaryTreeMazeGenerator)" fullname="PlayersWorlds.Maps.Maze.MazeGeneratorTest.CanFindPaths(PlayersWorlds.Maps.Maze.BinaryTreeMazeGenerator)" methodname="CanFindPaths" classname="PlayersWorlds.Maps.Maze.MazeGeneratorTest" runstate="Runnable" seed="756699782" result="Passed" start-time="2024-02-20T15:16:52.8922560Z" end-time="2024-02-20T15:16:52.8924350Z" duration="0.000179" asserts="2" />
                <test-case id="1-1886" name="CanFindPaths(PlayersWorlds.Maps.Maze.HuntAndKillMazeGenerator)" fullname="PlayersWorlds.Maps.Maze.MazeGeneratorTest.CanFindPaths(PlayersWorlds.Maps.Maze.HuntAndKillMazeGenerator)" methodname="CanFindPaths" classname="PlayersWorlds.Maps.Maze.MazeGeneratorTest" runstate="Runnable" seed="557109043" result="Passed" start-time="2024-02-20T15:16:52.8924410Z" end-time="2024-02-20T15:16:52.8925460Z" duration="0.000106" asserts="2" />
                <test-case id="1-1887" name="CanFindPaths(PlayersWorlds.Maps.Maze.RecursiveBacktrackerMazeGenerator)" fullname="PlayersWorlds.Maps.Maze.MazeGeneratorTest.CanFindPaths(PlayersWorlds.Maps.Maze.RecursiveBacktrackerMazeGenerator)" methodname="CanFindPaths" classname="PlayersWorlds.Maps.Maze.MazeGeneratorTest" runstate="Runnable" seed="521214433" result="Passed" start-time="2024-02-20T15:16:52.8925520Z" end-time="2024-02-20T15:16:52.8926660Z" duration="0.000114" asserts="2" />
                <test-case id="1-1888" name="CanFindPaths(PlayersWorlds.Maps.Maze.SidewinderMazeGenerator)" fullname="PlayersWorlds.Maps.Maze.MazeGeneratorTest.CanFindPaths(PlayersWorlds.Maps.Maze.SidewinderMazeGenerator)" methodname="CanFindPaths" classname="PlayersWorlds.Maps.Maze.MazeGeneratorTest" runstate="Runnable" seed="1045825920" result="Passed" start-time="2024-02-20T15:16:52.8926720Z" end-time="2024-02-20T15:16:52.8928520Z" duration="0.000180" asserts="2" />
                <test-case id="1-1889" name="CanFindPaths(PlayersWorlds.Maps.Maze.WilsonsMazeGenerator)" fullname="PlayersWorlds.Maps.Maze.MazeGeneratorTest.CanFindPaths(PlayersWorlds.Maps.Maze.WilsonsMazeGenerator)" methodname="CanFindPaths" classname="PlayersWorlds.Maps.Maze.MazeGeneratorTest" runstate="Runnable" seed="2029065899" result="Passed" start-time="2024-02-20T15:16:52.8928610Z" end-time="2024-02-20T15:16:52.8930550Z" duration="0.000194" asserts="2" />
              </test-suite>
              <test-suite type="ParameterizedMethod" id="1-1369" name="CanGenerateMazes" fullname="PlayersWorlds.Maps.Maze.MazeGeneratorTest.CanGenerateMazes" classname="PlayersWorlds.Maps.Maze.MazeGeneratorTest" runstate="Runnable" testcasecount="6" result="Passed" start-time="2024-02-20T15:16:52.8930760Z" end-time="2024-02-20T15:16:52.9304280Z" duration="0.037352" total="6" passed="6" failed="0" warnings="0" inconclusive="0" skipped="0" asserts="6">
                <test-case id="1-1363" name="CanGenerateMazes(PlayersWorlds.Maps.Maze.AldousBroderMazeGenerator)" fullname="PlayersWorlds.Maps.Maze.MazeGeneratorTest.CanGenerateMazes(PlayersWorlds.Maps.Maze.AldousBroderMazeGenerator)" methodname="CanGenerateMazes" classname="PlayersWorlds.Maps.Maze.MazeGeneratorTest" runstate="Runnable" seed="34393735" result="Passed" start-time="2024-02-20T15:16:52.8930900Z" end-time="2024-02-20T15:16:52.9025660Z" duration="0.009477" asserts="1">
                  <output><![CDATA[AldousBroderMazeGenerator: Generating maze 20x20 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, None, <null>, PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.AldousBroderMazeGenerator)
]]></output>
                </test-case>
                <test-case id="1-1364" name="CanGenerateMazes(PlayersWorlds.Maps.Maze.BinaryTreeMazeGenerator)" fullname="PlayersWorlds.Maps.Maze.MazeGeneratorTest.CanGenerateMazes(PlayersWorlds.Maps.Maze.BinaryTreeMazeGenerator)" methodname="CanGenerateMazes" classname="PlayersWorlds.Maps.Maze.MazeGeneratorTest" runstate="Runnable" seed="637858446" result="Passed" start-time="2024-02-20T15:16:52.9025840Z" end-time="2024-02-20T15:16:52.9091910Z" duration="0.006608" asserts="1">
                  <output><![CDATA[BinaryTreeMazeGenerator: Generating maze 20x20 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, None, <null>, PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.BinaryTreeMazeGenerator)
]]></output>
                </test-case>
                <test-case id="1-1365" name="CanGenerateMazes(PlayersWorlds.Maps.Maze.HuntAndKillMazeGenerator)" fullname="PlayersWorlds.Maps.Maze.MazeGeneratorTest.CanGenerateMazes(PlayersWorlds.Maps.Maze.HuntAndKillMazeGenerator)" methodname="CanGenerateMazes" classname="PlayersWorlds.Maps.Maze.MazeGeneratorTest" runstate="Runnable" seed="1690178227" result="Passed" start-time="2024-02-20T15:16:52.9092100Z" end-time="2024-02-20T15:16:52.9135340Z" duration="0.004324" asserts="1">
                  <output><![CDATA[HuntAndKillMazeGenerator: Generating maze 20x20 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, None, <null>, PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.HuntAndKillMazeGenerator)
]]></output>
                </test-case>
                <test-case id="1-1366" name="CanGenerateMazes(PlayersWorlds.Maps.Maze.RecursiveBacktrackerMazeGenerator)" fullname="PlayersWorlds.Maps.Maze.MazeGeneratorTest.CanGenerateMazes(PlayersWorlds.Maps.Maze.RecursiveBacktrackerMazeGenerator)" methodname="CanGenerateMazes" classname="PlayersWorlds.Maps.Maze.MazeGeneratorTest" runstate="Runnable" seed="2060609563" result="Passed" start-time="2024-02-20T15:16:52.9135470Z" end-time="2024-02-20T15:16:52.9183840Z" duration="0.004838" asserts="1">
                  <output><![CDATA[RecursiveBacktrackerMazeGenerator: Generating maze 20x20 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, None, <null>, PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.RecursiveBacktrackerMazeGenerator)
]]></output>
                </test-case>
                <test-case id="1-1367" name="CanGenerateMazes(PlayersWorlds.Maps.Maze.SidewinderMazeGenerator)" fullname="PlayersWorlds.Maps.Maze.MazeGeneratorTest.CanGenerateMazes(PlayersWorlds.Maps.Maze.SidewinderMazeGenerator)" methodname="CanGenerateMazes" classname="PlayersWorlds.Maps.Maze.MazeGeneratorTest" runstate="Runnable" seed="1541137907" result="Passed" start-time="2024-02-20T15:16:52.9183960Z" end-time="2024-02-20T15:16:52.9255920Z" duration="0.007197" asserts="1">
                  <output><![CDATA[SidewinderMazeGenerator: Generating maze 20x20 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, None, <null>, PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.SidewinderMazeGenerator)
]]></output>
                </test-case>
                <test-case id="1-1368" name="CanGenerateMazes(PlayersWorlds.Maps.Maze.WilsonsMazeGenerator)" fullname="PlayersWorlds.Maps.Maze.MazeGeneratorTest.CanGenerateMazes(PlayersWorlds.Maps.Maze.WilsonsMazeGenerator)" methodname="CanGenerateMazes" classname="PlayersWorlds.Maps.Maze.MazeGeneratorTest" runstate="Runnable" seed="1184126756" result="Passed" start-time="2024-02-20T15:16:52.9256040Z" end-time="2024-02-20T15:16:52.9304140Z" duration="0.004810" asserts="1">
                  <output><![CDATA[WilsonsMazeGenerator: Generating maze 20x20 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, None, <null>, PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.WilsonsMazeGenerator)
]]></output>
                </test-case>
              </test-suite>
              <test-case id="1-1362" name="CanUseCustomAreaGenerator" fullname="PlayersWorlds.Maps.Maze.MazeGeneratorTest.CanUseCustomAreaGenerator" methodname="CanUseCustomAreaGenerator" classname="PlayersWorlds.Maps.Maze.MazeGeneratorTest" runstate="Runnable" seed="741968009" result="Passed" start-time="2024-02-20T15:16:52.9304390Z" end-time="2024-02-20T15:16:52.9362610Z" duration="0.005821" asserts="4">
                <output><![CDATA[AldousBroderMazeGenerator: Generating maze 15x15 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Auto, <null>, PlayersWorlds.Maps.Maze.MazeGeneratorTest+CustomAreaGenerator, PlayersWorlds.Maps.Maze.AldousBroderMazeGenerator)
┌───┬───────────────────┬───────┬───────────┬───────────────┐
│   │                   │       │           │               │
│   └───┬───────┐   ┌───┤   ┌───┤   ╶───┐   ╵   ╷   ┌───────┤
│       │       │   │   │   │   │ 14  15│       │   │       │
│   ╷   ╵   ╶───┤   │   ╵   ╵   ╵   ╷   └───────┴───┼───╴   │
│   │           │   │ 10  11  12  13│ 16  17  18  19│       │
│   ├───╴   ╶───┘   │   ╶───────┐   ├───┬───────┐   ╵   ╶───┤
│   │               │ f         │   │   │       │ 1a  1b  1c│
├───┴───┬───┬───┐   ╵   ╷   ╶───┤   ╵   └───┐   ╵   ┌───╴   │
│ 43  44│   │   │     e │       │           │       │     1d│
│   ┌───┘   ╵   ╵   ╷   ├───────┤   ╶───────┼───────┴───┐   │
│ 42│               │ d │ 2   1 │           │           │ 1e│
│   ├───┬───╴   ┌───┘   │   ╷   ├───┐   ┌───┤   ╷   ┌───┘   │
│ 41│   │       │ b   c │ 3 │ 0 │   │   │   │   │   │     1f│
│   ╵   └───┐   │   ┌───┘   └───┤   └───┤   │   │   │   ╷   │
│ 40  3f    │   │ a │ 5   4     │       │   │   │   │   │ 20│
├───╴   ┌───┴───┘   │   ┌───╴   ├───╴   │   ├───┤   ├───┘   │
│     3e│         9 │ 6 │       │       │   │   │   │     21│
├───╴   ├───────╴   ╵   ├───┬───┴───╴   │   ╵   ╵   ├───╴   │
│     3d│         8   7 │   │           │           │ 23  22│
├───╴   └───────┬───────┘   ├───────╴   └───╴   ┌───┘   ╶───┤
│     3c  3b  3a│           │ 2c  2b  2a  29  28│     24    │
│   ╷   ┌───╴   │   ┌───╴   │   ╶───┐   ┌───╴   └───╴   ┌───┤
│   │   │     39│   │       │ 2d  2e│   │     27  26  25│   │
├───┘   ├───╴   ├───┘   ┌───┼───╴   ├───┴───────────╴   ╵   │
│       │     38│ 35  34│   │ 30  2f│                       │
│   ┼   ├───┐   ╵   ╷   ╵   ╵   ╷   ├───────╴   ╷   ┌───┬───┤
│       │   │ 37  36│ 33  32  31│   │           │   │   │   │
│   ┼   │   └───╴   │   ╶───────┤   ├───╴   ╷   └───┘   ╵   │
│       │           │           │   │       │               │
└───────┴───────────┴───────────┴───┴───────┴───────────────┘

]]></output>
              </test-case>
              <test-case id="1-1372" name="IsFillComplete_Full" fullname="PlayersWorlds.Maps.Maze.MazeGeneratorTest.IsFillComplete_Full" methodname="IsFillComplete_Full" classname="PlayersWorlds.Maps.Maze.MazeGeneratorTest" runstate="Runnable" seed="1719987562" result="Passed" start-time="2024-02-20T15:16:52.9362810Z" end-time="2024-02-20T15:16:52.9388470Z" duration="0.002567" asserts="1">
                <output><![CDATA[AldousBroderMazeGenerator: Generating maze 10x10 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, None, <null>, PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.AldousBroderMazeGenerator)
┌───────────────────────────┬───┬───────┐
│         b   c   d   e   f │   │       │
├───────╴   ╶───────┐   ╷   ╵   ╵   ╶───┤
│ 8   9   a         │   │ 10  11  12    │
│   ╶───────────┬───┼───┼───────╴   ╷   │
│ 7   6   5   4 │   │   │ 15  14  13│   │
├───╴   ┌───╴   ╵   │   ╵   ┌───╴   │   │
│       │     3     │ 17  16│       │   │
│   ╶───┴───┐   ╶───┤   ╷   ├───┐   │   │
│           │ 2   1 │ 18│   │   │   │   │
├───┬───────┼───┐   │   ├───┘   ├───┘   │
│ 28│       │   │ 0 │ 19│       │       │
│   ╵   ┌───┤   └───┘   │   ╶───┤   ┌───┤
│ 27  26│   │ 1c  1b  1a│       │   │   │
│   ╷   │   ╵   ╶───┐   ╵   ╷   │   ╵   │
│   │ 25│     1d  1e│       │   │       │
├───┘   └───┬───╴   └───┬───┼───┴───╴   │
│     24  23│ 20  1f    │   │           │
│   ┌───╴   ╵   ╶───┐   ╵   └───┬───╴   │
│   │     22  21    │           │       │
└───┴───────────────┴───────────┴───────┘

]]></output>
              </test-case>
              <test-case id="1-1377" name="IsFillComplete_FullHeight" fullname="PlayersWorlds.Maps.Maze.MazeGeneratorTest.IsFillComplete_FullHeight" methodname="IsFillComplete_FullHeight" classname="PlayersWorlds.Maps.Maze.MazeGeneratorTest" runstate="Runnable" seed="561530072" result="Passed" start-time="2024-02-20T15:16:52.9388590Z" end-time="2024-02-20T15:16:52.9400840Z" duration="0.001225" asserts="1">
                <output><![CDATA[AldousBroderMazeGenerator: Generating maze 10x10 with PlayersWorlds.Maps.Maze.GeneratorOptions(FullHeight, None, <null>, PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.AldousBroderMazeGenerator)
    ┌───┐                                
    │   │                                
    │   │                                
    │   │                                
    │   └───────┬───┐                    
    │           │   │                    
    ├───────╴   │   └───┐                
    │           │       │                
┌───┼───┬───╴   ╵   ┌───┘                
│ 0 │   │     7   8 │                    
│   ╵   ├───╴   ╷   │                    
│ 1   2 │ 5   6 │ 9 │                    
│   ╷   ╵   ┌───┘   │                    
│   │ 3   4 │     a │                    
└───┼───┬───┴───╴   │                    
    │ 10│ d   c   b │                    
    │   ╵   ┌───┐   │                    
    │ f   e │   │   │                    
    │   ┌───┘   └───┘                    
    │   │                                
    └───┘                                

]]></output>
              </test-case>
              <test-case id="1-1376" name="IsFillComplete_FullWidth" fullname="PlayersWorlds.Maps.Maze.MazeGeneratorTest.IsFillComplete_FullWidth" methodname="IsFillComplete_FullWidth" classname="PlayersWorlds.Maps.Maze.MazeGeneratorTest" runstate="Runnable" seed="2003195115" result="Passed" start-time="2024-02-20T15:16:52.9400960Z" end-time="2024-02-20T15:16:52.9421670Z" duration="0.002072" asserts="1">
                <output><![CDATA[AldousBroderMazeGenerator: Generating maze 10x10 with PlayersWorlds.Maps.Maze.GeneratorOptions(FullWidth, None, <null>, PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.AldousBroderMazeGenerator)
    ┌───────────┐   ┌───────┐            
    │ 13  12  11│   │ d   c │            
┌───┘   ┌───╴   └───┘   ╷   │            
│ 15  14│     10  f   e │ b │            
│   ╷   └───┬───╴   ╶───┤   └───────┐    
│ 16│       │           │ a   9     │    
│   └───┬───┴───────┬───┴───╴   ┌───┤    
│ 17  18│ 1   2   3 │ 6   7   8 │   │    
└───┐   │   ┌───┐   ╵   ╷   ╷   ╵   └───┐
    │ 19│ 0 │   │ 4   5 │   │           │
┌───┘   └───┴───┤   ╷   ├───┼───┐   ┌───┘
│ 1b  1a        │   │   │   │   │   │    
│   ╶───┐   ┌───┴───┤   ╵   ╵   │   │    
│ 1c    │   │       │           │   │    
│   ╷   ├───┼───┐   └───────────┴───┘    
│ 1d│   │   │ 24│                        
│   ├───┘   │   │                        
│ 1e│       │ 23│                        
│   ╵   ╶───┘   │                        
│ 1f  20  21  22│                        
└───────────────┘                        

]]></output>
              </test-case>
              <test-case id="1-1371" name="IsFillComplete_Half" fullname="PlayersWorlds.Maps.Maze.MazeGeneratorTest.IsFillComplete_Half" methodname="IsFillComplete_Half" classname="PlayersWorlds.Maps.Maze.MazeGeneratorTest" runstate="Runnable" seed="420218847" result="Passed" start-time="2024-02-20T15:16:52.9421820Z" end-time="2024-02-20T15:16:52.9441090Z" duration="0.001928" asserts="1">
                <output><![CDATA[AldousBroderMazeGenerator: Generating maze 10x10 with PlayersWorlds.Maps.Maze.GeneratorOptions(Half, None, <null>, PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.AldousBroderMazeGenerator)
                        ┌───┐            
                        │   │            
                ┌───┬───┘   ├───┐        
                │   │       │   │        
            ┌───┘   ╵   ╶───┘   └───┐    
            │     9   8   7         │    
        ┌───┤   ╷   ╷   ╷   ╶───────┤    
        │   │   │ a │   │ 6   5   4 │    
┌───┐   │   └───┘   └───┤   ┌───┐   │    
│   │   │     c   b     │   │ 0 │ 3 │    
│   └───┴───┐   ┌───╴   └───┤   ╵   │    
│           │ d │           │ 1   2 │    
│   ╶───────┤   ├───────────┴───────┘    
│     12  11│ e │                        
├───╴   ╷   ╵   │                        
│     13│ 10  f │                        
│   ╷   ├───┐   │                        
│   │ 14│ 17│   │                        
├───┘   ╵   ├───┘                        
│     15  16│                            
└───────────┘                            

]]></output>
              </test-case>
              <test-case id="1-1375" name="IsFillComplete_NinetyPercent" fullname="PlayersWorlds.Maps.Maze.MazeGeneratorTest.IsFillComplete_NinetyPercent" methodname="IsFillComplete_NinetyPercent" classname="PlayersWorlds.Maps.Maze.MazeGeneratorTest" runstate="Runnable" seed="435057165" result="Passed" start-time="2024-02-20T15:16:52.9441220Z" end-time="2024-02-20T15:16:52.9466360Z" duration="0.002514" asserts="1">
                <output><![CDATA[AldousBroderMazeGenerator: Generating maze 10x10 with PlayersWorlds.Maps.Maze.GeneratorOptions(NinetyPercent, None, <null>, PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.AldousBroderMazeGenerator)
    ┌───┐   ┌───────────────────┐        
    │   │   │                   │        
┌───┘   └───┘   ┌───┬───╴   ┌───┤   ┌───┐
│               │   │       │   │   │   │
└───┐   ╷   ╶───┼───┴───────┘   └───┘   │
    │   │       │ 17  16  15  14        │
    │   │   ┌───┘   ╶───┬───╴   ┌───╴   │
    │   │   │     18    │ 12  13│       │
┌───┴───┤   ╵   ╷   ┌───┘   ╷   ├───────┤
│       │       │ 19│ 10  11│   │       │
└───┐   └───────┤   │   ╶───┤   └───╴   │
    │           │ 1a│ f     │           │
┌───┼───────┐   ╵   │   ╶───┴───────┬───┤
│ 27│ 20  1f│ 1c  1b│ e   d   c   b │   │
│   │   ╷   ╵   ┌───┴───┬───┬───╴   ╵   │
│ 26│ 21│ 1e  1d│ 0   1 │   │     a   9 │
│   │   └───────┼───╴   ╵   ├───╴   ╷   │
│ 25│ 22        │     2   3 │       │ 8 │
│   ╵   ╷   ╷   ├───────╴   └───────┘   │
│ 24  23│   │   │         4   5   6   7 │
└───────┴───┴───┴───────────────────────┘

]]></output>
              </test-case>
              <test-case id="1-1373" name="IsFillComplete_Quarter" fullname="PlayersWorlds.Maps.Maze.MazeGeneratorTest.IsFillComplete_Quarter" methodname="IsFillComplete_Quarter" classname="PlayersWorlds.Maps.Maze.MazeGeneratorTest" runstate="Runnable" seed="518875086" result="Passed" start-time="2024-02-20T15:16:52.9466470Z" end-time="2024-02-20T15:16:52.9478550Z" duration="0.001208" asserts="1">
                <output><![CDATA[AldousBroderMazeGenerator: Generating maze 10x10 with PlayersWorlds.Maps.Maze.GeneratorOptions(Quarter, None, <null>, PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.AldousBroderMazeGenerator)
                ┌───────────────────────┐
                │ 2   3   4   5   6     │
                │   ┌───┬───────╴   ╷   │
                │ 1 │   │     8   7 │   │
            ┌───┤   │   └───╴   ╷   └───┤
            │ f │ 0 │ b   a   9 │       │
            │   └───┘   ┌───────┤   ┌───┘
            │ e   d   c │       │   │    
            └───────┐   │       │   │    
                    │   │       │   │    
                    └───┘       └───┘    
                                         
                                         
                                         
                                         
                                         
                                         
                                         
                                         
                                         
                                         

]]></output>
              </test-case>
              <test-case id="1-1374" name="IsFillComplete_ThreeQuarters" fullname="PlayersWorlds.Maps.Maze.MazeGeneratorTest.IsFillComplete_ThreeQuarters" methodname="IsFillComplete_ThreeQuarters" classname="PlayersWorlds.Maps.Maze.MazeGeneratorTest" runstate="Runnable" seed="1274318572" result="Passed" start-time="2024-02-20T15:16:52.9478690Z" end-time="2024-02-20T15:16:52.9497460Z" duration="0.001877" asserts="1">
                <output><![CDATA[AldousBroderMazeGenerator: Generating maze 10x10 with PlayersWorlds.Maps.Maze.GeneratorOptions(ThreeQuarters, None, <null>, PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.AldousBroderMazeGenerator)
    ┌───────┐                            
    │ 24  25│                            
┌───┤   ╶───┴───┐           ┌───────┐    
│   │ 23  22  21│           │       │    
│   │   ╶───┐   └───────┐   └───┐   │    
│   │       │ 20        │       │   │    
│   ├───────┘   ┌───────┘       │   │    
│   │ 1d  1e  1f│               │   │    
│   ╵   ╷   ┌───┘               │   ├───┐
│     1c│   │                   │   │   │
├───┐   └───┼───────┬───┬───────┤   │   │
│   │ 1b    │ 13  12│   │       │   │   │
│   │   ┌───┘   ╷   ╵   ╵   ╶───┘   ╵   │
│   │ 1a│ 15  14│ 11  10  f   e   d   c │
│   ╵   │   ┌───┼───────┬───────────┐   │
│     19│ 16│   │       │           │ b │
├───╴   ╵   │   └───╴   ├───┬───┐   ╵   │
│     18  17│ 2   3     │   │   │ 9   a │
│   ╶───┬───┘   ╷   ╶───┘   ╵   ╵   ╷   │
│       │ 0   1 │ 4   5   6   7   8 │   │
└───────┴───────┴───────────────────┴───┘

]]></output>
              </test-case>
              <test-case id="1-1370" name="OnlyFullGenerators" fullname="PlayersWorlds.Maps.Maze.MazeGeneratorTest.OnlyFullGenerators" methodname="OnlyFullGenerators" classname="PlayersWorlds.Maps.Maze.MazeGeneratorTest" runstate="Runnable" seed="1171641257" result="Passed" start-time="2024-02-20T15:16:52.9497640Z" end-time="2024-02-20T15:16:52.9504080Z" duration="0.000644" asserts="2">
                <output><![CDATA[BinaryTreeMazeGenerator: Generating maze 10x10 with PlayersWorlds.Maps.Maze.GeneratorOptions(Half, None, <null>, PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.BinaryTreeMazeGenerator)
SidewinderMazeGenerator: Generating maze 10x10 with PlayersWorlds.Maps.Maze.GeneratorOptions(Half, None, <null>, PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.SidewinderMazeGenerator)
]]></output>
              </test-case>
              <test-case id="1-1883" name="WrongGeneratorOptions" fullname="PlayersWorlds.Maps.Maze.MazeGeneratorTest.WrongGeneratorOptions" methodname="WrongGeneratorOptions" classname="PlayersWorlds.Maps.Maze.MazeGeneratorTest" runstate="Runnable" seed="390313634" result="Passed" start-time="2024-02-20T15:16:52.9504160Z" end-time="2024-02-20T15:16:52.9518280Z" duration="0.001412" asserts="4">
                <output><![CDATA[TestGeneratorB: Generating maze 3x4 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, None, <null>, PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.MazeGeneratorTest+TestGeneratorB)
]]></output>
              </test-case>
            </test-suite>
            <test-suite type="TestSuite" id="1-2046" name="PostProcessing" fullname="PlayersWorlds.Maps.Maze.PostProcessing" runstate="Runnable" testcasecount="5" result="Passed" start-time="2024-02-20T15:16:39.7205510Z" end-time="2024-02-20T15:16:52.9563720Z" duration="13.235821" total="5" passed="5" failed="0" warnings="0" inconclusive="0" skipped="0" asserts="18">
              <test-suite type="TestFixture" id="1-1903" name="DeadEndTest" fullname="PlayersWorlds.Maps.Maze.PostProcessing.DeadEndTest" classname="PlayersWorlds.Maps.Maze.PostProcessing.DeadEndTest" runstate="Runnable" testcasecount="1" result="Passed" start-time="2024-02-20T15:16:52.9518640Z" end-time="2024-02-20T15:16:52.9523710Z" duration="0.000507" total="1" passed="1" failed="0" warnings="0" inconclusive="0" skipped="0" asserts="7">
                <test-case id="1-1904" name="DeadEnd_CanFindDeadEnds" fullname="PlayersWorlds.Maps.Maze.PostProcessing.DeadEndTest.DeadEnd_CanFindDeadEnds" methodname="DeadEnd_CanFindDeadEnds" classname="PlayersWorlds.Maps.Maze.PostProcessing.DeadEndTest" runstate="Runnable" seed="791985505" result="Passed" start-time="2024-02-20T15:16:52.9519130Z" end-time="2024-02-20T15:16:52.9523590Z" duration="0.000446" asserts="7" />
              </test-suite>
              <test-suite type="TestFixture" id="1-1905" name="DijkstraDistanceTest" fullname="PlayersWorlds.Maps.Maze.PostProcessing.DijkstraDistanceTest" classname="PlayersWorlds.Maps.Maze.PostProcessing.DijkstraDistanceTest" runstate="Runnable" testcasecount="4" result="Passed" start-time="2024-02-20T15:16:52.9523830Z" end-time="2024-02-20T15:16:52.9563620Z" duration="0.003980" total="4" passed="4" failed="0" warnings="0" inconclusive="0" skipped="0" asserts="11">
                <test-case id="1-1909" name="DijkstraDistance_CanFindLongestTrail" fullname="PlayersWorlds.Maps.Maze.PostProcessing.DijkstraDistanceTest.DijkstraDistance_CanFindLongestTrail" methodname="DijkstraDistance_CanFindLongestTrail" classname="PlayersWorlds.Maps.Maze.PostProcessing.DijkstraDistanceTest" runstate="Runnable" seed="1020042713" result="Passed" start-time="2024-02-20T15:16:52.9524250Z" end-time="2024-02-20T15:16:52.9529300Z" duration="0.000505" asserts="4" />
                <test-case id="1-1907" name="DijkstraDistance_CanSolveAMaze" fullname="PlayersWorlds.Maps.Maze.PostProcessing.DijkstraDistanceTest.DijkstraDistance_CanSolveAMaze" methodname="DijkstraDistance_CanSolveAMaze" classname="PlayersWorlds.Maps.Maze.PostProcessing.DijkstraDistanceTest" runstate="Runnable" seed="264572063" result="Passed" start-time="2024-02-20T15:16:52.9529410Z" end-time="2024-02-20T15:16:52.9533160Z" duration="0.000376" asserts="4" />
                <test-case id="1-1906" name="DijkstraDistance_FindsAllDistances" fullname="PlayersWorlds.Maps.Maze.PostProcessing.DijkstraDistanceTest.DijkstraDistance_FindsAllDistances" methodname="DijkstraDistance_FindsAllDistances" classname="PlayersWorlds.Maps.Maze.PostProcessing.DijkstraDistanceTest" runstate="Runnable" seed="400975168" result="Passed" start-time="2024-02-20T15:16:52.9533260Z" end-time="2024-02-20T15:16:52.9561480Z" duration="0.002823" asserts="2">
                  <output><![CDATA[AldousBroderMazeGenerator: Generating maze 10x10 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, None, <null>, PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.AldousBroderMazeGenerator)
]]></output>
                </test-case>
                <test-case id="1-1908" name="DijkstraDistance_ReturnsEmptyIfNoSolutionFound" fullname="PlayersWorlds.Maps.Maze.PostProcessing.DijkstraDistanceTest.DijkstraDistance_ReturnsEmptyIfNoSolutionFound" methodname="DijkstraDistance_ReturnsEmptyIfNoSolutionFound" classname="PlayersWorlds.Maps.Maze.PostProcessing.DijkstraDistanceTest" runstate="Runnable" seed="1587742596" result="Passed" start-time="2024-02-20T15:16:52.9561620Z" end-time="2024-02-20T15:16:52.9563480Z" duration="0.000186" asserts="1" />
              </test-suite>
            </test-suite>
            <test-suite type="TestFixture" id="1-1898" name="SidewinderMazeGeneratorTest" fullname="PlayersWorlds.Maps.Maze.SidewinderMazeGeneratorTest" classname="PlayersWorlds.Maps.Maze.SidewinderMazeGeneratorTest" runstate="Runnable" testcasecount="2" result="Passed" start-time="2024-02-20T15:16:52.9563870Z" end-time="2024-02-20T15:16:52.9971200Z" duration="0.040733" total="2" passed="2" failed="0" warnings="0" inconclusive="0" skipped="0" asserts="22">
              <test-case id="1-1899" name="ArchShapedAreas" fullname="PlayersWorlds.Maps.Maze.SidewinderMazeGeneratorTest.ArchShapedAreas" methodname="ArchShapedAreas" classname="PlayersWorlds.Maps.Maze.SidewinderMazeGeneratorTest" runstate="Runnable" seed="2095027625" result="Passed" start-time="2024-02-20T15:16:52.9564460Z" end-time="2024-02-20T15:16:52.9602590Z" duration="0.003814" asserts="2">
                <output><![CDATA[SidewinderMazeGenerator: Generating maze 15x15 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x2;S3x13;Hall;, P10x2;S3x13;Hall;, P4x8;S7x3;Hall;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.SidewinderMazeGenerator)
]]></output>
              </test-case>
              <test-case id="1-1900" name="ArchShapedAreasLeftExit" fullname="PlayersWorlds.Maps.Maze.SidewinderMazeGeneratorTest.ArchShapedAreasLeftExit" methodname="ArchShapedAreasLeftExit" classname="PlayersWorlds.Maps.Maze.SidewinderMazeGeneratorTest" runstate="Runnable" seed="1911195647" result="Passed" start-time="2024-02-20T15:16:52.9602700Z" end-time="2024-02-20T15:16:52.9970970Z" duration="0.036827" asserts="20">
                <properties>
                  <property name="Repeat" value="10" />
                </properties>
                <output><![CDATA[SidewinderMazeGenerator: Generating maze 15x15 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x2;S3x13;Hall;, P10x2;S3x13;Hall;, P6x8;S7x3;Hall;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.SidewinderMazeGenerator)
SidewinderMazeGenerator: Generating maze 15x15 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x2;S3x13;Hall;, P10x2;S3x13;Hall;, P6x8;S7x3;Hall;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.SidewinderMazeGenerator)
SidewinderMazeGenerator: Generating maze 15x15 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x2;S3x13;Hall;, P10x2;S3x13;Hall;, P6x8;S7x3;Hall;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.SidewinderMazeGenerator)
SidewinderMazeGenerator: Generating maze 15x15 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x2;S3x13;Hall;, P10x2;S3x13;Hall;, P6x8;S7x3;Hall;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.SidewinderMazeGenerator)
SidewinderMazeGenerator: Generating maze 15x15 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x2;S3x13;Hall;, P10x2;S3x13;Hall;, P6x8;S7x3;Hall;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.SidewinderMazeGenerator)
SidewinderMazeGenerator: Generating maze 15x15 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x2;S3x13;Hall;, P10x2;S3x13;Hall;, P6x8;S7x3;Hall;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.SidewinderMazeGenerator)
SidewinderMazeGenerator: Generating maze 15x15 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x2;S3x13;Hall;, P10x2;S3x13;Hall;, P6x8;S7x3;Hall;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.SidewinderMazeGenerator)
SidewinderMazeGenerator: Generating maze 15x15 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x2;S3x13;Hall;, P10x2;S3x13;Hall;, P6x8;S7x3;Hall;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.SidewinderMazeGenerator)
SidewinderMazeGenerator: Generating maze 15x15 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x2;S3x13;Hall;, P10x2;S3x13;Hall;, P6x8;S7x3;Hall;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.SidewinderMazeGenerator)
SidewinderMazeGenerator: Generating maze 15x15 with PlayersWorlds.Maps.Maze.GeneratorOptions(Full, Manual, List`1<MapArea>(P2x2;S3x13;Hall;, P10x2;S3x13;Hall;, P6x8;S7x3;Hall;), PlayersWorlds.Maps.Areas.RandomAreaGenerator, PlayersWorlds.Maps.Maze.SidewinderMazeGenerator)
]]></output>
              </test-case>
            </test-suite>
            <test-suite type="TestFixture" id="1-1901" name="WilsonsMazeGeneratorTest" fullname="PlayersWorlds.Maps.Maze.WilsonsMazeGeneratorTest" classname="PlayersWorlds.Maps.Maze.WilsonsMazeGeneratorTest" runstate="Runnable" testcasecount="1" result="Passed" start-time="2024-02-20T15:16:52.9971410Z" end-time="2024-02-20T15:16:53.0113690Z" duration="0.014229" total="1" passed="1" failed="0" warnings="0" inconclusive="0" skipped="0" asserts="1">
              <test-case id="1-1902" name="DuplicateRandom" fullname="PlayersWorlds.Maps.Maze.WilsonsMazeGeneratorTest.DuplicateRandom" methodname="DuplicateRandom" classname="PlayersWorlds.Maps.Maze.WilsonsMazeGeneratorTest" runstate="Runnable" seed="2034607478" result="Passed" start-time="2024-02-20T15:16:52.9972210Z" end-time="2024-02-20T15:16:53.0113530Z" duration="0.014132" asserts="1" />
            </test-suite>
          </test-suite>
          <test-suite type="TestFixture" id="1-1056" name="Maze2DRendererTest" fullname="PlayersWorlds.Maps.Maze2DRendererTest" classname="PlayersWorlds.Maps.Maze2DRendererTest" runstate="Runnable" testcasecount="8" result="Passed" start-time="2024-02-20T15:16:53.0113930Z" end-time="2024-02-20T15:16:53.0249130Z" duration="0.013520" total="8" passed="8" failed="0" warnings="0" inconclusive="0" skipped="0" asserts="57">
            <test-case id="1-1059" name="CanRenderAMapWithFilledAreas" fullname="PlayersWorlds.Maps.Maze2DRendererTest.CanRenderAMapWithFilledAreas" methodname="CanRenderAMapWithFilledAreas" classname="PlayersWorlds.Maps.Maze2DRendererTest" runstate="Runnable" seed="2034223084" result="Passed" start-time="2024-02-20T15:16:53.0114410Z" end-time="2024-02-20T15:16:53.0135410Z" duration="0.002100" asserts="1">
              <output><![CDATA[0▓▓▓▓▓▓▓▓▓▓▓▓▓▓00000
0▓░░░░░░░░░░░░▓00000
0▓░░▒▓▓▓▓▓▒░░░▓▓0000
0▓░░▓▓000▓▓░░░▒▓▓▓▓0
0▓░░▓00000▓░░░░░░░▓0
0▓░░▓00000▓▓▓▓▓▓▓▓▓0
0▓░░▓0000000000▓░░▓0
0▓░░▓0000000000▓░░▓0
0▓░░▓▓00000000▓▓░░▓0
0▓░░▒▓▓▓▓▓▓▓▓▓▓▒░░▓0
0▓░░░░░░░░░░░░░░░░▓0
0▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓0

0▓▓▓▓▓▓▓▓▓▓▓▓▓▓00000
0▓░░░░░░░░░░░░▓00000
0▓░░▒▓▓▓▓▓▒░░░▓▓0000
0▓░░▓▓000▓▓░░░▒▓▓▓▓0
0▓░░▓00000▓░░░░░░░▓0
0▓░░▓00000▓▓▓▓▓▓▓▓▓0
0▓░░▓0000000000▓░░▓0
0▓░░▓0000000000▓░░▓0
0▓░░▓▓00000000▓▓░░▓0
0▓░░▒▓▓▓▓▓▓▓▓▓▓▒░░▓0
0▓░░░░░░░░░░░░░░░░▓0
0▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓0

]]></output>
            </test-case>
            <test-case id="1-1060" name="CanRenderAMapWithHallAreas" fullname="PlayersWorlds.Maps.Maze2DRendererTest.CanRenderAMapWithHallAreas" methodname="CanRenderAMapWithHallAreas" classname="PlayersWorlds.Maps.Maze2DRendererTest" runstate="Runnable" seed="921977368" result="Passed" start-time="2024-02-20T15:16:53.0135580Z" end-time="2024-02-20T15:16:53.0149390Z" duration="0.001381" asserts="1">
              <output><![CDATA[0▓▓▓▓▓▓▓▓▓▓▓▓▓▓00000
0▓░░░░░░░░░░░░▓00000
0▓░░▒▓▓▓▓▓▒░░░▓▓0000
0▓░░▓▓▓▓▓▓▓░░░▒▓▓▓▓0
0▓░░▓▓▓▓▓▓▓░░░░░░░▓0
0▓░░▒▓▓▓▓▓▓▓▓▓▓▓▓▓▓0
0▓░░░░░░░░░░░░░░░░▓0
0▓░░░░░░░░░░░░░░░░▓0
0▓░░░░░░░░░░░░░░░░▓0
0▓░░░░░░░░░░░░░░░░▓0
0▓░░░░░░░░░░░░░░░░▓0
0▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓0

0▓▓▓▓▓▓▓▓▓▓▓▓▓▓00000
0▓░░░░░░░░░░░░▓00000
0▓░░▒▓▓▓▓▓▒░░░▓▓0000
0▓░░▓▓▓▓▓▓▓░░░▒▓▓▓▓0
0▓░░▓▓▓▓▓▓▓░░░░░░░▓0
0▓░░▒▓▓▓▓▓▓▓▓▓▓▓▓▓▓0
0▓░░░░░░░░░░░░░░░░▓0
0▓░░░░░░░░░░░░░░░░▓0
0▓░░░░░░░░░░░░░░░░▓0
0▓░░░░░░░░░░░░░░░░▓0
0▓░░░░░░░░░░░░░░░░▓0
0▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓0

]]></output>
            </test-case>
            <test-case id="1-1057" name="CanRenderAMapWithSmoothCorners" fullname="PlayersWorlds.Maps.Maze2DRendererTest.CanRenderAMapWithSmoothCorners" methodname="CanRenderAMapWithSmoothCorners" classname="PlayersWorlds.Maps.Maze2DRendererTest" runstate="Runnable" seed="1558045470" result="Passed" start-time="2024-02-20T15:16:53.0149500Z" end-time="2024-02-20T15:16:53.0161480Z" duration="0.001199" asserts="1">
              <output><![CDATA[0000000000000
▓▓▓▓▓▓▓▓▓0000
▓░░░░░░░▓▓000
▓░▒▓▓▓▒░▒▓▓▓▓
▓░▓▓▓▓▓░░░░░▓
▓░▓▓▓▓▓░░░░░▓
▓░▓▓▓▓▓▓▓▓▓▓▓
▓░▒▓▓▓▓▓▓▓▓▓▓
▓░░░░░▓▓▓▓░░▓
▓░░░░░▒▓▓▒░░▓
▓░░░░░░░░░░░▓
▓░░░░░░░░░░░▓
▓▓▓▓▓▓▓▓▓▓▓▓▓
0000000000000

0000000000000
▓▓▓▓▓▓▓▓▓0000
▓░░░░░░░▓▓000
▓░▒▓▓▓▒░▒▓▓▓▓
▓░▓▓▓▓▓░░░░░▓
▓░▓▓▓▓▓░░░░░▓
▓░▓▓▓▓▓▓▓▓▓▓▓
▓░▒▓▓▓▓▓▓▓▓▓▓
▓░░░░░▓▓▓▓░░▓
▓░░░░░▒▓▓▒░░▓
▓░░░░░░░░░░░▓
▓░░░░░░░░░░░▓
▓▓▓▓▓▓▓▓▓▓▓▓▓
0000000000000

]]></output>
            </test-case>
            <test-case id="1-1058" name="CanRenderAMapWithVoids" fullname="PlayersWorlds.Maps.Maze2DRendererTest.CanRenderAMapWithVoids" methodname="CanRenderAMapWithVoids" classname="PlayersWorlds.Maps.Maze2DRendererTest" runstate="Runnable" seed="1812426141" result="Passed" start-time="2024-02-20T15:16:53.0161590Z" end-time="2024-02-20T15:16:53.0178250Z" duration="0.001666" asserts="1">
              <output><![CDATA[0▓▓▓▓▓▓▓▓▓▓▓▓▓▓00000
0▓░░░░░░░░░░░░▓00000
0▓░░▒▓▓▓▓▓▒░░░▓▓0000
0▓░░▓▓▓▓▓▓▓░░░▒▓▓▓▓0
0▓░░▓▓▓▓▓▓▓░░░░░░░▓0
0▓░░▒▓▓▓▓▓▓▓▓▓▓▓▓▓▓0
0▓░░░░░░░▓00000▓░░▓0
0▓░░░░░░░▓00000▓░░▓0
0▓░░░░░░░▓▓000▓▓░░▓0
0▓░░░░░░░▒▓▓▓▓▓▒░░▓0
0▓░░░░░░░░░░░░░░░░▓0
0▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓0

0▓▓▓▓▓▓▓▓▓▓▓▓▓▓00000
0▓░░░░░░░░░░░░▓00000
0▓░░▒▓▓▓▓▓▒░░░▓▓0000
0▓░░▓▓▓▓▓▓▓░░░▒▓▓▓▓0
0▓░░▓▓▓▓▓▓▓░░░░░░░▓0
0▓░░▒▓▓▓▓▓▓▓▓▓▓▓▓▓▓0
0▓░░░░░░░▓00000▓░░▓0
0▓░░░░░░░▓00000▓░░▓0
0▓░░░░░░░▓▓000▓▓░░▓0
0▓░░░░░░░▒▓▓▓▓▓▒░░▓0
0▓░░░░░░░░░░░░░░░░▓0
0▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓0

]]></output>
            </test-case>
            <test-case id="1-1064" name="CellsMapping_ValidMapping" fullname="PlayersWorlds.Maps.Maze2DRendererTest.CellsMapping_ValidMapping" methodname="CellsMapping_ValidMapping" classname="PlayersWorlds.Maps.Maze2DRendererTest" runstate="Runnable" seed="559451975" result="Passed" start-time="2024-02-20T15:16:53.0178350Z" end-time="2024-02-20T15:16:53.0237650Z" duration="0.005931" asserts="45" />
            <test-case id="1-1061" name="Maze2DStringBoxRenderer_CanConvertToAscii" fullname="PlayersWorlds.Maps.Maze2DRendererTest.Maze2DStringBoxRenderer_CanConvertToAscii" methodname="Maze2DStringBoxRenderer_CanConvertToAscii" classname="PlayersWorlds.Maps.Maze2DRendererTest" runstate="Runnable" seed="1579331857" result="Passed" start-time="2024-02-20T15:16:53.0237780Z" end-time="2024-02-20T15:16:53.0240160Z" duration="0.000238" asserts="1">
              <output><![CDATA[┌───────────┐    
│           │    
│   ┌───┐   └───┐
│   │   │       │
│   └───┼───┬───┤
│       │   │   │
│   ┼   └───┘   │
│               │
└───────────────┘

]]></output>
            </test-case>
            <test-case id="1-1062" name="Maze2DStringBoxRenderer_CanConvertToAsciiWithData" fullname="PlayersWorlds.Maps.Maze2DRendererTest.Maze2DStringBoxRenderer_CanConvertToAsciiWithData" methodname="Maze2DStringBoxRenderer_CanConvertToAsciiWithData" classname="PlayersWorlds.Maps.Maze2DRendererTest" runstate="Runnable" seed="1743386358" result="Passed" start-time="2024-02-20T15:16:53.0240230Z" end-time="2024-02-20T15:16:53.0243610Z" duration="0.000339" asserts="1">
              <output><![CDATA[┌───────────┐    
│ 4   3   2 │    
│   ┌───┐   └───┐
│ 5 │   │ 1   0 │
│   └───┼───┬───┤
│ 6     │   │ b │
│   ┼   └───┘   │
│ 7   8   9   a │
└───────────────┘

]]></output>
            </test-case>
            <test-case id="1-1063" name="Maze2DToMap2DConverter_ThrowsIfInvalidOptions" fullname="PlayersWorlds.Maps.Maze2DRendererTest.Maze2DToMap2DConverter_ThrowsIfInvalidOptions" methodname="Maze2DToMap2DConverter_ThrowsIfInvalidOptions" classname="PlayersWorlds.Maps.Maze2DRendererTest" runstate="Runnable" seed="1253198567" result="Passed" start-time="2024-02-20T15:16:53.0243690Z" end-time="2024-02-20T15:16:53.0249010Z" duration="0.000532" asserts="6" />
          </test-suite>
          <test-suite type="TestFixture" id="1-1023" name="NArrayTest" fullname="PlayersWorlds.Maps.NArrayTest" classname="PlayersWorlds.Maps.NArrayTest" runstate="Runnable" testcasecount="24" result="Passed" start-time="2024-02-20T15:16:53.0249280Z" end-time="2024-02-20T15:16:53.0391290Z" duration="0.014201" total="24" passed="24" failed="0" warnings="0" inconclusive="0" skipped="0" asserts="83">
            <test-case id="1-1043" name="CellsAt_AnyCellAt2x2" fullname="PlayersWorlds.Maps.NArrayTest.CellsAt_AnyCellAt2x2" methodname="CellsAt_AnyCellAt2x2" classname="PlayersWorlds.Maps.NArrayTest" runstate="Runnable" seed="2142577677" result="Passed" start-time="2024-02-20T15:16:53.0249740Z" end-time="2024-02-20T15:16:53.0260780Z" duration="0.001104" asserts="5" />
            <test-case id="1-1046" name="CellsAt_AnyCellAtCloseEdge2x2" fullname="PlayersWorlds.Maps.NArrayTest.CellsAt_AnyCellAtCloseEdge2x2" methodname="CellsAt_AnyCellAtCloseEdge2x2" classname="PlayersWorlds.Maps.NArrayTest" runstate="Runnable" seed="1142476921" result="Passed" start-time="2024-02-20T15:16:53.0260870Z" end-time="2024-02-20T15:16:53.0264440Z" duration="0.000358" asserts="5" />
            <test-case id="1-1047" name="CellsAt_AnyCellAtZeroSize" fullname="PlayersWorlds.Maps.NArrayTest.CellsAt_AnyCellAtZeroSize" methodname="CellsAt_AnyCellAtZeroSize" classname="PlayersWorlds.Maps.NArrayTest" runstate="Runnable" seed="1723401985" result="Passed" start-time="2024-02-20T15:16:53.0264520Z" end-time="2024-02-20T15:16:53.0271790Z" duration="0.000727" asserts="1" />
            <test-case id="1-1024" name="NArray_Constructor_CreatesCorrectSize" fullname="PlayersWorlds.Maps.NArrayTest.NArray_Constructor_CreatesCorrectSize" methodname="NArray_Constructor_CreatesCorrectSize" classname="PlayersWorlds.Maps.NArrayTest" runstate="Runnable" seed="935199207" result="Passed" start-time="2024-02-20T15:16:53.0271870Z" end-time="2024-02-20T15:16:53.0275520Z" duration="0.000365" asserts="2" />
            <test-case id="1-1025" name="NArray_Constructor_SetsInitialValues" fullname="PlayersWorlds.Maps.NArrayTest.NArray_Constructor_SetsInitialValues" methodname="NArray_Constructor_SetsInitialValues" classname="PlayersWorlds.Maps.NArrayTest" runstate="Runnable" seed="934610444" result="Passed" start-time="2024-02-20T15:16:53.0275610Z" end-time="2024-02-20T15:16:53.0283810Z" duration="0.000819" asserts="4" />
            <test-case id="1-1026" name="NArray_Constructor_ThrowsOnInvalidSize" fullname="PlayersWorlds.Maps.NArrayTest.NArray_Constructor_ThrowsOnInvalidSize" methodname="NArray_Constructor_ThrowsOnInvalidSize" classname="PlayersWorlds.Maps.NArrayTest" runstate="Runnable" seed="1140678488" result="Passed" start-time="2024-02-20T15:16:53.0283890Z" end-time="2024-02-20T15:16:53.0286000Z" duration="0.000211" asserts="1" />
            <test-case id="1-1027" name="NArray_Indexing_GetValuesCorrectly" fullname="PlayersWorlds.Maps.NArrayTest.NArray_Indexing_GetValuesCorrectly" methodname="NArray_Indexing_GetValuesCorrectly" classname="PlayersWorlds.Maps.NArrayTest" runstate="Runnable" seed="32316759" result="Passed" start-time="2024-02-20T15:16:53.0286070Z" end-time="2024-02-20T15:16:53.0288360Z" duration="0.000229" asserts="1" />
            <test-case id="1-1029" name="NArray_Indexing_SetsValuesCorrectly" fullname="PlayersWorlds.Maps.NArrayTest.NArray_Indexing_SetsValuesCorrectly" methodname="NArray_Indexing_SetsValuesCorrectly" classname="PlayersWorlds.Maps.NArrayTest" runstate="Runnable" seed="1565421380" result="Passed" start-time="2024-02-20T15:16:53.0288440Z" end-time="2024-02-20T15:16:53.0289850Z" duration="0.000141" asserts="1" />
            <test-case id="1-1028" name="NArray_Indexing_ThrowsOnOutOfBounds" fullname="PlayersWorlds.Maps.NArrayTest.NArray_Indexing_ThrowsOnOutOfBounds" methodname="NArray_Indexing_ThrowsOnOutOfBounds" classname="PlayersWorlds.Maps.NArrayTest" runstate="Runnable" seed="564955255" result="Passed" start-time="2024-02-20T15:16:53.0289920Z" end-time="2024-02-20T15:16:53.0296750Z" duration="0.000683" asserts="4" />
            <test-case id="1-1040" name="NArray_Iterate_FourCellsFar" fullname="PlayersWorlds.Maps.NArrayTest.NArray_Iterate_FourCellsFar" methodname="NArray_Iterate_FourCellsFar" classname="PlayersWorlds.Maps.NArrayTest" runstate="Runnable" seed="1128910426" result="Passed" start-time="2024-02-20T15:16:53.0296830Z" end-time="2024-02-20T15:16:53.0311600Z" duration="0.001477" asserts="5" />
            <test-case id="1-1037" name="NArray_Iterate_OneCell" fullname="PlayersWorlds.Maps.NArrayTest.NArray_Iterate_OneCell" methodname="NArray_Iterate_OneCell" classname="PlayersWorlds.Maps.NArrayTest" runstate="Runnable" seed="545706550" result="Passed" start-time="2024-02-20T15:16:53.0311680Z" end-time="2024-02-20T15:16:53.0314620Z" duration="0.000294" asserts="2" />
            <test-case id="1-1041" name="NArray_Iterate_OutOfBounds" fullname="PlayersWorlds.Maps.NArrayTest.NArray_Iterate_OutOfBounds" methodname="NArray_Iterate_OutOfBounds" classname="PlayersWorlds.Maps.NArrayTest" runstate="Runnable" seed="162426603" result="Passed" start-time="2024-02-20T15:16:53.0314700Z" end-time="2024-02-20T15:16:53.0318710Z" duration="0.000401" asserts="4" />
            <test-case id="1-1030" name="NArray_Iterate_TraversesAllCells" fullname="PlayersWorlds.Maps.NArrayTest.NArray_Iterate_TraversesAllCells" methodname="NArray_Iterate_TraversesAllCells" classname="PlayersWorlds.Maps.NArrayTest" runstate="Runnable" seed="266301324" result="Passed" start-time="2024-02-20T15:16:53.0318780Z" end-time="2024-02-20T15:16:53.0323820Z" duration="0.000504" asserts="13" />
            <test-case id="1-1039" name="NArray_Iterate_TreeByTwo" fullname="PlayersWorlds.Maps.NArrayTest.NArray_Iterate_TreeByTwo" methodname="NArray_Iterate_TreeByTwo" classname="PlayersWorlds.Maps.NArrayTest" runstate="Runnable" seed="443940027" result="Passed" start-time="2024-02-20T15:16:53.0323900Z" end-time="2024-02-20T15:16:53.0328490Z" duration="0.000459" asserts="7" />
            <test-case id="1-1038" name="NArray_Iterate_TwoCells" fullname="PlayersWorlds.Maps.NArrayTest.NArray_Iterate_TwoCells" methodname="NArray_Iterate_TwoCells" classname="PlayersWorlds.Maps.NArrayTest" runstate="Runnable" seed="372230830" result="Passed" start-time="2024-02-20T15:16:53.0328560Z" end-time="2024-02-20T15:16:53.0333820Z" duration="0.000526" asserts="3" />
            <test-case id="1-1035" name="NArray_IterateAdjacentCells_ReturnsCorrectNeighbors" fullname="PlayersWorlds.Maps.NArrayTest.NArray_IterateAdjacentCells_ReturnsCorrectNeighbors" methodname="NArray_IterateAdjacentCells_ReturnsCorrectNeighbors" classname="PlayersWorlds.Maps.NArrayTest" runstate="Runnable" seed="1853402958" result="Passed" start-time="2024-02-20T15:16:53.0333900Z" end-time="2024-02-20T15:16:53.0351180Z" duration="0.001728" asserts="6" />
            <test-case id="1-1036" name="NArray_IterateAdjacentCells_ReturnsCorrectNeighborsIn4DSpace" fullname="PlayersWorlds.Maps.NArrayTest.NArray_IterateAdjacentCells_ReturnsCorrectNeighborsIn4DSpace" methodname="NArray_IterateAdjacentCells_ReturnsCorrectNeighborsIn4DSpace" classname="PlayersWorlds.Maps.NArrayTest" runstate="Runnable" seed="1774058858" result="Passed" start-time="2024-02-20T15:16:53.0351260Z" end-time="2024-02-20T15:16:53.0356510Z" duration="0.000525" asserts="6" />
            <test-case id="1-1044" name="NArray_IterateIntersection_AnyCellAtEdge1x1" fullname="PlayersWorlds.Maps.NArrayTest.NArray_IterateIntersection_AnyCellAtEdge1x1" methodname="NArray_IterateIntersection_AnyCellAtEdge1x1" classname="PlayersWorlds.Maps.NArrayTest" runstate="Runnable" seed="769360917" result="Passed" start-time="2024-02-20T15:16:53.0356600Z" end-time="2024-02-20T15:16:53.0358750Z" duration="0.000216" asserts="2" />
            <test-case id="1-1045" name="NArray_IterateIntersection_AnyCellAtFarEdge2x2" fullname="PlayersWorlds.Maps.NArrayTest.NArray_IterateIntersection_AnyCellAtFarEdge2x2" methodname="NArray_IterateIntersection_AnyCellAtFarEdge2x2" classname="PlayersWorlds.Maps.NArrayTest" runstate="Runnable" seed="1420452484" result="Passed" start-time="2024-02-20T15:16:53.0358820Z" end-time="2024-02-20T15:16:53.0360880Z" duration="0.000205" asserts="2" />
            <test-case id="1-1042" name="NArray_IterateIntersection_AnyCellAtP1x1" fullname="PlayersWorlds.Maps.NArrayTest.NArray_IterateIntersection_AnyCellAtP1x1" methodname="NArray_IterateIntersection_AnyCellAtP1x1" classname="PlayersWorlds.Maps.NArrayTest" runstate="Runnable" seed="2018545916" result="Passed" start-time="2024-02-20T15:16:53.0360950Z" end-time="2024-02-20T15:16:53.0363120Z" duration="0.000218" asserts="2" />
            <test-case id="1-1034" name="NArray_IterateIntersection_HandlesOverlap" fullname="PlayersWorlds.Maps.NArrayTest.NArray_IterateIntersection_HandlesOverlap" methodname="NArray_IterateIntersection_HandlesOverlap" classname="PlayersWorlds.Maps.NArrayTest" runstate="Runnable" seed="1848969947" result="Passed" start-time="2024-02-20T15:16:53.0363200Z" end-time="2024-02-20T15:16:53.0372980Z" duration="0.000978" asserts="1" />
            <test-case id="1-1033" name="NArray_IterateRegion_HandlesDimensionsMismatch" fullname="PlayersWorlds.Maps.NArrayTest.NArray_IterateRegion_HandlesDimensionsMismatch" methodname="NArray_IterateRegion_HandlesDimensionsMismatch" classname="PlayersWorlds.Maps.NArrayTest" runstate="Runnable" seed="1950777733" result="Passed" start-time="2024-02-20T15:16:53.0373080Z" end-time="2024-02-20T15:16:53.0384100Z" duration="0.001103" asserts="3" />
            <test-case id="1-1032" name="NArray_IterateRegion_HandlesOutOfBounds" fullname="PlayersWorlds.Maps.NArrayTest.NArray_IterateRegion_HandlesOutOfBounds" methodname="NArray_IterateRegion_HandlesOutOfBounds" classname="PlayersWorlds.Maps.NArrayTest" runstate="Runnable" seed="1543256168" result="Passed" start-time="2024-02-20T15:16:53.0384190Z" end-time="2024-02-20T15:16:53.0388720Z" duration="0.000453" asserts="2" />
            <test-case id="1-1031" name="NArray_IterateRegion_ReturnsCorrectCells" fullname="PlayersWorlds.Maps.NArrayTest.NArray_IterateRegion_ReturnsCorrectCells" methodname="NArray_IterateRegion_ReturnsCorrectCells" classname="PlayersWorlds.Maps.NArrayTest" runstate="Runnable" seed="1128045086" result="Passed" start-time="2024-02-20T15:16:53.0388800Z" end-time="2024-02-20T15:16:53.0391130Z" duration="0.000234" asserts="1" />
          </test-suite>
          <test-suite type="TestFixture" id="1-1048" name="OptionalTest" fullname="PlayersWorlds.Maps.OptionalTest" classname="PlayersWorlds.Maps.OptionalTest" runstate="Runnable" testcasecount="7" result="Passed" start-time="2024-02-20T15:16:53.0391480Z" end-time="2024-02-20T15:16:53.0413080Z" duration="0.002161" total="7" passed="7" failed="0" warnings="0" inconclusive="0" skipped="0" asserts="25">
            <test-case id="1-1054" name="Optional_CanBeCastToT" fullname="PlayersWorlds.Maps.OptionalTest.Optional_CanBeCastToT" methodname="Optional_CanBeCastToT" classname="PlayersWorlds.Maps.OptionalTest" runstate="Runnable" seed="530688816" result="Passed" start-time="2024-02-20T15:16:53.0391970Z" end-time="2024-02-20T15:16:53.0398170Z" duration="0.000620" asserts="1" />
            <test-case id="1-1049" name="Optional_Equality" fullname="PlayersWorlds.Maps.OptionalTest.Optional_Equality" methodname="Optional_Equality" classname="PlayersWorlds.Maps.OptionalTest" runstate="Runnable" seed="99671068" result="Passed" start-time="2024-02-20T15:16:53.0398250Z" end-time="2024-02-20T15:16:53.0400240Z" duration="0.000199" asserts="3" />
            <test-case id="1-1051" name="Optional_Equals" fullname="PlayersWorlds.Maps.OptionalTest.Optional_Equals" methodname="Optional_Equals" classname="PlayersWorlds.Maps.OptionalTest" runstate="Runnable" seed="1155507464" result="Passed" start-time="2024-02-20T15:16:53.0400310Z" end-time="2024-02-20T15:16:53.0403260Z" duration="0.000295" asserts="5" />
            <test-case id="1-1053" name="Optional_GetHashCode" fullname="PlayersWorlds.Maps.OptionalTest.Optional_GetHashCode" methodname="Optional_GetHashCode" classname="PlayersWorlds.Maps.OptionalTest" runstate="Runnable" seed="204388993" result="Passed" start-time="2024-02-20T15:16:53.0403340Z" end-time="2024-02-20T15:16:53.0405470Z" duration="0.000213" asserts="3" />
            <test-case id="1-1052" name="Optional_Null" fullname="PlayersWorlds.Maps.OptionalTest.Optional_Null" methodname="Optional_Null" classname="PlayersWorlds.Maps.OptionalTest" runstate="Runnable" seed="1380739248" result="Passed" start-time="2024-02-20T15:16:53.0405540Z" end-time="2024-02-20T15:16:53.0409670Z" duration="0.000413" asserts="9" />
            <test-case id="1-1050" name="Optional_ThrowsIfNoValue" fullname="PlayersWorlds.Maps.OptionalTest.Optional_ThrowsIfNoValue" methodname="Optional_ThrowsIfNoValue" classname="PlayersWorlds.Maps.OptionalTest" runstate="Runnable" seed="1589361773" result="Passed" start-time="2024-02-20T15:16:53.0409750Z" end-time="2024-02-20T15:16:53.0411300Z" duration="0.000155" asserts="2" />
            <test-case id="1-1055" name="Optional_ToStringShowsValue" fullname="PlayersWorlds.Maps.OptionalTest.Optional_ToStringShowsValue" methodname="Optional_ToStringShowsValue" classname="PlayersWorlds.Maps.OptionalTest" runstate="Runnable" seed="2023161628" result="Passed" start-time="2024-02-20T15:16:53.0411370Z" end-time="2024-02-20T15:16:53.0412960Z" duration="0.000160" asserts="2" />
          </test-suite>
          <test-suite type="TestSuite" id="1-2044" name="Renderers" fullname="PlayersWorlds.Maps.Renderers" runstate="Runnable" testcasecount="1" result="Passed" start-time="2024-02-20T15:16:39.7205600Z" end-time="2024-02-20T15:16:53.0420970Z" duration="13.321537" total="1" passed="1" failed="0" warnings="0" inconclusive="0" skipped="0" asserts="1">
            <test-suite type="TestFixture" id="1-1107" name="Map2DStringRendererTest" fullname="PlayersWorlds.Maps.Renderers.Map2DStringRendererTest" classname="PlayersWorlds.Maps.Renderers.Map2DStringRendererTest" runstate="Runnable" testcasecount="1" result="Passed" start-time="2024-02-20T15:16:53.0413270Z" end-time="2024-02-20T15:16:53.0420910Z" duration="0.000763" total="1" passed="1" failed="0" warnings="0" inconclusive="0" skipped="0" asserts="1">
              <test-case id="1-1108" name="TestRender" fullname="PlayersWorlds.Maps.Renderers.Map2DStringRendererTest.TestRender" methodname="TestRender" classname="PlayersWorlds.Maps.Renderers.Map2DStringRendererTest" runstate="Runnable" seed="1681608776" result="Passed" start-time="2024-02-20T15:16:53.0413740Z" end-time="2024-02-20T15:16:53.0420790Z" duration="0.000705" asserts="1">
                <output><![CDATA[▓▓▓▓▓
▓░░░▓
▓░▒░▓
▓░░░▓
▓▓▓▓▓

]]></output>
              </test-case>
            </test-suite>
          </test-suite>
          <test-suite type="TestFixture" id="1-1065" name="VectorDTest" fullname="PlayersWorlds.Maps.VectorDTest" classname="PlayersWorlds.Maps.VectorDTest" runstate="Runnable" testcasecount="11" result="Passed" start-time="2024-02-20T15:16:53.0421100Z" end-time="2024-02-20T15:16:53.0459830Z" duration="0.003873" total="11" passed="11" failed="0" warnings="0" inconclusive="0" skipped="0" asserts="33">
            <test-case id="1-1073" name="CanAddAndSubtract" fullname="PlayersWorlds.Maps.VectorDTest.CanAddAndSubtract" methodname="CanAddAndSubtract" classname="PlayersWorlds.Maps.VectorDTest" runstate="Runnable" seed="305794835" result="Passed" start-time="2024-02-20T15:16:53.0421540Z" end-time="2024-02-20T15:16:53.0426060Z" duration="0.000453" asserts="5" />
            <test-case id="1-1074" name="ConstructorChecksArguments" fullname="PlayersWorlds.Maps.VectorDTest.ConstructorChecksArguments" methodname="ConstructorChecksArguments" classname="PlayersWorlds.Maps.VectorDTest" runstate="Runnable" seed="556008839" result="Passed" start-time="2024-02-20T15:16:53.0426150Z" end-time="2024-02-20T15:16:53.0427290Z" duration="0.000114" asserts="1" />
            <test-case id="1-1067" name="EqualityIsCheckedByValue" fullname="PlayersWorlds.Maps.VectorDTest.EqualityIsCheckedByValue" methodname="EqualityIsCheckedByValue" classname="PlayersWorlds.Maps.VectorDTest" runstate="Runnable" seed="1832155308" result="Passed" start-time="2024-02-20T15:16:53.0427360Z" end-time="2024-02-20T15:16:53.0429420Z" duration="0.000206" asserts="4" />
            <test-case id="1-1068" name="GetHashCodeIsDerivedFromValue" fullname="PlayersWorlds.Maps.VectorDTest.GetHashCodeIsDerivedFromValue" methodname="GetHashCodeIsDerivedFromValue" classname="PlayersWorlds.Maps.VectorDTest" runstate="Runnable" seed="414173800" result="Passed" start-time="2024-02-20T15:16:53.0429490Z" end-time="2024-02-20T15:16:53.0431960Z" duration="0.000247" asserts="1" />
            <test-case id="1-1071" name="InitializedAsNull" fullname="PlayersWorlds.Maps.VectorDTest.InitializedAsNull" methodname="InitializedAsNull" classname="PlayersWorlds.Maps.VectorDTest" runstate="Runnable" seed="1226268822" result="Passed" start-time="2024-02-20T15:16:53.0432040Z" end-time="2024-02-20T15:16:53.0433010Z" duration="0.000098" asserts="1" />
            <test-case id="1-1070" name="InitializedEmpty" fullname="PlayersWorlds.Maps.VectorDTest.InitializedEmpty" methodname="InitializedEmpty" classname="PlayersWorlds.Maps.VectorDTest" runstate="Runnable" seed="341282901" result="Passed" start-time="2024-02-20T15:16:53.0433090Z" end-time="2024-02-20T15:16:53.0435570Z" duration="0.000248" asserts="4" />
            <test-case id="1-1066" name="IsInitialized" fullname="PlayersWorlds.Maps.VectorDTest.IsInitialized" methodname="IsInitialized" classname="PlayersWorlds.Maps.VectorDTest" runstate="Runnable" seed="1174825072" result="Passed" start-time="2024-02-20T15:16:53.0435650Z" end-time="2024-02-20T15:16:53.0437080Z" duration="0.000144" asserts="2" />
            <test-case id="1-1072" name="IsZero" fullname="PlayersWorlds.Maps.VectorDTest.IsZero" methodname="IsZero" classname="PlayersWorlds.Maps.VectorDTest" runstate="Runnable" seed="1024000760" result="Passed" start-time="2024-02-20T15:16:53.0437150Z" end-time="2024-02-20T15:16:53.0439580Z" duration="0.000243" asserts="3" />
            <test-case id="1-1075" name="SnappedForce" fullname="PlayersWorlds.Maps.VectorDTest.SnappedForce" methodname="SnappedForce" classname="PlayersWorlds.Maps.VectorDTest" runstate="Runnable" seed="1887919330" result="Passed" start-time="2024-02-20T15:16:53.0439650Z" end-time="2024-02-20T15:16:53.0444560Z" duration="0.000491" asserts="9" />
            <test-case id="1-1069" name="ToStringFormat" fullname="PlayersWorlds.Maps.VectorDTest.ToStringFormat" methodname="ToStringFormat" classname="PlayersWorlds.Maps.VectorDTest" runstate="Runnable" seed="1532998508" result="Passed" start-time="2024-02-20T15:16:53.0444640Z" end-time="2024-02-20T15:16:53.0455650Z" duration="0.001101" asserts="1" />
            <test-case id="1-1076" name="VectorD_Parse" fullname="PlayersWorlds.Maps.VectorDTest.VectorD_Parse" methodname="VectorD_Parse" classname="PlayersWorlds.Maps.VectorDTest" runstate="Runnable" seed="1873625415" result="Passed" start-time="2024-02-20T15:16:53.0455730Z" end-time="2024-02-20T15:16:53.0459710Z" duration="0.000398" asserts="2" />
          </test-suite>
          <test-suite type="TestFixture" id="1-1077" name="VectorTest" fullname="PlayersWorlds.Maps.VectorTest" classname="PlayersWorlds.Maps.VectorTest" runstate="Runnable" testcasecount="29" result="Passed" start-time="2024-02-20T15:16:53.0459960Z" end-time="2024-02-20T15:16:53.0527960Z" duration="0.006800" total="29" passed="29" failed="0" warnings="0" inconclusive="0" skipped="0" asserts="229">
            <test-case id="1-1094" name="FitsInto" fullname="PlayersWorlds.Maps.VectorTest.FitsInto" methodname="FitsInto" classname="PlayersWorlds.Maps.VectorTest" runstate="Runnable" seed="131087485" result="Passed" start-time="2024-02-20T15:16:53.0460390Z" end-time="2024-02-20T15:16:53.0461690Z" duration="0.000130" asserts="3" />
            <test-case id="1-1097" name="FromIndex_Matches_FromIndex" fullname="PlayersWorlds.Maps.VectorTest.FromIndex_Matches_FromIndex" methodname="FromIndex_Matches_FromIndex" classname="PlayersWorlds.Maps.VectorTest" runstate="Runnable" seed="2120877402" result="Passed" start-time="2024-02-20T15:16:53.0461750Z" end-time="2024-02-20T15:16:53.0462690Z" duration="0.000094" asserts="1" />
            <test-case id="1-1105" name="FromIndex_ShouldThrowException_DimensionMismatch" fullname="PlayersWorlds.Maps.VectorTest.FromIndex_ShouldThrowException_DimensionMismatch" methodname="FromIndex_ShouldThrowException_DimensionMismatch" classname="PlayersWorlds.Maps.VectorTest" runstate="Runnable" seed="472184392" result="Passed" start-time="2024-02-20T15:16:53.0462760Z" end-time="2024-02-20T15:16:53.0466450Z" duration="0.000370" asserts="1" />
            <test-case id="1-1095" name="IsIn" fullname="PlayersWorlds.Maps.VectorTest.IsIn" methodname="IsIn" classname="PlayersWorlds.Maps.VectorTest" runstate="Runnable" seed="506977961" result="Passed" start-time="2024-02-20T15:16:53.0466530Z" end-time="2024-02-20T15:16:53.0469010Z" duration="0.000249" asserts="7" />
            <test-case id="1-1106" name="NorthEastComparer_ComparesCorrectly" fullname="PlayersWorlds.Maps.VectorTest.NorthEastComparer_ComparesCorrectly" methodname="NorthEastComparer_ComparesCorrectly" classname="PlayersWorlds.Maps.VectorTest" runstate="Runnable" seed="855295520" result="Passed" start-time="2024-02-20T15:16:53.0469080Z" end-time="2024-02-20T15:16:53.0477680Z" duration="0.000861" asserts="1" />
            <test-case id="1-1079" name="Size_NotInitialized" fullname="PlayersWorlds.Maps.VectorTest.Size_NotInitialized" methodname="Size_NotInitialized" classname="PlayersWorlds.Maps.VectorTest" runstate="Runnable" seed="1569625462" result="Passed" start-time="2024-02-20T15:16:53.0477770Z" end-time="2024-02-20T15:16:53.0479550Z" duration="0.000178" asserts="2" />
            <test-case id="1-1101" name="ToIndex_FromIndex_RoundTripConversion" fullname="PlayersWorlds.Maps.VectorTest.ToIndex_FromIndex_RoundTripConversion" methodname="ToIndex_FromIndex_RoundTripConversion" classname="PlayersWorlds.Maps.VectorTest" runstate="Runnable" seed="1466723573" result="Passed" start-time="2024-02-20T15:16:53.0479630Z" end-time="2024-02-20T15:16:53.0484710Z" duration="0.000507" asserts="150" />
            <test-case id="1-1102" name="ToIndex_FromIndex_Valid5D" fullname="PlayersWorlds.Maps.VectorTest.ToIndex_FromIndex_Valid5D" methodname="ToIndex_FromIndex_Valid5D" classname="PlayersWorlds.Maps.VectorTest" runstate="Runnable" seed="53259825" result="Passed" start-time="2024-02-20T15:16:53.0484780Z" end-time="2024-02-20T15:16:53.0496320Z" duration="0.001155" asserts="13" />
            <test-case id="1-1096" name="ToIndex_Matches_ToIndex" fullname="PlayersWorlds.Maps.VectorTest.ToIndex_Matches_ToIndex" methodname="ToIndex_Matches_ToIndex" classname="PlayersWorlds.Maps.VectorTest" runstate="Runnable" seed="404143884" result="Passed" start-time="2024-02-20T15:16:53.0496410Z" end-time="2024-02-20T15:16:53.0497410Z" duration="0.000100" asserts="1" />
            <test-case id="1-1098" name="ToIndex_ShouldCalculateCorrectIndex_1D" fullname="PlayersWorlds.Maps.VectorTest.ToIndex_ShouldCalculateCorrectIndex_1D" methodname="ToIndex_ShouldCalculateCorrectIndex_1D" classname="PlayersWorlds.Maps.VectorTest" runstate="Runnable" seed="213742220" result="Passed" start-time="2024-02-20T15:16:53.0497470Z" end-time="2024-02-20T15:16:53.0498370Z" duration="0.000090" asserts="2" />
            <test-case id="1-1099" name="ToIndex_ShouldCalculateCorrectIndex_2D" fullname="PlayersWorlds.Maps.VectorTest.ToIndex_ShouldCalculateCorrectIndex_2D" methodname="ToIndex_ShouldCalculateCorrectIndex_2D" classname="PlayersWorlds.Maps.VectorTest" runstate="Runnable" seed="1581331804" result="Passed" start-time="2024-02-20T15:16:53.0498430Z" end-time="2024-02-20T15:16:53.0499280Z" duration="0.000085" asserts="2" />
            <test-case id="1-1100" name="ToIndex_ShouldCalculateCorrectIndex_3D" fullname="PlayersWorlds.Maps.VectorTest.ToIndex_ShouldCalculateCorrectIndex_3D" methodname="ToIndex_ShouldCalculateCorrectIndex_3D" classname="PlayersWorlds.Maps.VectorTest" runstate="Runnable" seed="351607076" result="Passed" start-time="2024-02-20T15:16:53.0499330Z" end-time="2024-02-20T15:16:53.0500180Z" duration="0.000085" asserts="2" />
            <test-case id="1-1104" name="ToIndex_ShouldThrowException_DimensionMismatch" fullname="PlayersWorlds.Maps.VectorTest.ToIndex_ShouldThrowException_DimensionMismatch" methodname="ToIndex_ShouldThrowException_DimensionMismatch" classname="PlayersWorlds.Maps.VectorTest" runstate="Runnable" seed="415853210" result="Passed" start-time="2024-02-20T15:16:53.0500240Z" end-time="2024-02-20T15:16:53.0501920Z" duration="0.000168" asserts="1" />
            <test-case id="1-1103" name="ToIndex_ShouldThrowException_DimensionOverflow" fullname="PlayersWorlds.Maps.VectorTest.ToIndex_ShouldThrowException_DimensionOverflow" methodname="ToIndex_ShouldThrowException_DimensionOverflow" classname="PlayersWorlds.Maps.VectorTest" runstate="Runnable" seed="1588170817" result="Passed" start-time="2024-02-20T15:16:53.0501980Z" end-time="2024-02-20T15:16:53.0503710Z" duration="0.000173" asserts="1" />
            <test-case id="1-1087" name="Vector_CanAddAndSubtract" fullname="PlayersWorlds.Maps.VectorTest.Vector_CanAddAndSubtract" methodname="Vector_CanAddAndSubtract" classname="PlayersWorlds.Maps.VectorTest" runstate="Runnable" seed="869884104" result="Passed" start-time="2024-02-20T15:16:53.0503780Z" end-time="2024-02-20T15:16:53.0507480Z" duration="0.000370" asserts="6" />
            <test-case id="1-1088" name="Vector_ConstructorChecksArguments" fullname="PlayersWorlds.Maps.VectorTest.Vector_ConstructorChecksArguments" methodname="Vector_ConstructorChecksArguments" classname="PlayersWorlds.Maps.VectorTest" runstate="Runnable" seed="641115165" result="Passed" start-time="2024-02-20T15:16:53.0507560Z" end-time="2024-02-20T15:16:53.0508430Z" duration="0.000087" asserts="1" />
            <test-case id="1-1085" name="Vector_EmptyIsEmpty" fullname="PlayersWorlds.Maps.VectorTest.Vector_EmptyIsEmpty" methodname="Vector_EmptyIsEmpty" classname="PlayersWorlds.Maps.VectorTest" runstate="Runnable" seed="2062344560" result="Passed" start-time="2024-02-20T15:16:53.0508490Z" end-time="2024-02-20T15:16:53.0509100Z" duration="0.000060" asserts="1" />
            <test-case id="1-1084" name="Vector_EmptyVectorIsEmpty" fullname="PlayersWorlds.Maps.VectorTest.Vector_EmptyVectorIsEmpty" methodname="Vector_EmptyVectorIsEmpty" classname="PlayersWorlds.Maps.VectorTest" runstate="Runnable" seed="398666808" result="Passed" start-time="2024-02-20T15:16:53.0509150Z" end-time="2024-02-20T15:16:53.0509710Z" duration="0.000056" asserts="1" />
            <test-case id="1-1080" name="Vector_EqualityIsCheckedByValue" fullname="PlayersWorlds.Maps.VectorTest.Vector_EqualityIsCheckedByValue" methodname="Vector_EqualityIsCheckedByValue" classname="PlayersWorlds.Maps.VectorTest" runstate="Runnable" seed="971716652" result="Passed" start-time="2024-02-20T15:16:53.0509760Z" end-time="2024-02-20T15:16:53.0512260Z" duration="0.000250" asserts="5" />
            <test-case id="1-1092" name="Vector_FromIndex" fullname="PlayersWorlds.Maps.VectorTest.Vector_FromIndex" methodname="Vector_FromIndex" classname="PlayersWorlds.Maps.VectorTest" runstate="Runnable" seed="245294006" result="Passed" start-time="2024-02-20T15:16:53.0512340Z" end-time="2024-02-20T15:16:53.0513350Z" duration="0.000100" asserts="2" />
            <test-case id="1-1081" name="Vector_GetHashCodeIsDerivedFromValue" fullname="PlayersWorlds.Maps.VectorTest.Vector_GetHashCodeIsDerivedFromValue" methodname="Vector_GetHashCodeIsDerivedFromValue" classname="PlayersWorlds.Maps.VectorTest" runstate="Runnable" seed="1687136227" result="Passed" start-time="2024-02-20T15:16:53.0513410Z" end-time="2024-02-20T15:16:53.0515600Z" duration="0.000220" asserts="2" />
            <test-case id="1-1078" name="Vector_IsInitialized" fullname="PlayersWorlds.Maps.VectorTest.Vector_IsInitialized" methodname="Vector_IsInitialized" classname="PlayersWorlds.Maps.VectorTest" runstate="Runnable" seed="737289246" result="Passed" start-time="2024-02-20T15:16:53.0515670Z" end-time="2024-02-20T15:16:53.0516390Z" duration="0.000071" asserts="2" />
            <test-case id="1-1086" name="Vector_NotEqualToNull" fullname="PlayersWorlds.Maps.VectorTest.Vector_NotEqualToNull" methodname="Vector_NotEqualToNull" classname="PlayersWorlds.Maps.VectorTest" runstate="Runnable" seed="1859344059" result="Passed" start-time="2024-02-20T15:16:53.0516450Z" end-time="2024-02-20T15:16:53.0517660Z" duration="0.000121" asserts="3" />
            <test-case id="1-1090" name="Vector_SnappedForce" fullname="PlayersWorlds.Maps.VectorTest.Vector_SnappedForce" methodname="Vector_SnappedForce" classname="PlayersWorlds.Maps.VectorTest" runstate="Runnable" seed="711261222" result="Passed" start-time="2024-02-20T15:16:53.0517720Z" end-time="2024-02-20T15:16:53.0521300Z" duration="0.000358" asserts="9" />
            <test-case id="1-1089" name="Vector_ThrowsIfNotAValidSize" fullname="PlayersWorlds.Maps.VectorTest.Vector_ThrowsIfNotAValidSize" methodname="Vector_ThrowsIfNotAValidSize" classname="PlayersWorlds.Maps.VectorTest" runstate="Runnable" seed="1074149516" result="Passed" start-time="2024-02-20T15:16:53.0521360Z" end-time="2024-02-20T15:16:53.0523620Z" duration="0.000225" asserts="3" />
            <test-case id="1-1091" name="Vector_ToIndex" fullname="PlayersWorlds.Maps.VectorTest.Vector_ToIndex" methodname="Vector_ToIndex" classname="PlayersWorlds.Maps.VectorTest" runstate="Runnable" seed="412389227" result="Passed" start-time="2024-02-20T15:16:53.0523680Z" end-time="2024-02-20T15:16:53.0525330Z" duration="0.000164" asserts="3" />
            <test-case id="1-1082" name="Vector_ToStringFormat" fullname="PlayersWorlds.Maps.VectorTest.Vector_ToStringFormat" methodname="Vector_ToStringFormat" classname="PlayersWorlds.Maps.VectorTest" runstate="Runnable" seed="1204532564" result="Passed" start-time="2024-02-20T15:16:53.0525400Z" end-time="2024-02-20T15:16:53.0526170Z" duration="0.000077" asserts="2" />
            <test-case id="1-1083" name="Vector_ZeroVectorIsNotEmpty" fullname="PlayersWorlds.Maps.VectorTest.Vector_ZeroVectorIsNotEmpty" methodname="Vector_ZeroVectorIsNotEmpty" classname="PlayersWorlds.Maps.VectorTest" runstate="Runnable" seed="84505583" result="Passed" start-time="2024-02-20T15:16:53.0526240Z" end-time="2024-02-20T15:16:53.0527000Z" duration="0.000076" asserts="1" />
            <test-case id="1-1093" name="VectorD_Parse" fullname="PlayersWorlds.Maps.VectorTest.VectorD_Parse" methodname="VectorD_Parse" classname="PlayersWorlds.Maps.VectorTest" runstate="Runnable" seed="86286918" result="Passed" start-time="2024-02-20T15:16:53.0527070Z" end-time="2024-02-20T15:16:53.0527820Z" duration="0.000075" asserts="1" />
          </test-suite>
        </test-suite>
      </test-suite>
      <test-suite type="TestFixture" id="1-1000" name="RandomAreaGeneratorTest" fullname="RandomAreaGeneratorTest" classname="RandomAreaGeneratorTest" runstate="Runnable" testcasecount="2" result="Passed" start-time="2024-02-20T15:16:53.0528330Z" end-time="2024-02-20T15:16:53.0619200Z" duration="0.009087" total="2" passed="2" failed="0" warnings="0" inconclusive="0" skipped="0" asserts="3042">
        <test-case id="1-1001" name="ZoneGenerator_CanGenerateZones" fullname="RandomAreaGeneratorTest.ZoneGenerator_CanGenerateZones" methodname="ZoneGenerator_CanGenerateZones" classname="RandomAreaGeneratorTest" runstate="Runnable" seed="178895414" result="Passed" start-time="2024-02-20T15:16:53.0528840Z" end-time="2024-02-20T15:16:53.0612910Z" duration="0.008408" asserts="3006" />
        <test-case id="1-1002" name="ZoneGenerator_CustomSettings" fullname="RandomAreaGeneratorTest.ZoneGenerator_CustomSettings" methodname="ZoneGenerator_CustomSettings" classname="RandomAreaGeneratorTest" runstate="Runnable" seed="783121960" result="Passed" start-time="2024-02-20T15:16:53.0613010Z" end-time="2024-02-20T15:16:53.0619070Z" duration="0.000607" asserts="36" />
      </test-suite>
    </test-suite>
  </test-suite>
</test-run>